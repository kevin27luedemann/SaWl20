
Sonnenaufgangsweckerlampe_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000188c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  0000188c  00001920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800154  00800154  00001a14  2**0
                  ALLOC
  3 .stab         0000138c  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fc  00000000  00000000  00002da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000128  00000000  00000000  00002fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003fa6  00000000  00000000  000030f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000507  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c76  00000000  00000000  000075a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f4  00000000  00000000  00008218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000581  00000000  00000000  0000850c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c91  00000000  00000000  00008a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  0000b71e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	97 c0       	rjmp	.+302    	; 0x130 <__ctors_end>
       2:	b1 c0       	rjmp	.+354    	; 0x166 <__bad_interrupt>
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	af c0       	rjmp	.+350    	; 0x166 <__bad_interrupt>
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	ad c0       	rjmp	.+346    	; 0x166 <__bad_interrupt>
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	ab c0       	rjmp	.+342    	; 0x166 <__bad_interrupt>
      10:	68 c8       	rjmp	.-3888   	; 0xfffff0e2 <__eeprom_end+0xff7ef0e2>
      12:	a9 c0       	rjmp	.+338    	; 0x166 <__bad_interrupt>
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	a7 c0       	rjmp	.+334    	; 0x166 <__bad_interrupt>
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	a5 c0       	rjmp	.+330    	; 0x166 <__bad_interrupt>
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	a3 c0       	rjmp	.+326    	; 0x166 <__bad_interrupt>
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	a1 c0       	rjmp	.+322    	; 0x166 <__bad_interrupt>
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	48 c2       	rjmp	.+1168   	; 0x4b8 <_Z3aushh+0x2a>
      28:	50 c2       	rjmp	.+1184   	; 0x4ca <_Z3aushh+0x3c>
      2a:	58 c2       	rjmp	.+1200   	; 0x4dc <_Z3aushh+0x4e>
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <_Z3aushh+0x56>
      2e:	60 c2       	rjmp	.+1216   	; 0x4f0 <_Z3aushh+0x62>
      30:	69 c2       	rjmp	.+1234   	; 0x504 <_Z3aushh+0x76>
      32:	85 c2       	rjmp	.+1290   	; 0x53e <_Z3aushh+0xb0>
      34:	8a c2       	rjmp	.+1300   	; 0x54a <_Z3aushh+0xbc>
      36:	00 40       	sbci	r16, 0x00	; 0
      38:	7a 10       	cpse	r7, r10
      3a:	f3 5a       	subi	r31, 0xA3	; 163
      3c:	00 a0       	ldd	r0, Z+32	; 0x20
      3e:	72 4e       	sbci	r23, 0xE2	; 226
      40:	18 09       	sbc	r17, r8
      42:	00 10       	cpse	r0, r0
      44:	a5 d4       	rcall	.+2378   	; 0x990 <_Z5einsth+0x33c>
      46:	e8 00       	.word	0x00e8	; ????
      48:	00 e8       	ldi	r16, 0x80	; 128
      4a:	76 48       	sbci	r23, 0x86	; 134
      4c:	17 00       	.word	0x0017	; ????
      4e:	00 e4       	ldi	r16, 0x40	; 64
      50:	0b 54       	subi	r16, 0x4B	; 75
      52:	02 00       	.word	0x0002	; ????
      54:	00 ca       	rjmp	.-3072   	; 0xfffff456 <__eeprom_end+0xff7ef456>
      56:	9a 3b       	cpi	r25, 0xBA	; 186
      58:	00 00       	nop
      5a:	00 e1       	ldi	r16, 0x10	; 16
      5c:	f5 05       	cpc	r31, r5
      5e:	00 00       	nop
      60:	80 96       	adiw	r24, 0x20	; 32
      62:	98 00       	.word	0x0098	; ????
      64:	00 00       	nop
      66:	40 42       	sbci	r20, 0x20	; 32
      68:	0f 00       	.word	0x000f	; ????
      6a:	00 00       	nop
      6c:	a0 86       	std	Z+8, r10	; 0x08
      6e:	01 00       	.word	0x0001	; ????
      70:	00 00       	nop
      72:	10 27       	eor	r17, r16
      74:	00 00       	nop
      76:	00 00       	nop
      78:	e8 03       	fmulsu	r22, r16
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	64 00       	.word	0x0064	; ????
      80:	00 00       	nop
      82:	00 00       	nop
      84:	0a 00       	.word	0x000a	; ????
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	01 00       	.word	0x0001	; ????
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	2c 76       	andi	r18, 0x6C	; 108
      92:	d8 88       	ldd	r13, Y+16	; 0x10
      94:	dc 67       	ori	r29, 0x7C	; 124
      96:	4f 08       	sbc	r4, r15
      98:	23 df       	rcall	.-442    	; 0xfffffee0 <__eeprom_end+0xff7efee0>
      9a:	c1 df       	rcall	.-126    	; 0x1e <__zero_reg__+0x1d>
      9c:	ae 59       	subi	r26, 0x9E	; 158
      9e:	e1 b1       	in	r30, 0x01	; 1
      a0:	b7 96       	adiw	r30, 0x27	; 39
      a2:	e5 e3       	ldi	r30, 0x35	; 53
      a4:	e4 53       	subi	r30, 0x34	; 52
      a6:	c6 3a       	cpi	r28, 0xA6	; 166
      a8:	e6 51       	subi	r30, 0x16	; 22
      aa:	99 76       	andi	r25, 0x69	; 105
      ac:	96 e8       	ldi	r25, 0x86	; 134
      ae:	e6 c2       	rjmp	.+1484   	; 0x67c <_Z5einsth+0x28>
      b0:	84 26       	eor	r8, r20
      b2:	eb 89       	ldd	r30, Y+19	; 0x13
      b4:	8c 9b       	sbis	0x11, 4	; 17
      b6:	62 ed       	ldi	r22, 0xD2	; 210
      b8:	40 7c       	andi	r20, 0xC0	; 192
      ba:	6f fc       	.word	0xfc6f	; ????
      bc:	ef bc       	out	0x2f, r14	; 47
      be:	9c 9f       	mul	r25, r28
      c0:	40 f2       	brcs	.-112    	; 0x52 <__SREG__+0x13>
      c2:	ba a5       	ldd	r27, Y+42	; 0x2a
      c4:	6f a5       	ldd	r22, Y+47	; 0x2f
      c6:	f4 90       	lpm	r15, Z
      c8:	05 5a       	subi	r16, 0xA5	; 165
      ca:	2a f7       	brpl	.-54     	; 0x96 <__SREG__+0x57>
      cc:	5c 93       	st	X, r21
      ce:	6b 6c       	ori	r22, 0xCB	; 203
      d0:	f9 67       	ori	r31, 0x79	; 121
      d2:	6d c1       	rjmp	.+730    	; 0x3ae <_Z4wtagh+0x2>
      d4:	1b fc       	.word	0xfc1b	; ????
      d6:	e0 e4       	ldi	r30, 0x40	; 64
      d8:	0d 47       	sbci	r16, 0x7D	; 125
      da:	fe f5       	brtc	.+126    	; 0x15a <.do_clear_bss_loop>
      dc:	20 e6       	ldi	r18, 0x60	; 96
      de:	b5 00       	.word	0x00b5	; ????
      e0:	d0 ed       	ldi	r29, 0xD0	; 208
      e2:	90 2e       	mov	r9, r16
      e4:	03 00       	.word	0x0003	; ????
      e6:	94 35       	cpi	r25, 0x54	; 84
      e8:	77 05       	cpc	r23, r7
      ea:	00 80       	ld	r0, Z
      ec:	84 1e       	adc	r8, r20
      ee:	08 00       	.word	0x0008	; ????
      f0:	00 20       	and	r0, r0
      f2:	4e 0a       	sbc	r4, r30
      f4:	00 00       	nop
      f6:	00 c8       	rjmp	.-4096   	; 0xfffff0f8 <__eeprom_end+0xff7ef0f8>
      f8:	0c 33       	cpi	r16, 0x3C	; 60
      fa:	33 33       	cpi	r19, 0x33	; 51
      fc:	33 0f       	add	r19, r19
      fe:	98 6e       	ori	r25, 0xE8	; 232
     100:	12 83       	std	Z+2, r17	; 0x02
     102:	11 41       	sbci	r17, 0x11	; 17
     104:	ef 8d       	ldd	r30, Y+31	; 0x1f
     106:	21 14       	cp	r2, r1
     108:	89 3b       	cpi	r24, 0xB9	; 185
     10a:	e6 55       	subi	r30, 0x56	; 86
     10c:	16 cf       	rjmp	.-468    	; 0xffffff3a <__eeprom_end+0xff7eff3a>
     10e:	fe e6       	ldi	r31, 0x6E	; 110
     110:	db 18       	sub	r13, r11
     112:	d1 84       	ldd	r13, Z+9	; 0x09
     114:	4b 38       	cpi	r20, 0x8B	; 139
     116:	1b f7       	brvc	.-58     	; 0xde <__SREG__+0x9f>
     118:	7c 1d       	adc	r23, r12
     11a:	90 1d       	adc	r25, r0
     11c:	a4 bb       	out	0x14, r26	; 20
     11e:	e4 24       	eor	r14, r4
     120:	20 32       	cpi	r18, 0x20	; 32
     122:	84 72       	andi	r24, 0x24	; 36
     124:	5e 22       	and	r5, r30
     126:	81 00       	.word	0x0081	; ????
     128:	c9 f1       	breq	.+114    	; 0x19c <_Z8lcd_datah+0x12>
     12a:	24 ec       	ldi	r18, 0xC4	; 196
     12c:	a1 e5       	ldi	r26, 0x51	; 81
     12e:	3d 27       	eor	r19, r29

00000130 <__ctors_end>:
     130:	11 24       	eor	r1, r1
     132:	1f be       	out	0x3f, r1	; 63
     134:	cf e5       	ldi	r28, 0x5F	; 95
     136:	d4 e0       	ldi	r29, 0x04	; 4
     138:	de bf       	out	0x3e, r29	; 62
     13a:	cd bf       	out	0x3d, r28	; 61

0000013c <__do_copy_data>:
     13c:	11 e0       	ldi	r17, 0x01	; 1
     13e:	a0 e6       	ldi	r26, 0x60	; 96
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	ec e8       	ldi	r30, 0x8C	; 140
     144:	f8 e1       	ldi	r31, 0x18	; 24
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x10>
     148:	05 90       	lpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a4 35       	cpi	r26, 0x54	; 84
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0xc>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	a4 e5       	ldi	r26, 0x54	; 84
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a8 37       	cpi	r26, 0x78	; 120
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	d4 d7       	rcall	.+4008   	; 0x110c <main>
     164:	91 cb       	rjmp	.-2270   	; 0xfffff888 <__eeprom_end+0xff7ef888>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <_ZL10lcd_enablev>:

////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls
static void lcd_enable( void )
{
	LCD_PORT |= (1<<LCD_EN);     // Enable auf 1 setzen
     168:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16a:	88 e1       	ldi	r24, 0x18	; 24
     16c:	8a 95       	dec	r24
     16e:	f1 f7       	brne	.-4      	; 0x16c <_ZL10lcd_enablev+0x4>
     170:	00 c0       	rjmp	.+0      	; 0x172 <_ZL10lcd_enablev+0xa>
	_delay_us( LCD_ENABLE_US );  // kurze Pause
	LCD_PORT &= ~(1<<LCD_EN);    // Enable auf 0 setzen
     172:	c5 98       	cbi	0x18, 5	; 24
     174:	08 95       	ret

00000176 <_ZL7lcd_outh>:
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
	data &= 0xF0;                       // obere 4 Bit maskieren
	
	LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske löschen
     176:	98 b3       	in	r25, 0x18	; 24
     178:	90 7f       	andi	r25, 0xF0	; 240
     17a:	98 bb       	out	0x18, r25	; 24
	LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
     17c:	98 b3       	in	r25, 0x18	; 24
     17e:	82 95       	swap	r24
     180:	8f 70       	andi	r24, 0x0F	; 15
     182:	98 2b       	or	r25, r24
     184:	98 bb       	out	0x18, r25	; 24
	lcd_enable();
     186:	f0 df       	rcall	.-32     	; 0x168 <_ZL10lcd_enablev>
     188:	08 95       	ret

0000018a <_Z8lcd_datah>:
}

////////////////////////////////////////////////////////////////////////////////
// Sendet ein Datenbyte an das LCD
void lcd_data( uint8_t data )
{
     18a:	cf 93       	push	r28
     18c:	c8 2f       	mov	r28, r24
	LCD_PORT |= (1<<LCD_RS);    // RS auf 1 setzen
     18e:	c4 9a       	sbi	0x18, 4	; 24
	
	lcd_out( data );            // zuerst die oberen,
     190:	f2 df       	rcall	.-28     	; 0x176 <_ZL7lcd_outh>
	lcd_out( data<<4 );         // dann die unteren 4 Bit senden
     192:	8c 2f       	mov	r24, r28
     194:	82 95       	swap	r24
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	ee df       	rcall	.-36     	; 0x176 <_ZL7lcd_outh>
     19a:	88 e3       	ldi	r24, 0x38	; 56
     19c:	8a 95       	dec	r24
     19e:	f1 f7       	brne	.-4      	; 0x19c <_Z8lcd_datah+0x12>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z8lcd_datah+0x18>
	
	_delay_us( LCD_WRITEDATA_US );
}
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <_Z11lcd_commandh>:

////////////////////////////////////////////////////////////////////////////////
// Sendet einen Befehl an das LCD
void lcd_command( uint8_t data )
{
     1a6:	cf 93       	push	r28
     1a8:	c8 2f       	mov	r28, r24
	LCD_PORT &= ~(1<<LCD_RS);    // RS auf 0 setzen
     1aa:	c4 98       	cbi	0x18, 4	; 24
	
	lcd_out( data );             // zuerst die oberen,
     1ac:	e4 df       	rcall	.-56     	; 0x176 <_ZL7lcd_outh>
	lcd_out( data<<4 );           // dann die unteren 4 Bit senden
     1ae:	8c 2f       	mov	r24, r28
     1b0:	82 95       	swap	r24
     1b2:	80 7f       	andi	r24, 0xF0	; 240
     1b4:	e0 df       	rcall	.-64     	; 0x176 <_ZL7lcd_outh>
     1b6:	83 e3       	ldi	r24, 0x33	; 51
     1b8:	8a 95       	dec	r24
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z11lcd_commandh+0x12>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z11lcd_commandh+0x18>
	
	_delay_us( LCD_COMMAND_US );
}
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <_Z9lcd_clearv>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcd_clear( void )
{
	lcd_command( LCD_CLEAR_DISPLAY );
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	f0 df       	rcall	.-32     	; 0x1a6 <_Z11lcd_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	83 e3       	ldi	r24, 0x33	; 51
     1c8:	97 e0       	ldi	r25, 0x07	; 7
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <_Z9lcd_clearv+0x8>
     1ce:	08 95       	ret

000001d0 <_Z8lcd_initv>:
{
	// verwendete Pins auf Ausgang schalten
	uint8_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
	(1<<LCD_RS) |                // R/S Leitung
	(1<<LCD_EN);                 // Enable Leitung
	LCD_DDR |= pins;
     1d0:	87 b3       	in	r24, 0x17	; 23
     1d2:	8f 63       	ori	r24, 0x3F	; 63
     1d4:	87 bb       	out	0x17, r24	; 23
	
	// initial alle Ausgänge auf Null
	LCD_PORT &= ~pins;
     1d6:	88 b3       	in	r24, 0x18	; 24
     1d8:	80 7c       	andi	r24, 0xC0	; 192
     1da:	88 bb       	out	0x18, r24	; 24
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	95 e3       	ldi	r25, 0x35	; 53
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z8lcd_initv+0x10>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z8lcd_initv+0x16>
     1e6:	00 00       	nop
	
	// warten auf die Bereitschaft des LCD
	_delay_ms( LCD_BOOTUP_MS );
	
	// Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
	lcd_out( LCD_SOFT_RESET );
     1e8:	80 e3       	ldi	r24, 0x30	; 48
     1ea:	c5 df       	rcall	.-118    	; 0x176 <_ZL7lcd_outh>
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	91 e1       	ldi	r25, 0x11	; 17
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_Z8lcd_initv+0x20>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_Z8lcd_initv+0x26>
     1f6:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS1 );
	
	lcd_enable();
     1f8:	b7 df       	rcall	.-146    	; 0x168 <_ZL10lcd_enablev>
     1fa:	89 e9       	ldi	r24, 0x99	; 153
     1fc:	93 e0       	ldi	r25, 0x03	; 3
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z8lcd_initv+0x2e>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_Z8lcd_initv+0x34>
	_delay_ms( LCD_SOFT_RESET_MS2 );
	
	lcd_enable();
     204:	b1 df       	rcall	.-158    	; 0x168 <_ZL10lcd_enablev>
     206:	89 e9       	ldi	r24, 0x99	; 153
     208:	93 e0       	ldi	r25, 0x03	; 3
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <_Z8lcd_initv+0x3a>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z8lcd_initv+0x40>
	_delay_ms( LCD_SOFT_RESET_MS3 );
	
	// 4-bit Modus aktivieren
	lcd_out( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT );
     210:	80 e2       	ldi	r24, 0x20	; 32
     212:	b1 df       	rcall	.-158    	; 0x176 <_ZL7lcd_outh>
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	91 e1       	ldi	r25, 0x11	; 17
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <_Z8lcd_initv+0x48>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <_Z8lcd_initv+0x4e>
     21e:	00 00       	nop
	
	// 4-bit Modus / 2 Zeilen / 5x7
	lcd_command( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT |
	LCD_FUNCTION_2LINE |
	LCD_FUNCTION_5X7 );
     220:	88 e2       	ldi	r24, 0x28	; 40
     222:	c1 df       	rcall	.-126    	; 0x1a6 <_Z11lcd_commandh>
	
	// Display ein / Cursor aus / Blinken aus
	lcd_command( LCD_SET_DISPLAY |
	LCD_DISPLAY_ON |
	LCD_CURSOR_OFF |
	LCD_BLINKING_OFF);
     224:	8c e0       	ldi	r24, 0x0C	; 12
     226:	bf df       	rcall	.-130    	; 0x1a6 <_Z11lcd_commandh>
	
	// Cursor inkrement / kein Scrollen
	lcd_command( LCD_SET_ENTRY |
	LCD_ENTRY_INCREASE |
	LCD_ENTRY_NOSHIFT );
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	bd df       	rcall	.-134    	; 0x1a6 <_Z11lcd_commandh>
	
	lcd_clear();
     22c:	ca df       	rcall	.-108    	; 0x1c2 <_Z9lcd_clearv>
     22e:	08 95       	ret

00000230 <_Z8lcd_homev>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
	lcd_command( LCD_CURSOR_HOME );
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	b9 df       	rcall	.-142    	; 0x1a6 <_Z11lcd_commandh>
     234:	83 e3       	ldi	r24, 0x33	; 51
     236:	97 e0       	ldi	r25, 0x07	; 7
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <_Z8lcd_homev+0x8>
     23c:	08 95       	ret

0000023e <_Z13lcd_setcursorhh>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;
	
	switch (y)
     23e:	62 30       	cpi	r22, 0x02	; 2
     240:	59 f0       	breq	.+22     	; 0x258 <_Z13lcd_setcursorhh+0x1a>
     242:	18 f4       	brcc	.+6      	; 0x24a <_Z13lcd_setcursorhh+0xc>
     244:	61 30       	cpi	r22, 0x01	; 1
     246:	71 f4       	brne	.+28     	; 0x264 <_Z13lcd_setcursorhh+0x26>
     248:	05 c0       	rjmp	.+10     	; 0x254 <_Z13lcd_setcursorhh+0x16>
     24a:	63 30       	cpi	r22, 0x03	; 3
     24c:	39 f0       	breq	.+14     	; 0x25c <_Z13lcd_setcursorhh+0x1e>
     24e:	64 30       	cpi	r22, 0x04	; 4
     250:	49 f4       	brne	.+18     	; 0x264 <_Z13lcd_setcursorhh+0x26>
     252:	06 c0       	rjmp	.+12     	; 0x260 <_Z13lcd_setcursorhh+0x22>
	{
		case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
     254:	80 58       	subi	r24, 0x80	; 128
		break;
     256:	05 c0       	rjmp	.+10     	; 0x262 <_Z13lcd_setcursorhh+0x24>
		
		case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
     258:	80 54       	subi	r24, 0x40	; 64
		break;
     25a:	03 c0       	rjmp	.+6      	; 0x262 <_Z13lcd_setcursorhh+0x24>
		
		case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
     25c:	80 57       	subi	r24, 0x70	; 112
		break;
     25e:	01 c0       	rjmp	.+2      	; 0x262 <_Z13lcd_setcursorhh+0x24>
		
		case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
     260:	80 53       	subi	r24, 0x30	; 48
		
		default:
		return;                                   // für den Fall einer falschen Zeile
	}
	
	lcd_command( data );
     262:	a1 df       	rcall	.-190    	; 0x1a6 <_Z11lcd_commandh>
     264:	08 95       	ret

00000266 <_Z10lcd_stringPKc>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
	while( *data != '\0' )
     26c:	88 81       	ld	r24, Y
     26e:	88 23       	and	r24, r24
     270:	29 f0       	breq	.+10     	; 0x27c <_Z10lcd_stringPKc+0x16>
}

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
     272:	21 96       	adiw	r28, 0x01	; 1
{
	while( *data != '\0' )
	lcd_data( *data++ );
     274:	8a df       	rcall	.-236    	; 0x18a <_Z8lcd_datah>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
     276:	89 91       	ld	r24, Y+
     278:	81 11       	cpse	r24, r1
     27a:	fc cf       	rjmp	.-8      	; 0x274 <_Z10lcd_stringPKc+0xe>
	lcd_data( *data++ );
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
     282:	97 b1       	in	r25, 0x07	; 7
     284:	8f 71       	andi	r24, 0x1F	; 31
     286:	90 7e       	andi	r25, 0xE0	; 224
     288:	98 2b       	or	r25, r24
     28a:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);
     28c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
     28e:	36 99       	sbic	0x06, 6	; 6
     290:	fe cf       	rjmp	.-4      	; 0x28e <_Z8ADC_Readh+0xc>
	}
	return ADCW;
     292:	24 b1       	in	r18, 0x04	; 4
     294:	35 b1       	in	r19, 0x05	; 5
}
     296:	82 2f       	mov	r24, r18
     298:	93 2f       	mov	r25, r19
     29a:	08 95       	ret

0000029c <_Z11lichteinaush>:
		}
	}
}

void lichteinaus(uint8_t pos){
	switch (pos)
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	91 f0       	breq	.+36     	; 0x2c4 <_Z11lichteinaush+0x28>
     2a0:	28 f4       	brcc	.+10     	; 0x2ac <_Z11lichteinaush+0x10>
     2a2:	88 23       	and	r24, r24
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <_Z11lichteinaush+0x1c>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	c1 f4       	brne	.+48     	; 0x2da <_Z11lichteinaush+0x3e>
     2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <_Z11lichteinaush+0x24>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	71 f0       	breq	.+28     	; 0x2cc <_Z11lichteinaush+0x30>
     2b0:	58 f0       	brcs	.+22     	; 0x2c8 <_Z11lichteinaush+0x2c>
     2b2:	85 30       	cpi	r24, 0x05	; 5
     2b4:	91 f4       	brne	.+36     	; 0x2da <_Z11lichteinaush+0x3e>
     2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <_Z11lichteinaush+0x38>
	{
		case 0:
			PORTC &= ~((1<<PC5) | (1<<PC4) | (1<<PC3));
     2b8:	85 b3       	in	r24, 0x15	; 21
     2ba:	87 7c       	andi	r24, 0xC7	; 199
     2bc:	85 bb       	out	0x15, r24	; 21
			break;
     2be:	08 95       	ret
			
		case 1:
			PORTC |= (1<<PC5);
     2c0:	ad 9a       	sbi	0x15, 5	; 21
			break;
     2c2:	08 95       	ret
		
		case 2:
			PORTC |= (1<<PC4);
     2c4:	ac 9a       	sbi	0x15, 4	; 21
			break;
     2c6:	08 95       	ret
			
		case 3: 
			PORTC |= (1<<PC3);
     2c8:	ab 9a       	sbi	0x15, 3	; 21
			break;
     2ca:	08 95       	ret
		
		case 4:
			PORTC |= ((1<<PC5) | (1<<PC4) | (1<<PC3));
     2cc:	85 b3       	in	r24, 0x15	; 21
     2ce:	88 63       	ori	r24, 0x38	; 56
     2d0:	85 bb       	out	0x15, r24	; 21
			break;
     2d2:	08 95       	ret
		
		case 5:
			PORTC |= ((1<<PC5) | (1<<PC4));
     2d4:	85 b3       	in	r24, 0x15	; 21
     2d6:	80 63       	ori	r24, 0x30	; 48
     2d8:	85 bb       	out	0x15, r24	; 21
     2da:	08 95       	ret

000002dc <_Z6Weckerv>:

#ifndef ZEIT_H_
#define ZEIT_H_

void Wecker(){
	if (WochenTag!=0 && WochenTag!=6)
     2dc:	80 91 74 01 	lds	r24, 0x0174
     2e0:	88 23       	and	r24, r24
     2e2:	a1 f0       	breq	.+40     	; 0x30c <_Z6Weckerv+0x30>
     2e4:	86 30       	cpi	r24, 0x06	; 6
     2e6:	91 f0       	breq	.+36     	; 0x30c <_Z6Weckerv+0x30>
	{
		if(Stunden==WStunden[0]){
     2e8:	90 91 72 01 	lds	r25, 0x0172
     2ec:	80 91 75 01 	lds	r24, 0x0175
     2f0:	98 13       	cpse	r25, r24
     2f2:	1d c0       	rjmp	.+58     	; 0x32e <_Z6Weckerv+0x52>
			if(Minuten==WMinuten[0]){
     2f4:	90 91 70 01 	lds	r25, 0x0170
     2f8:	80 91 76 01 	lds	r24, 0x0176
     2fc:	98 13       	cpse	r25, r24
     2fe:	17 c0       	rjmp	.+46     	; 0x32e <_Z6Weckerv+0x52>
				Wan = 1;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 6f 01 	sts	0x016F, r24
				lichteinaus(4);
     306:	84 e0       	ldi	r24, 0x04	; 4
     308:	c9 df       	rcall	.-110    	; 0x29c <_Z11lichteinaush>
     30a:	08 95       	ret
			}
		}
	}
	else
	{
		if(Stunden==WStunden[1]){
     30c:	90 91 73 01 	lds	r25, 0x0173
     310:	80 91 75 01 	lds	r24, 0x0175
     314:	98 13       	cpse	r25, r24
     316:	0b c0       	rjmp	.+22     	; 0x32e <_Z6Weckerv+0x52>
			if(Minuten==WMinuten[1]){
     318:	90 91 71 01 	lds	r25, 0x0171
     31c:	80 91 76 01 	lds	r24, 0x0176
     320:	98 13       	cpse	r25, r24
     322:	05 c0       	rjmp	.+10     	; 0x32e <_Z6Weckerv+0x52>
				Wan = 1;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 6f 01 	sts	0x016F, r24
				lichteinaus(4);
     32a:	84 e0       	ldi	r24, 0x04	; 4
     32c:	b7 df       	rcall	.-146    	; 0x29c <_Z11lichteinaush>
     32e:	08 95       	ret

00000330 <_Z10temperaturv>:
}


void temperatur(){

	ADC_Read(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	a7 df       	rcall	.-178    	; 0x282 <_Z8ADC_Readh>
	uint16_t adcval = ADC_Read(0);
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	a5 df       	rcall	.-182    	; 0x282 <_Z8ADC_Readh>
	double span= (double)adcval*(5.0/1024.0);
	double widerst = ((double)span*2700.0)/((double)(5-(double)span));
	tempera = (100.0/1387.0)*widerst+(50+tempoffset-(100.0/1387.0)*2417.0);
	tempera	= 0;
     338:	10 92 6a 01 	sts	0x016A, r1
     33c:	10 92 6b 01 	sts	0x016B, r1
     340:	10 92 6c 01 	sts	0x016C, r1
     344:	10 92 6d 01 	sts	0x016D, r1
     348:	08 95       	ret

0000034a <_Z4zeitv>:
}

void zeit(){
	sektemp=Sekunden;
     34a:	80 91 77 01 	lds	r24, 0x0177
     34e:	80 93 6e 01 	sts	0x016E, r24
	if (Sekunden >= 60){
     352:	8c 33       	cpi	r24, 0x3C	; 60
     354:	28 f1       	brcs	.+74     	; 0x3a0 <_Z4zeitv+0x56>
		//Temperatur bestimmen
		//Da auf der Platine nicht eingebaut, wird es momentn ausgenommen
//		temperatur();
		
		Sekunden = 0;
     356:	10 92 77 01 	sts	0x0177, r1
		Minuten++;
     35a:	80 91 76 01 	lds	r24, 0x0176
     35e:	8f 5f       	subi	r24, 0xFF	; 255
		if(Minuten >= 60){
     360:	8c 33       	cpi	r24, 0x3C	; 60
     362:	18 f4       	brcc	.+6      	; 0x36a <_Z4zeitv+0x20>
		//Temperatur bestimmen
		//Da auf der Platine nicht eingebaut, wird es momentn ausgenommen
//		temperatur();
		
		Sekunden = 0;
		Minuten++;
     364:	80 93 76 01 	sts	0x0176, r24
     368:	07 c0       	rjmp	.+14     	; 0x378 <_Z4zeitv+0x2e>
		if(Minuten >= 60){
			Minuten = 0;
     36a:	10 92 76 01 	sts	0x0176, r1
			Stunden++;
     36e:	80 91 75 01 	lds	r24, 0x0175
     372:	8f 5f       	subi	r24, 0xFF	; 255
     374:	80 93 75 01 	sts	0x0175, r24
		}
		if(Stunden >= 24){
     378:	80 91 75 01 	lds	r24, 0x0175
     37c:	88 31       	cpi	r24, 0x18	; 24
     37e:	80 f0       	brcs	.+32     	; 0x3a0 <_Z4zeitv+0x56>
			Stunden = 0;
     380:	10 92 75 01 	sts	0x0175, r1
			WochenTag++;
     384:	80 91 74 01 	lds	r24, 0x0174
     388:	8f 5f       	subi	r24, 0xFF	; 255
			if (WochenTag>=7)
     38a:	87 30       	cpi	r24, 0x07	; 7
     38c:	18 f4       	brcc	.+6      	; 0x394 <_Z4zeitv+0x4a>
			Minuten = 0;
			Stunden++;
		}
		if(Stunden >= 24){
			Stunden = 0;
			WochenTag++;
     38e:	80 93 74 01 	sts	0x0174, r24
     392:	02 c0       	rjmp	.+4      	; 0x398 <_Z4zeitv+0x4e>
			if (WochenTag>=7)
			{
				WochenTag=0;
     394:	10 92 74 01 	sts	0x0174, r1
			}
			Sekunden += sekoffset; //Ausgleich der VerlustSekunden
     398:	80 91 69 01 	lds	r24, 0x0169
     39c:	80 93 77 01 	sts	0x0177, r24
		}
	}
	
	if(Wan==0)
     3a0:	80 91 6f 01 	lds	r24, 0x016F
     3a4:	81 11       	cpse	r24, r1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <_Z4zeitv+0x60>
	{
		Wecker();
     3a8:	99 df       	rcall	.-206    	; 0x2dc <_Z6Weckerv>
     3aa:	08 95       	ret

000003ac <_Z4wtagh>:

#ifndef AUSGABE_H_
#define AUSGABE_H_

void wtag(uint8_t numm){
	switch (numm)
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	b9 f0       	breq	.+46     	; 0x3de <_Z4wtagh+0x32>
     3b0:	20 f4       	brcc	.+8      	; 0x3ba <_Z4wtagh+0xe>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	61 f0       	breq	.+24     	; 0x3ce <_Z4wtagh+0x22>
     3b6:	78 f4       	brcc	.+30     	; 0x3d6 <_Z4wtagh+0x2a>
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <_Z4wtagh+0x1a>
     3ba:	85 30       	cpi	r24, 0x05	; 5
     3bc:	c1 f0       	breq	.+48     	; 0x3ee <_Z4wtagh+0x42>
     3be:	98 f0       	brcs	.+38     	; 0x3e6 <_Z4wtagh+0x3a>
     3c0:	86 30       	cpi	r24, 0x06	; 6
     3c2:	e1 f4       	brne	.+56     	; 0x3fc <_Z4wtagh+0x50>
     3c4:	18 c0       	rjmp	.+48     	; 0x3f6 <_Z4wtagh+0x4a>
	{
		case 0:
		lcd_string("So ");
     3c6:	83 e6       	ldi	r24, 0x63	; 99
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	4d df       	rcall	.-358    	; 0x266 <_Z10lcd_stringPKc>
		break;
     3cc:	08 95       	ret
		
		case 1:
		lcd_string("Mo ");
     3ce:	87 e6       	ldi	r24, 0x67	; 103
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	49 df       	rcall	.-366    	; 0x266 <_Z10lcd_stringPKc>
		break;
     3d4:	08 95       	ret
		
		case 2:
		lcd_string("Di ");
     3d6:	8b e6       	ldi	r24, 0x6B	; 107
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	45 df       	rcall	.-374    	; 0x266 <_Z10lcd_stringPKc>
		break;
     3dc:	08 95       	ret
		
		case 3:
		lcd_string("Mi ");
     3de:	8f e6       	ldi	r24, 0x6F	; 111
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	41 df       	rcall	.-382    	; 0x266 <_Z10lcd_stringPKc>
		break;
     3e4:	08 95       	ret
		
		case 4:
		lcd_string("Do ");
     3e6:	83 e7       	ldi	r24, 0x73	; 115
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	3d df       	rcall	.-390    	; 0x266 <_Z10lcd_stringPKc>
		break;
     3ec:	08 95       	ret
		
		case 5:
		lcd_string("Fr ");
     3ee:	87 e7       	ldi	r24, 0x77	; 119
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	39 df       	rcall	.-398    	; 0x266 <_Z10lcd_stringPKc>
		break;
     3f4:	08 95       	ret
		
		case 6:
		lcd_string("Sa ");
     3f6:	8b e7       	ldi	r24, 0x7B	; 123
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	35 df       	rcall	.-406    	; 0x266 <_Z10lcd_stringPKc>
     3fc:	08 95       	ret

000003fe <_Z7zeitaush>:
		}

}

void zeitaus(uint8_t pos){
	switch (pos)
     3fe:	88 23       	and	r24, r24
     400:	21 f0       	breq	.+8      	; 0x40a <_Z7zeitaush+0xc>
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	09 f0       	breq	.+2      	; 0x408 <_Z7zeitaush+0xa>
     406:	42 c0       	rjmp	.+132    	; 0x48c <__stack+0x2d>
     408:	1a c0       	rjmp	.+52     	; 0x43e <_Z7zeitaush+0x40>
	{
		case 0:	//keine Sekunden
			itoa( Stunden, Buffer, 10 );
     40a:	4a e0       	ldi	r20, 0x0A	; 10
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	65 e5       	ldi	r22, 0x55	; 85
     410:	71 e0       	ldi	r23, 0x01	; 1
     412:	80 91 75 01 	lds	r24, 0x0175
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a0 d7       	rcall	.+3904   	; 0x135a <itoa>
			lcd_string(Buffer);
     41a:	85 e5       	ldi	r24, 0x55	; 85
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	23 df       	rcall	.-442    	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(":");
     420:	83 ed       	ldi	r24, 0xD3	; 211
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	20 df       	rcall	.-448    	; 0x266 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     426:	4a e0       	ldi	r20, 0x0A	; 10
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	65 e5       	ldi	r22, 0x55	; 85
     42c:	71 e0       	ldi	r23, 0x01	; 1
     42e:	80 91 76 01 	lds	r24, 0x0176
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	92 d7       	rcall	.+3876   	; 0x135a <itoa>
			lcd_string(Buffer);
     436:	85 e5       	ldi	r24, 0x55	; 85
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	15 df       	rcall	.-470    	; 0x266 <_Z10lcd_stringPKc>
			
			break;
     43c:	08 95       	ret
		
		case 1:	//mit Sekunden
			itoa( Stunden, Buffer, 10 );
     43e:	4a e0       	ldi	r20, 0x0A	; 10
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	65 e5       	ldi	r22, 0x55	; 85
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	80 91 75 01 	lds	r24, 0x0175
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	86 d7       	rcall	.+3852   	; 0x135a <itoa>
			lcd_string(Buffer);
     44e:	85 e5       	ldi	r24, 0x55	; 85
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	09 df       	rcall	.-494    	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(":");
     454:	83 ed       	ldi	r24, 0xD3	; 211
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	06 df       	rcall	.-500    	; 0x266 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     45a:	4a e0       	ldi	r20, 0x0A	; 10
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	65 e5       	ldi	r22, 0x55	; 85
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	80 91 76 01 	lds	r24, 0x0176
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	78 d7       	rcall	.+3824   	; 0x135a <itoa>
			lcd_string(Buffer);
     46a:	85 e5       	ldi	r24, 0x55	; 85
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	fb de       	rcall	.-522    	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(":");
     470:	83 ed       	ldi	r24, 0xD3	; 211
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	f8 de       	rcall	.-528    	; 0x266 <_Z10lcd_stringPKc>
			itoa(Sekunden, Buffer,10);
     476:	4a e0       	ldi	r20, 0x0A	; 10
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	65 e5       	ldi	r22, 0x55	; 85
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	80 91 77 01 	lds	r24, 0x0177
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	6a d7       	rcall	.+3796   	; 0x135a <itoa>
			lcd_string(Buffer);
     486:	85 e5       	ldi	r24, 0x55	; 85
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	ed de       	rcall	.-550    	; 0x266 <_Z10lcd_stringPKc>
     48c:	08 95       	ret

0000048e <_Z3aushh>:
		default:
		break;
	}
}

void aus(uint8_t zeile, uint8_t pos){
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	c6 2f       	mov	r28, r22
	
	switch (zeile)
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	21 f0       	breq	.+8      	; 0x4a2 <_Z3aushh+0x14>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	09 f0       	breq	.+2      	; 0x4a0 <_Z3aushh+0x12>
     49e:	9d c0       	rjmp	.+314    	; 0x5da <_Z3aushh+0x14c>
     4a0:	71 c0       	rjmp	.+226    	; 0x584 <_Z3aushh+0xf6>
	{
		case 1:
			lcd_clear();
     4a2:	8f de       	rcall	.-738    	; 0x1c2 <_Z9lcd_clearv>
			lcd_home();
     4a4:	c5 de       	rcall	.-630    	; 0x230 <_Z8lcd_homev>
			switch (pos)
     4a6:	ec 2f       	mov	r30, r28
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	e8 30       	cpi	r30, 0x08	; 8
     4ac:	f1 05       	cpc	r31, r1
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <_Z3aushh+0x24>
     4b0:	94 c0       	rjmp	.+296    	; 0x5da <_Z3aushh+0x14c>
     4b2:	ed 5e       	subi	r30, 0xED	; 237
     4b4:	ff 4f       	sbci	r31, 0xFF	; 255
     4b6:	09 94       	ijmp
			{
				case 0:
					//Alles ohne Sekunden
					wtag(WochenTag);
     4b8:	80 91 74 01 	lds	r24, 0x0174
     4bc:	77 df       	rcall	.-274    	; 0x3ac <_Z4wtagh>
					lcd_string(" ");
     4be:	84 ea       	ldi	r24, 0xA4	; 164
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	d1 de       	rcall	.-606    	; 0x266 <_Z10lcd_stringPKc>
					zeitaus(0);
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	9b df       	rcall	.-202    	; 0x3fe <_Z7zeitaush>
					
					break;
     4c8:	88 c0       	rjmp	.+272    	; 0x5da <_Z3aushh+0x14c>
					
				case 1:
					//Alles
					wtag(WochenTag);
     4ca:	80 91 74 01 	lds	r24, 0x0174
     4ce:	6e df       	rcall	.-292    	; 0x3ac <_Z4wtagh>
					lcd_string(" ");
     4d0:	84 ea       	ldi	r24, 0xA4	; 164
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	c8 de       	rcall	.-624    	; 0x266 <_Z10lcd_stringPKc>
					zeitaus(1);
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	92 df       	rcall	.-220    	; 0x3fe <_Z7zeitaush>
					
					break;
     4da:	7f c0       	rjmp	.+254    	; 0x5da <_Z3aushh+0x14c>
				case 2:
					//Nur Kalender
					wtag(WochenTag);
     4dc:	80 91 74 01 	lds	r24, 0x0174
     4e0:	65 df       	rcall	.-310    	; 0x3ac <_Z4wtagh>
					
					break;
     4e2:	7b c0       	rjmp	.+246    	; 0x5da <_Z3aushh+0x14c>
				case 3:
					//Nur Zeit mit Sekunden mit WDAY
					wtag(WochenTag);
     4e4:	80 91 74 01 	lds	r24, 0x0174
     4e8:	61 df       	rcall	.-318    	; 0x3ac <_Z4wtagh>
					zeitaus(1);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	88 df       	rcall	.-240    	; 0x3fe <_Z7zeitaush>
					
					break;
     4ee:	75 c0       	rjmp	.+234    	; 0x5da <_Z3aushh+0x14c>
					
				case 4:
					lcd_string("Guten Tag");
     4f0:	8f e7       	ldi	r24, 0x7F	; 127
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	b8 de       	rcall	.-656    	; 0x266 <_Z10lcd_stringPKc>
					lcd_setcursor(0,2);
     4f6:	62 e0       	ldi	r22, 0x02	; 2
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	a1 de       	rcall	.-702    	; 0x23e <_Z13lcd_setcursorhh>
					lcd_string("Wecker start V2.6");
     4fc:	89 e8       	ldi	r24, 0x89	; 137
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	b2 de       	rcall	.-668    	; 0x266 <_Z10lcd_stringPKc>
					
					break;
     502:	6b c0       	rjmp	.+214    	; 0x5da <_Z3aushh+0x14c>
				
				case 5:
					//Wecker Werktags
					lcd_string("Weckzeit: ");
     504:	8b e9       	ldi	r24, 0x9B	; 155
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ae de       	rcall	.-676    	; 0x266 <_Z10lcd_stringPKc>
					itoa(WStunden[0],Buffer,10);
     50a:	4a e0       	ldi	r20, 0x0A	; 10
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	65 e5       	ldi	r22, 0x55	; 85
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	80 91 72 01 	lds	r24, 0x0172
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	20 d7       	rcall	.+3648   	; 0x135a <itoa>
					lcd_string(Buffer);
     51a:	85 e5       	ldi	r24, 0x55	; 85
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	a3 de       	rcall	.-698    	; 0x266 <_Z10lcd_stringPKc>
					lcd_string(":");
     520:	83 ed       	ldi	r24, 0xD3	; 211
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 de       	rcall	.-704    	; 0x266 <_Z10lcd_stringPKc>
					itoa(WMinuten[0],Buffer,10);
     526:	4a e0       	ldi	r20, 0x0A	; 10
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	65 e5       	ldi	r22, 0x55	; 85
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	80 91 70 01 	lds	r24, 0x0170
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	12 d7       	rcall	.+3620   	; 0x135a <itoa>
					lcd_string(Buffer);
     536:	85 e5       	ldi	r24, 0x55	; 85
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	95 de       	rcall	.-726    	; 0x266 <_Z10lcd_stringPKc>
					
					break;
     53c:	4e c0       	rjmp	.+156    	; 0x5da <_Z3aushh+0x14c>
					
				case 6:
					//Zeit ohne Sekunden mit WDAY
					wtag(WochenTag);
     53e:	80 91 74 01 	lds	r24, 0x0174
     542:	34 df       	rcall	.-408    	; 0x3ac <_Z4wtagh>
					zeitaus(0);
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	5b df       	rcall	.-330    	; 0x3fe <_Z7zeitaush>
					
					break;
     548:	48 c0       	rjmp	.+144    	; 0x5da <_Z3aushh+0x14c>
					
				case 7:
					//Wecker Wochenends
					lcd_string("Weckzeit: ");
     54a:	8b e9       	ldi	r24, 0x9B	; 155
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	8b de       	rcall	.-746    	; 0x266 <_Z10lcd_stringPKc>
					itoa(WStunden[1],Buffer,10);
     550:	4a e0       	ldi	r20, 0x0A	; 10
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	65 e5       	ldi	r22, 0x55	; 85
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	80 91 73 01 	lds	r24, 0x0173
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	fd d6       	rcall	.+3578   	; 0x135a <itoa>
					lcd_string(Buffer);
     560:	85 e5       	ldi	r24, 0x55	; 85
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	80 de       	rcall	.-768    	; 0x266 <_Z10lcd_stringPKc>
					lcd_string(":");
     566:	83 ed       	ldi	r24, 0xD3	; 211
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	7d de       	rcall	.-774    	; 0x266 <_Z10lcd_stringPKc>
					itoa(WMinuten[1],Buffer,10);
     56c:	4a e0       	ldi	r20, 0x0A	; 10
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	65 e5       	ldi	r22, 0x55	; 85
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	80 91 71 01 	lds	r24, 0x0171
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	ef d6       	rcall	.+3550   	; 0x135a <itoa>
					lcd_string(Buffer);
     57c:	85 e5       	ldi	r24, 0x55	; 85
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	72 de       	rcall	.-796    	; 0x266 <_Z10lcd_stringPKc>
					
					break;
     582:	2b c0       	rjmp	.+86     	; 0x5da <_Z3aushh+0x14c>
			}
			break;
			
		case 2:
			lcd_setcursor(0,2);
     584:	62 e0       	ldi	r22, 0x02	; 2
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	5a de       	rcall	.-844    	; 0x23e <_Z13lcd_setcursorhh>
				switch (pos)
     58a:	c1 30       	cpi	r28, 0x01	; 1
     58c:	31 f5       	brne	.+76     	; 0x5da <_Z3aushh+0x14c>
					
						break;
						
					case 1:
						//Temperatur
						dtostrf(tempera,2,2,Buffer);
     58e:	60 91 6a 01 	lds	r22, 0x016A
     592:	70 91 6b 01 	lds	r23, 0x016B
     596:	80 91 6c 01 	lds	r24, 0x016C
     59a:	90 91 6d 01 	lds	r25, 0x016D
     59e:	05 e5       	ldi	r16, 0x55	; 85
     5a0:	11 e0       	ldi	r17, 0x01	; 1
     5a2:	22 e0       	ldi	r18, 0x02	; 2
     5a4:	42 e0       	ldi	r20, 0x02	; 2
     5a6:	b9 d6       	rcall	.+3442   	; 0x131a <dtostrf>
						lcd_string(Buffer);
     5a8:	c8 01       	movw	r24, r16
     5aa:	5d de       	rcall	.-838    	; 0x266 <_Z10lcd_stringPKc>
						lcd_data(0b11011111); //°
     5ac:	8f ed       	ldi	r24, 0xDF	; 223
     5ae:	ed dd       	rcall	.-1062   	; 0x18a <_Z8lcd_datah>
						lcd_data(0b01000011); //C
     5b0:	83 e4       	ldi	r24, 0x43	; 67
     5b2:	eb dd       	rcall	.-1066   	; 0x18a <_Z8lcd_datah>
						
						//Ausgabe, ob der Wecker bzw das Licht an ist
						if (Wan==1)
     5b4:	80 91 6f 01 	lds	r24, 0x016F
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	39 f4       	brne	.+14     	; 0x5ca <_Z3aushh+0x13c>
						{
							lcd_setcursor(12,1);
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	8c e0       	ldi	r24, 0x0C	; 12
     5c0:	3e de       	rcall	.-900    	; 0x23e <_Z13lcd_setcursorhh>
							lcd_string("We");
     5c2:	86 ea       	ldi	r24, 0xA6	; 166
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	4f de       	rcall	.-866    	; 0x266 <_Z10lcd_stringPKc>
     5c8:	08 c0       	rjmp	.+16     	; 0x5da <_Z3aushh+0x14c>
						}
						else if (PORTC & (1<<PC5))
     5ca:	ad 9b       	sbis	0x15, 5	; 21
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <_Z3aushh+0x14c>
						{
							lcd_setcursor(12,1);
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	8c e0       	ldi	r24, 0x0C	; 12
     5d2:	35 de       	rcall	.-918    	; 0x23e <_Z13lcd_setcursorhh>
							lcd_string("Li");
     5d4:	89 ea       	ldi	r24, 0xA9	; 169
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	46 de       	rcall	.-884    	; 0x266 <_Z10lcd_stringPKc>
						break;
				}
			break;
		}

}
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <_Z8erhoehenPhhhPKc>:
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	e9 01       	movw	r28, r18

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     5e8:	82 99       	sbic	0x10, 2	; 16
     5ea:	31 c0       	rjmp	.+98     	; 0x64e <_Z8erhoehenPhhhPKc+0x6c>
     5ec:	ef ef       	ldi	r30, 0xFF	; 255
     5ee:	f3 eb       	ldi	r31, 0xB3	; 179
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <_Z8erhoehenPhhhPKc+0xe>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <_Z8erhoehenPhhhPKc+0x14>
     5f6:	00 00       	nop
     5f8:	ef ef       	ldi	r30, 0xFF	; 255
     5fa:	f3 e2       	ldi	r31, 0x23	; 35
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <_Z8erhoehenPhhhPKc+0x1a>
     600:	00 c0       	rjmp	.+0      	; 0x602 <_Z8erhoehenPhhhPKc+0x20>
     602:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     604:	82 9b       	sbis	0x10, 2	; 16
     606:	23 c0       	rjmp	.+70     	; 0x64e <_Z8erhoehenPhhhPKc+0x6c>
     608:	ef ef       	ldi	r30, 0xFF	; 255
     60a:	f3 eb       	ldi	r31, 0xB3	; 179
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <_Z8erhoehenPhhhPKc+0x2a>
     610:	00 c0       	rjmp	.+0      	; 0x612 <_Z8erhoehenPhhhPKc+0x30>
     612:	00 00       	nop
     614:	ef ef       	ldi	r30, 0xFF	; 255
     616:	f3 e2       	ldi	r31, 0x23	; 35
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <_Z8erhoehenPhhhPKc+0x36>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <_Z8erhoehenPhhhPKc+0x3c>
     61e:	00 00       	nop
	if(debounce(&PIND,2))
	{
		*var +=1 ;
     620:	fc 01       	movw	r30, r24
     622:	20 81       	ld	r18, Z
     624:	2f 5f       	subi	r18, 0xFF	; 255
		if(*var>=obergrenze){
     626:	26 17       	cp	r18, r22
     628:	10 f4       	brcc	.+4      	; 0x62e <_Z8erhoehenPhhhPKc+0x4c>
//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
	if(debounce(&PIND,2))
	{
		*var +=1 ;
     62a:	20 83       	st	Z, r18
     62c:	02 c0       	rjmp	.+4      	; 0x632 <_Z8erhoehenPhhhPKc+0x50>
		if(*var>=obergrenze){
			*var=0;
     62e:	fc 01       	movw	r30, r24
     630:	10 82       	st	Z, r1
		}
		aus(1,pos);
     632:	64 2f       	mov	r22, r20
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	2b df       	rcall	.-426    	; 0x48e <_Z3aushh>
		aus(2,0);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	28 df       	rcall	.-432    	; 0x48e <_Z3aushh>
		while( *data != '\0' )
     63e:	88 81       	ld	r24, Y
     640:	88 23       	and	r24, r24
     642:	29 f0       	breq	.+10     	; 0x64e <_Z8erhoehenPhhhPKc+0x6c>
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     644:	21 96       	adiw	r28, 0x01	; 1
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
		lcd_data( *data++ );
     646:	a1 dd       	rcall	.-1214   	; 0x18a <_Z8lcd_datah>
		if(*var>=obergrenze){
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
     648:	89 91       	ld	r24, Y+
     64a:	81 11       	cpse	r24, r1
     64c:	fc cf       	rjmp	.-8      	; 0x646 <_Z8erhoehenPhhhPKc+0x64>
		lcd_data( *data++ );
		
	}
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <_Z5einsth>:


//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
	uint8_t temp=0;
	//abfrage was eingestellt werden soll
	switch (posit)
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	09 f4       	brne	.+2      	; 0x660 <_Z5einsth+0xc>
     65e:	9e c0       	rjmp	.+316    	; 0x79c <_Z5einsth+0x148>
     660:	30 f4       	brcc	.+12     	; 0x66e <_Z5einsth+0x1a>
     662:	88 23       	and	r24, r24
     664:	69 f0       	breq	.+26     	; 0x680 <_Z5einsth+0x2c>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	09 f0       	breq	.+2      	; 0x66c <_Z5einsth+0x18>
     66a:	a4 c1       	rjmp	.+840    	; 0x9b4 <_Z5einsth+0x360>
     66c:	71 c0       	rjmp	.+226    	; 0x750 <_Z5einsth+0xfc>
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	09 f4       	brne	.+2      	; 0x674 <_Z5einsth+0x20>
     672:	e4 c0       	rjmp	.+456    	; 0x83c <_Z5einsth+0x1e8>
     674:	08 f4       	brcc	.+2      	; 0x678 <_Z5einsth+0x24>
     676:	ba c0       	rjmp	.+372    	; 0x7ec <_Z5einsth+0x198>
     678:	85 30       	cpi	r24, 0x05	; 5
     67a:	09 f0       	breq	.+2      	; 0x67e <_Z5einsth+0x2a>
     67c:	9b c1       	rjmp	.+822    	; 0x9b4 <_Z5einsth+0x360>
     67e:	3c c1       	rjmp	.+632    	; 0x8f8 <_Z5einsth+0x2a4>
	{
	case 0:
		//Einstellen Zeit
		//alles einstellen bis auf Sekunden
		//diese werden auf 0 gesetzt
		aus(1,6);
     680:	66 e0       	ldi	r22, 0x06	; 6
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	04 df       	rcall	.-504    	; 0x48e <_Z3aushh>
		aus(2,0);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	01 df       	rcall	.-510    	; 0x48e <_Z3aushh>
		lcd_string(NAME(Stunden));
     68c:	8c ea       	ldi	r24, 0xAC	; 172
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	ea dd       	rcall	.-1068   	; 0x266 <_Z10lcd_stringPKc>

//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
	uint8_t temp=0;
     692:	c0 e0       	ldi	r28, 0x00	; 0

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     694:	83 99       	sbic	0x10, 3	; 16
     696:	34 c0       	rjmp	.+104    	; 0x700 <_Z5einsth+0xac>
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	93 eb       	ldi	r25, 0xB3	; 179
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <_Z5einsth+0x48>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <_Z5einsth+0x4e>
     6a2:	00 00       	nop
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	93 e2       	ldi	r25, 0x23	; 35
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <_Z5einsth+0x54>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <_Z5einsth+0x5a>
     6ae:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     6b0:	83 9b       	sbis	0x10, 3	; 16
     6b2:	26 c0       	rjmp	.+76     	; 0x700 <_Z5einsth+0xac>
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	93 eb       	ldi	r25, 0xB3	; 179
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <_Z5einsth+0x64>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <_Z5einsth+0x6a>
     6be:	00 00       	nop
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	93 e2       	ldi	r25, 0x23	; 35
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <_Z5einsth+0x70>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <_Z5einsth+0x76>
     6ca:	00 00       	nop
		lcd_string(NAME(Stunden));
		while(temp<3)
		{
			if(debounce(&PIND,3))
			{
				temp++;
     6cc:	cf 5f       	subi	r28, 0xFF	; 255
				lcd_clear();
     6ce:	79 dd       	rcall	.-1294   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,6);
     6d0:	66 e0       	ldi	r22, 0x06	; 6
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	dc de       	rcall	.-584    	; 0x48e <_Z3aushh>
				aus(2,0);
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	d9 de       	rcall	.-590    	; 0x48e <_Z3aushh>
				switch (temp)
     6dc:	c1 30       	cpi	r28, 0x01	; 1
     6de:	41 f0       	breq	.+16     	; 0x6f0 <_Z5einsth+0x9c>
     6e0:	18 f0       	brcs	.+6      	; 0x6e8 <_Z5einsth+0x94>
     6e2:	c2 30       	cpi	r28, 0x02	; 2
     6e4:	69 f4       	brne	.+26     	; 0x700 <_Z5einsth+0xac>
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <_Z5einsth+0xa4>
				{
					case 0:
						lcd_string(NAME(Stunden));
     6e8:	8c ea       	ldi	r24, 0xAC	; 172
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	bc dd       	rcall	.-1160   	; 0x266 <_Z10lcd_stringPKc>
     6ee:	0e c0       	rjmp	.+28     	; 0x70c <_Z5einsth+0xb8>
						break;
					case 1:
						lcd_string(NAME(Minuten));
     6f0:	84 eb       	ldi	r24, 0xB4	; 180
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	b8 dd       	rcall	.-1168   	; 0x266 <_Z10lcd_stringPKc>
     6f6:	13 c0       	rjmp	.+38     	; 0x71e <_Z5einsth+0xca>
						break;
					case 2:
						lcd_string(NAME(WochenTag));
     6f8:	8c eb       	ldi	r24, 0xBC	; 188
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	b4 dd       	rcall	.-1176   	; 0x266 <_Z10lcd_stringPKc>
     6fe:	18 c0       	rjmp	.+48     	; 0x730 <_Z5einsth+0xdc>
				zeit();
				//ausgabe(0);
				//Es muss eine richtge Ausgabe speziell fuer dieses Einstellung geschrieben werden
				//besonders wichtig ist, dass die alte Ausgaba ersetzt werden muss
			}*/
			switch (temp)
     700:	c1 30       	cpi	r28, 0x01	; 1
     702:	69 f0       	breq	.+26     	; 0x71e <_Z5einsth+0xca>
     704:	18 f0       	brcs	.+6      	; 0x70c <_Z5einsth+0xb8>
     706:	c2 30       	cpi	r28, 0x02	; 2
     708:	e1 f4       	brne	.+56     	; 0x742 <_Z5einsth+0xee>
     70a:	12 c0       	rjmp	.+36     	; 0x730 <_Z5einsth+0xdc>
			{
			case 0:
				erhoehen(&Stunden,60,6,NAME(Stunden));
     70c:	2c ea       	ldi	r18, 0xAC	; 172
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	46 e0       	ldi	r20, 0x06	; 6
     712:	6c e3       	ldi	r22, 0x3C	; 60
     714:	85 e7       	ldi	r24, 0x75	; 117
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	64 df       	rcall	.-312    	; 0x5e2 <_Z8erhoehenPhhhPKc>
				break;
     71a:	c0 e0       	ldi	r28, 0x00	; 0
     71c:	bb cf       	rjmp	.-138    	; 0x694 <_Z5einsth+0x40>
			case 1:
				erhoehen(&Minuten,60,6,NAME(Minuten));
     71e:	24 eb       	ldi	r18, 0xB4	; 180
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	46 e0       	ldi	r20, 0x06	; 6
     724:	6c e3       	ldi	r22, 0x3C	; 60
     726:	86 e7       	ldi	r24, 0x76	; 118
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	5b df       	rcall	.-330    	; 0x5e2 <_Z8erhoehenPhhhPKc>
				break;
     72c:	c1 e0       	ldi	r28, 0x01	; 1
     72e:	b2 cf       	rjmp	.-156    	; 0x694 <_Z5einsth+0x40>
			case 2:
				//nur jetzt WochenTag
				erhoehen(&WochenTag,7,6,NAME(WochenTag));
     730:	2c eb       	ldi	r18, 0xBC	; 188
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	46 e0       	ldi	r20, 0x06	; 6
     736:	67 e0       	ldi	r22, 0x07	; 7
     738:	84 e7       	ldi	r24, 0x74	; 116
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	52 df       	rcall	.-348    	; 0x5e2 <_Z8erhoehenPhhhPKc>
				break;
     73e:	c2 e0       	ldi	r28, 0x02	; 2
     740:	a9 cf       	rjmp	.-174    	; 0x694 <_Z5einsth+0x40>
		//alles einstellen bis auf Sekunden
		//diese werden auf 0 gesetzt
		aus(1,6);
		aus(2,0);
		lcd_string(NAME(Stunden));
		while(temp<3)
     742:	c3 30       	cpi	r28, 0x03	; 3
     744:	08 f4       	brcc	.+2      	; 0x748 <_Z5einsth+0xf4>
     746:	a6 cf       	rjmp	.-180    	; 0x694 <_Z5einsth+0x40>
				break;
			default:
				break;
			}
		}
		Sekunden=0;
     748:	10 92 77 01 	sts	0x0177, r1
		return 0;
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	33 c1       	rjmp	.+614    	; 0x9b6 <_Z5einsth+0x362>
	case 1:
		//Einstellen der Lampenstärke
		//default=3
		temp = 0;
		
		if(Sekunden!=sektemp){
     750:	90 91 77 01 	lds	r25, 0x0177
     754:	80 91 6e 01 	lds	r24, 0x016E
     758:	98 13       	cpse	r25, r24
			zeit();
     75a:	f7 dd       	rcall	.-1042   	; 0x34a <_Z4zeitv>
		}
		lampenstaerke++;
     75c:	80 91 61 00 	lds	r24, 0x0061
     760:	8f 5f       	subi	r24, 0xFF	; 255
		if (lampenstaerke>3)
     762:	84 30       	cpi	r24, 0x04	; 4
     764:	18 f4       	brcc	.+6      	; 0x76c <_Z5einsth+0x118>
		temp = 0;
		
		if(Sekunden!=sektemp){
			zeit();
		}
		lampenstaerke++;
     766:	80 93 61 00 	sts	0x0061, r24
     76a:	03 c0       	rjmp	.+6      	; 0x772 <_Z5einsth+0x11e>
		if (lampenstaerke>3)
		{
			lampenstaerke=1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 61 00 	sts	0x0061, r24
		}
		lcd_clear();
     772:	27 dd       	rcall	.-1458   	; 0x1c2 <_Z9lcd_clearv>
		lcd_home();
     774:	5d dd       	rcall	.-1350   	; 0x230 <_Z8lcd_homev>
		lcd_string("Lampenstaerke:");
     776:	86 ec       	ldi	r24, 0xC6	; 198
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	75 dd       	rcall	.-1302   	; 0x266 <_Z10lcd_stringPKc>
		aus(2,0);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	86 de       	rcall	.-756    	; 0x48e <_Z3aushh>
		itoa(lampenstaerke,Buffer,10);
     782:	4a e0       	ldi	r20, 0x0A	; 10
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	65 e5       	ldi	r22, 0x55	; 85
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	80 91 61 00 	lds	r24, 0x0061
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	e4 d5       	rcall	.+3016   	; 0x135a <itoa>
		lcd_string(Buffer);
     792:	85 e5       	ldi	r24, 0x55	; 85
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	67 dd       	rcall	.-1330   	; 0x266 <_Z10lcd_stringPKc>
		
		return 0;
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0d c1       	rjmp	.+538    	; 0x9b6 <_Z5einsth+0x362>
		break;
	case 2:
		//Einstellen Sekundenoffset
		//default =0

		if(Sekunden!=sektemp){
     79c:	90 91 77 01 	lds	r25, 0x0177
     7a0:	80 91 6e 01 	lds	r24, 0x016E
     7a4:	98 13       	cpse	r25, r24
			zeit();
     7a6:	d1 dd       	rcall	.-1118   	; 0x34a <_Z4zeitv>
		}
		sekoffset++;
     7a8:	80 91 69 01 	lds	r24, 0x0169
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
		if (sekoffset>5)
     7ae:	86 30       	cpi	r24, 0x06	; 6
     7b0:	1c f4       	brge	.+6      	; 0x7b8 <_Z5einsth+0x164>
		//default =0

		if(Sekunden!=sektemp){
			zeit();
		}
		sekoffset++;
     7b2:	80 93 69 01 	sts	0x0169, r24
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <_Z5einsth+0x16a>
		if (sekoffset>5)
		{
			sekoffset=-5;
     7b8:	8b ef       	ldi	r24, 0xFB	; 251
     7ba:	80 93 69 01 	sts	0x0169, r24
		}
		lcd_clear();
     7be:	01 dd       	rcall	.-1534   	; 0x1c2 <_Z9lcd_clearv>
		lcd_home();
     7c0:	37 dd       	rcall	.-1426   	; 0x230 <_Z8lcd_homev>
		lcd_string("Sekundenoffset:");
     7c2:	85 ed       	ldi	r24, 0xD5	; 213
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	4f dd       	rcall	.-1378   	; 0x266 <_Z10lcd_stringPKc>
		aus(2,0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	60 de       	rcall	.-832    	; 0x48e <_Z3aushh>
		itoa(sekoffset,Buffer,10);
     7ce:	80 91 69 01 	lds	r24, 0x0169
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	65 e5       	ldi	r22, 0x55	; 85
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	99 27       	eor	r25, r25
     7dc:	87 fd       	sbrc	r24, 7
     7de:	90 95       	com	r25
     7e0:	bc d5       	rcall	.+2936   	; 0x135a <itoa>
		lcd_string(Buffer);
     7e2:	85 e5       	ldi	r24, 0x55	; 85
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	3f dd       	rcall	.-1410   	; 0x266 <_Z10lcd_stringPKc>
		
		return 0;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	e5 c0       	rjmp	.+458    	; 0x9b6 <_Z5einsth+0x362>
		break;
	case 3:
		//Einstellen Temperaturoffset
		//default = 0;
		
		if(Sekunden!=sektemp){
     7ec:	90 91 77 01 	lds	r25, 0x0177
     7f0:	80 91 6e 01 	lds	r24, 0x016E
     7f4:	98 13       	cpse	r25, r24
			zeit();
     7f6:	a9 dd       	rcall	.-1198   	; 0x34a <_Z4zeitv>
		}
			tempoffset++;
     7f8:	80 91 62 00 	lds	r24, 0x0062
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
			if (tempoffset>10)
     7fe:	8b 30       	cpi	r24, 0x0B	; 11
     800:	1c f4       	brge	.+6      	; 0x808 <_Z5einsth+0x1b4>
		//default = 0;
		
		if(Sekunden!=sektemp){
			zeit();
		}
			tempoffset++;
     802:	80 93 62 00 	sts	0x0062, r24
     806:	03 c0       	rjmp	.+6      	; 0x80e <_Z5einsth+0x1ba>
			if (tempoffset>10)
			{
				tempoffset=-10;
     808:	86 ef       	ldi	r24, 0xF6	; 246
     80a:	80 93 62 00 	sts	0x0062, r24
			}
			lcd_clear();
     80e:	d9 dc       	rcall	.-1614   	; 0x1c2 <_Z9lcd_clearv>
			lcd_home();
     810:	0f dd       	rcall	.-1506   	; 0x230 <_Z8lcd_homev>
			lcd_string("Temperaturoffset:");
     812:	85 ee       	ldi	r24, 0xE5	; 229
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	27 dd       	rcall	.-1458   	; 0x266 <_Z10lcd_stringPKc>
			aus(2,0);
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	38 de       	rcall	.-912    	; 0x48e <_Z3aushh>
			itoa(tempoffset,Buffer,10);
     81e:	80 91 62 00 	lds	r24, 0x0062
     822:	4a e0       	ldi	r20, 0x0A	; 10
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	65 e5       	ldi	r22, 0x55	; 85
     828:	71 e0       	ldi	r23, 0x01	; 1
     82a:	99 27       	eor	r25, r25
     82c:	87 fd       	sbrc	r24, 7
     82e:	90 95       	com	r25
     830:	94 d5       	rcall	.+2856   	; 0x135a <itoa>
			lcd_string(Buffer);
     832:	85 e5       	ldi	r24, 0x55	; 85
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	17 dd       	rcall	.-1490   	; 0x266 <_Z10lcd_stringPKc>
								
		return 0;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	bd c0       	rjmp	.+378    	; 0x9b6 <_Z5einsth+0x362>
		break;
	case 4: //Wecker einstellen
		temp = 0;
		aus(1,5);
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	26 de       	rcall	.-948    	; 0x48e <_Z3aushh>
		aus(2,0);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	23 de       	rcall	.-954    	; 0x48e <_Z3aushh>
		lcd_string(NAME(WStunden[0]));
     848:	87 ef       	ldi	r24, 0xF7	; 247
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0c dd       	rcall	.-1512   	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(Buffer);
								
		return 0;
		break;
	case 4: //Wecker einstellen
		temp = 0;
     84e:	c0 e0       	ldi	r28, 0x00	; 0
				case 0:
					erhoehen(&WStunden[0],24,5,NAME(WStunden[0]));
					break;
				case 1:
					erhoehen(&WMinuten[0],60,5,NAME(WMinuten[0]));
					break;
     850:	11 e0       	ldi	r17, 0x01	; 1
			}
			switch (temp)
			{
				case 0:
					erhoehen(&WStunden[0],24,5,NAME(WStunden[0]));
					break;
     852:	d0 e0       	ldi	r29, 0x00	; 0
		aus(1,5);
		aus(2,0);
		lcd_string(NAME(WStunden[0]));
		while (temp<2)
		{
			if (Sekunden!=sektemp)
     854:	20 91 77 01 	lds	r18, 0x0177
     858:	90 91 6e 01 	lds	r25, 0x016E
     85c:	29 13       	cpse	r18, r25
			{
				zeit();
     85e:	75 dd       	rcall	.-1302   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     860:	83 99       	sbic	0x10, 3	; 16
     862:	2e c0       	rjmp	.+92     	; 0x8c0 <_Z5einsth+0x26c>
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	93 eb       	ldi	r25, 0xB3	; 179
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <_Z5einsth+0x214>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <_Z5einsth+0x21a>
     86e:	00 00       	nop
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	93 e2       	ldi	r25, 0x23	; 35
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <_Z5einsth+0x220>
     878:	00 c0       	rjmp	.+0      	; 0x87a <_Z5einsth+0x226>
     87a:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     87c:	83 9b       	sbis	0x10, 3	; 16
     87e:	20 c0       	rjmp	.+64     	; 0x8c0 <_Z5einsth+0x26c>
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	93 eb       	ldi	r25, 0xB3	; 179
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <_Z5einsth+0x230>
     888:	00 c0       	rjmp	.+0      	; 0x88a <_Z5einsth+0x236>
     88a:	00 00       	nop
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	93 e2       	ldi	r25, 0x23	; 35
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <_Z5einsth+0x23c>
     894:	00 c0       	rjmp	.+0      	; 0x896 <_Z5einsth+0x242>
     896:	00 00       	nop
			}
			if(debounce(&PIND,3))
			{
				temp++;
     898:	cf 5f       	subi	r28, 0xFF	; 255
				aus(1,5);
     89a:	65 e0       	ldi	r22, 0x05	; 5
     89c:	81 2f       	mov	r24, r17
     89e:	f7 dd       	rcall	.-1042   	; 0x48e <_Z3aushh>
				aus(2,0);
     8a0:	6d 2f       	mov	r22, r29
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	f4 dd       	rcall	.-1048   	; 0x48e <_Z3aushh>
				switch (temp)
     8a6:	cc 23       	and	r28, r28
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <_Z5einsth+0x25c>
     8aa:	c1 30       	cpi	r28, 0x01	; 1
     8ac:	49 f4       	brne	.+18     	; 0x8c0 <_Z5einsth+0x26c>
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <_Z5einsth+0x264>
				{
					case 0:
						lcd_string(NAME(WStunden[0]));
     8b0:	87 ef       	ldi	r24, 0xF7	; 247
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	d8 dc       	rcall	.-1616   	; 0x266 <_Z10lcd_stringPKc>
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <_Z5einsth+0x276>
						break;
					case 1:
						lcd_string(NAME(WMinuten[0]));
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	d4 dc       	rcall	.-1624   	; 0x266 <_Z10lcd_stringPKc>
     8be:	0e c0       	rjmp	.+28     	; 0x8dc <_Z5einsth+0x288>
						break;
					default:
						break;
				}
			}
			switch (temp)
     8c0:	cc 23       	and	r28, r28
     8c2:	19 f0       	breq	.+6      	; 0x8ca <_Z5einsth+0x276>
     8c4:	c1 30       	cpi	r28, 0x01	; 1
     8c6:	99 f4       	brne	.+38     	; 0x8ee <_Z5einsth+0x29a>
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <_Z5einsth+0x288>
			{
				case 0:
					erhoehen(&WStunden[0],24,5,NAME(WStunden[0]));
     8ca:	27 ef       	ldi	r18, 0xF7	; 247
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	45 e0       	ldi	r20, 0x05	; 5
     8d0:	68 e1       	ldi	r22, 0x18	; 24
     8d2:	82 e7       	ldi	r24, 0x72	; 114
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	85 de       	rcall	.-758    	; 0x5e2 <_Z8erhoehenPhhhPKc>
					break;
     8d8:	cd 2f       	mov	r28, r29
     8da:	bc cf       	rjmp	.-136    	; 0x854 <_Z5einsth+0x200>
				case 1:
					erhoehen(&WMinuten[0],60,5,NAME(WMinuten[0]));
     8dc:	23 e0       	ldi	r18, 0x03	; 3
     8de:	31 e0       	ldi	r19, 0x01	; 1
     8e0:	45 e0       	ldi	r20, 0x05	; 5
     8e2:	6c e3       	ldi	r22, 0x3C	; 60
     8e4:	80 e7       	ldi	r24, 0x70	; 112
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	7c de       	rcall	.-776    	; 0x5e2 <_Z8erhoehenPhhhPKc>
					break;
     8ea:	c1 2f       	mov	r28, r17
     8ec:	b3 cf       	rjmp	.-154    	; 0x854 <_Z5einsth+0x200>
	case 4: //Wecker einstellen
		temp = 0;
		aus(1,5);
		aus(2,0);
		lcd_string(NAME(WStunden[0]));
		while (temp<2)
     8ee:	c2 30       	cpi	r28, 0x02	; 2
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <_Z5einsth+0x2a0>
     8f2:	b0 cf       	rjmp	.-160    	; 0x854 <_Z5einsth+0x200>
					erhoehen(&WMinuten[0],60,5,NAME(WMinuten[0]));
					break;
			}
			
		}
		return 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	5f c0       	rjmp	.+190    	; 0x9b6 <_Z5einsth+0x362>
		break;

	case 5:
		temp = 0;
		aus(1,7);
     8f8:	67 e0       	ldi	r22, 0x07	; 7
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	c8 dd       	rcall	.-1136   	; 0x48e <_Z3aushh>
		aus(2,0);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	c5 dd       	rcall	.-1142   	; 0x48e <_Z3aushh>
		lcd_string(NAME(WStunden[1]));
     904:	8f e0       	ldi	r24, 0x0F	; 15
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	ae dc       	rcall	.-1700   	; 0x266 <_Z10lcd_stringPKc>
		}
		return 0;
		break;

	case 5:
		temp = 0;
     90a:	c0 e0       	ldi	r28, 0x00	; 0
				case 0:
				erhoehen(&WStunden[1],24,7,NAME(WStunden[1]));
				break;
				case 1:
				erhoehen(&WMinuten[1],60,7,NAME(WMinuten[1]));
				break;
     90c:	11 e0       	ldi	r17, 0x01	; 1
			}
			switch (temp)
			{
				case 0:
				erhoehen(&WStunden[1],24,7,NAME(WStunden[1]));
				break;
     90e:	d0 e0       	ldi	r29, 0x00	; 0
		aus(1,7);
		aus(2,0);
		lcd_string(NAME(WStunden[1]));
		while (temp<2)
		{
			if (Sekunden!=sektemp)
     910:	20 91 77 01 	lds	r18, 0x0177
     914:	90 91 6e 01 	lds	r25, 0x016E
     918:	29 13       	cpse	r18, r25
			{
				zeit();
     91a:	17 dd       	rcall	.-1490   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     91c:	83 99       	sbic	0x10, 3	; 16
     91e:	2e c0       	rjmp	.+92     	; 0x97c <_Z5einsth+0x328>
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	93 eb       	ldi	r25, 0xB3	; 179
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <_Z5einsth+0x2d0>
     928:	00 c0       	rjmp	.+0      	; 0x92a <_Z5einsth+0x2d6>
     92a:	00 00       	nop
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	93 e2       	ldi	r25, 0x23	; 35
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <_Z5einsth+0x2dc>
     934:	00 c0       	rjmp	.+0      	; 0x936 <_Z5einsth+0x2e2>
     936:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     938:	83 9b       	sbis	0x10, 3	; 16
     93a:	20 c0       	rjmp	.+64     	; 0x97c <_Z5einsth+0x328>
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	93 eb       	ldi	r25, 0xB3	; 179
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <_Z5einsth+0x2ec>
     944:	00 c0       	rjmp	.+0      	; 0x946 <_Z5einsth+0x2f2>
     946:	00 00       	nop
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	93 e2       	ldi	r25, 0x23	; 35
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <_Z5einsth+0x2f8>
     950:	00 c0       	rjmp	.+0      	; 0x952 <_Z5einsth+0x2fe>
     952:	00 00       	nop
			}
			if(debounce(&PIND,3))
			{
				temp++;
     954:	cf 5f       	subi	r28, 0xFF	; 255
				aus(1,7);
     956:	67 e0       	ldi	r22, 0x07	; 7
     958:	81 2f       	mov	r24, r17
     95a:	99 dd       	rcall	.-1230   	; 0x48e <_Z3aushh>
				aus(2,0);
     95c:	6d 2f       	mov	r22, r29
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	96 dd       	rcall	.-1236   	; 0x48e <_Z3aushh>
				switch (temp)
     962:	cc 23       	and	r28, r28
     964:	19 f0       	breq	.+6      	; 0x96c <_Z5einsth+0x318>
     966:	c1 30       	cpi	r28, 0x01	; 1
     968:	49 f4       	brne	.+18     	; 0x97c <_Z5einsth+0x328>
     96a:	04 c0       	rjmp	.+8      	; 0x974 <_Z5einsth+0x320>
				{
					case 0:
					lcd_string(NAME(WStunden[1]));
     96c:	8f e0       	ldi	r24, 0x0F	; 15
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	7a dc       	rcall	.-1804   	; 0x266 <_Z10lcd_stringPKc>
     972:	09 c0       	rjmp	.+18     	; 0x986 <_Z5einsth+0x332>
					break;
					case 1:
					lcd_string(NAME(WMinuten[1]));
     974:	8b e1       	ldi	r24, 0x1B	; 27
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	76 dc       	rcall	.-1812   	; 0x266 <_Z10lcd_stringPKc>
     97a:	0e c0       	rjmp	.+28     	; 0x998 <_Z5einsth+0x344>
					break;
					default:
					break;
				}
			}
			switch (temp)
     97c:	cc 23       	and	r28, r28
     97e:	19 f0       	breq	.+6      	; 0x986 <_Z5einsth+0x332>
     980:	c1 30       	cpi	r28, 0x01	; 1
     982:	99 f4       	brne	.+38     	; 0x9aa <_Z5einsth+0x356>
     984:	09 c0       	rjmp	.+18     	; 0x998 <_Z5einsth+0x344>
			{
				case 0:
				erhoehen(&WStunden[1],24,7,NAME(WStunden[1]));
     986:	2f e0       	ldi	r18, 0x0F	; 15
     988:	31 e0       	ldi	r19, 0x01	; 1
     98a:	47 e0       	ldi	r20, 0x07	; 7
     98c:	68 e1       	ldi	r22, 0x18	; 24
     98e:	83 e7       	ldi	r24, 0x73	; 115
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	27 de       	rcall	.-946    	; 0x5e2 <_Z8erhoehenPhhhPKc>
				break;
     994:	cd 2f       	mov	r28, r29
     996:	bc cf       	rjmp	.-136    	; 0x910 <_Z5einsth+0x2bc>
				case 1:
				erhoehen(&WMinuten[1],60,7,NAME(WMinuten[1]));
     998:	2b e1       	ldi	r18, 0x1B	; 27
     99a:	31 e0       	ldi	r19, 0x01	; 1
     99c:	47 e0       	ldi	r20, 0x07	; 7
     99e:	6c e3       	ldi	r22, 0x3C	; 60
     9a0:	81 e7       	ldi	r24, 0x71	; 113
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	1e de       	rcall	.-964    	; 0x5e2 <_Z8erhoehenPhhhPKc>
				break;
     9a6:	c1 2f       	mov	r28, r17
     9a8:	b3 cf       	rjmp	.-154    	; 0x910 <_Z5einsth+0x2bc>
	case 5:
		temp = 0;
		aus(1,7);
		aus(2,0);
		lcd_string(NAME(WStunden[1]));
		while (temp<2)
     9aa:	c2 30       	cpi	r28, 0x02	; 2
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <_Z5einsth+0x35c>
     9ae:	b0 cf       	rjmp	.-160    	; 0x910 <_Z5einsth+0x2bc>
				erhoehen(&WMinuten[1],60,7,NAME(WMinuten[1]));
				break;
			}
			
		}
		return 0;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <_Z5einsth+0x362>
		break;

	default:
		return 1;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	08 95       	ret

000009be <_Z10zeitsetzenv>:

#ifndef EINSTELLUNGEN_H_
#define EINSTELLUNGEN_H_

void zeitsetzen(){
	Minuten = 34;
     9be:	82 e2       	ldi	r24, 0x22	; 34
     9c0:	80 93 76 01 	sts	0x0176, r24
	Stunden	= 5;
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	80 93 75 01 	sts	0x0175, r24
	Sekunden = 0;
     9ca:	10 92 77 01 	sts	0x0177, r1
	WochenTag=6;
     9ce:	96 e0       	ldi	r25, 0x06	; 6
     9d0:	90 93 74 01 	sts	0x0174, r25
	WStunden[0]=5;
     9d4:	80 93 72 01 	sts	0x0172, r24
	WMinuten[0]=35;
     9d8:	83 e2       	ldi	r24, 0x23	; 35
     9da:	80 93 70 01 	sts	0x0170, r24
	WStunden[1]=7;
     9de:	97 e0       	ldi	r25, 0x07	; 7
     9e0:	90 93 73 01 	sts	0x0173, r25
	WMinuten[1]=35;
     9e4:	80 93 71 01 	sts	0x0171, r24
	einst(4);
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	34 de       	rcall	.-920    	; 0x654 <_Z5einsth>
	einst(0);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	32 de       	rcall	.-924    	; 0x654 <_Z5einsth>
	sekoffset=1;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 69 01 	sts	0x0169, r24
     9f6:	08 95       	ret

000009f8 <_Z4menuv>:


#ifndef MENUE_H_
#define MENUE_H_

uint8_t menu(){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	uint8_t posit = 0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
						temperatur();
						return 1;
					}
				}
				temperatur();
				posit++;
     9fe:	d6 e0       	ldi	r29, 0x06	; 6
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     a00:	c7 e0       	ldi	r28, 0x07	; 7

uint8_t menu(){
	uint8_t posit = 0;
	while (true)
	{
		switch (posit)
     a02:	83 30       	cpi	r24, 0x03	; 3
     a04:	09 f4       	brne	.+2      	; 0xa08 <_Z4menuv+0x10>
     a06:	4c c1       	rjmp	.+664    	; 0xca0 <_Z4menuv+0x2a8>
     a08:	30 f4       	brcc	.+12     	; 0xa16 <_Z4menuv+0x1e>
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	09 f4       	brne	.+2      	; 0xa10 <_Z4menuv+0x18>
     a0e:	73 c0       	rjmp	.+230    	; 0xaf6 <_Z4menuv+0xfe>
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	49 f4       	brne	.+18     	; 0xa26 <_Z4menuv+0x2e>
     a14:	d8 c0       	rjmp	.+432    	; 0xbc6 <_Z4menuv+0x1ce>
     a16:	85 30       	cpi	r24, 0x05	; 5
     a18:	09 f4       	brne	.+2      	; 0xa1c <_Z4menuv+0x24>
     a1a:	1a c2       	rjmp	.+1076   	; 0xe50 <_Z4menuv+0x458>
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <_Z4menuv+0x28>
     a1e:	a8 c1       	rjmp	.+848    	; 0xd70 <_Z4menuv+0x378>
     a20:	86 30       	cpi	r24, 0x06	; 6
     a22:	09 f4       	brne	.+2      	; 0xa26 <_Z4menuv+0x2e>
     a24:	87 c2       	rjmp	.+1294   	; 0xf34 <_Z4menuv+0x53c>
		{
			case 0:
				//Weckzeit anzeigen und einstellen mit PD2
				lcd_clear();
     a26:	cd db       	rcall	.-2150   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,5);
     a28:	65 e0       	ldi	r22, 0x05	; 5
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	30 dd       	rcall	.-1440   	; 0x48e <_Z3aushh>
				aus(2,0);
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	2d dd       	rcall	.-1446   	; 0x48e <_Z3aushh>
				lcd_string("Werktags");
     a34:	87 e2       	ldi	r24, 0x27	; 39
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	16 dc       	rcall	.-2004   	; 0x266 <_Z10lcd_stringPKc>
				posit = posit + 1;
				while(!debounce(&PIND,PD3))
     a3a:	3f c0       	rjmp	.+126    	; 0xaba <_Z4menuv+0xc2>
				{
					//Zeitabfrage mit einbauen
					if(Sekunden!=sektemp){
						zeit();
     a3c:	86 dc       	rcall	.-1780   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     a3e:	82 99       	sbic	0x10, 2	; 16
     a40:	1f c0       	rjmp	.+62     	; 0xa80 <_Z4menuv+0x88>
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	93 eb       	ldi	r25, 0xB3	; 179
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <_Z4menuv+0x4e>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <_Z4menuv+0x54>
     a4c:	00 00       	nop
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	93 e2       	ldi	r25, 0x23	; 35
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <_Z4menuv+0x5a>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <_Z4menuv+0x60>
     a58:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     a5a:	82 9b       	sbis	0x10, 2	; 16
     a5c:	11 c0       	rjmp	.+34     	; 0xa80 <_Z4menuv+0x88>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	93 eb       	ldi	r25, 0xB3	; 179
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <_Z4menuv+0x6a>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <_Z4menuv+0x70>
     a68:	00 00       	nop
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	93 e2       	ldi	r25, 0x23	; 35
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <_Z4menuv+0x76>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <_Z4menuv+0x7c>
     a74:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(4);
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	ed dd       	rcall	.-1062   	; 0x654 <_Z5einsth>
						lcd_string("Werktags");
     a7a:	87 e2       	ldi	r24, 0x27	; 39
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	f3 db       	rcall	.-2074   	; 0x266 <_Z10lcd_stringPKc>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     a80:	84 99       	sbic	0x10, 4	; 16
     a82:	1b c0       	rjmp	.+54     	; 0xaba <_Z4menuv+0xc2>
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	93 eb       	ldi	r25, 0xB3	; 179
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <_Z4menuv+0x90>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <_Z4menuv+0x96>
     a8e:	00 00       	nop
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	93 e2       	ldi	r25, 0x23	; 35
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <_Z4menuv+0x9c>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <_Z4menuv+0xa2>
     a9a:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     a9c:	84 9b       	sbis	0x10, 4	; 16
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <_Z4menuv+0xc2>
     aa0:	8f ef       	ldi	r24, 0xFF	; 255
     aa2:	93 eb       	ldi	r25, 0xB3	; 179
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <_Z4menuv+0xac>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <_Z4menuv+0xb2>
     aaa:	00 00       	nop
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	93 e2       	ldi	r25, 0x23	; 35
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <_Z4menuv+0xb8>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <_Z4menuv+0xbe>
     ab6:	00 00       	nop
     ab8:	da c2       	rjmp	.+1460   	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     aba:	83 99       	sbic	0x10, 3	; 16
     abc:	a4 c2       	rjmp	.+1352   	; 0x1006 <_Z4menuv+0x60e>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	93 eb       	ldi	r25, 0xB3	; 179
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <_Z4menuv+0xca>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <_Z4menuv+0xd0>
     ac8:	00 00       	nop
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	93 e2       	ldi	r25, 0x23	; 35
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <_Z4menuv+0xd6>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <_Z4menuv+0xdc>
     ad4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     ad6:	83 9b       	sbis	0x10, 3	; 16
     ad8:	96 c2       	rjmp	.+1324   	; 0x1006 <_Z4menuv+0x60e>
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	93 eb       	ldi	r25, 0xB3	; 179
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <_Z4menuv+0xe6>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <_Z4menuv+0xec>
     ae4:	00 00       	nop
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	93 e2       	ldi	r25, 0x23	; 35
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <_Z4menuv+0xf2>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <_Z4menuv+0xf8>
     af0:	00 00       	nop
				//Weckzeit anzeigen und einstellen mit PD2
				lcd_clear();
				aus(1,5);
				aus(2,0);
				lcd_string("Werktags");
				posit = posit + 1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	86 cf       	rjmp	.-244    	; 0xa02 <_Z4menuv+0xa>
				}
				break;
			
			case 1:
			//Weckzeit anzeige und einstellungen am Wochenende
				lcd_clear();
     af6:	65 db       	rcall	.-2358   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,7);
     af8:	6c 2f       	mov	r22, r28
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	c8 dc       	rcall	.-1648   	; 0x48e <_Z3aushh>
				aus(2,0);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	c5 dc       	rcall	.-1654   	; 0x48e <_Z3aushh>
				lcd_string("Wohenende");
     b04:	80 e3       	ldi	r24, 0x30	; 48
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	ae db       	rcall	.-2212   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     b0a:	3f c0       	rjmp	.+126    	; 0xb8a <_Z4menuv+0x192>
				{
					if(Sekunden!=sektemp){
						zeit();
     b0c:	1e dc       	rcall	.-1988   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     b0e:	82 99       	sbic	0x10, 2	; 16
     b10:	1f c0       	rjmp	.+62     	; 0xb50 <_Z4menuv+0x158>
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	93 eb       	ldi	r25, 0xB3	; 179
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <_Z4menuv+0x11e>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <_Z4menuv+0x124>
     b1c:	00 00       	nop
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	93 e2       	ldi	r25, 0x23	; 35
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <_Z4menuv+0x12a>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <_Z4menuv+0x130>
     b28:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     b2a:	82 9b       	sbis	0x10, 2	; 16
     b2c:	11 c0       	rjmp	.+34     	; 0xb50 <_Z4menuv+0x158>
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	93 eb       	ldi	r25, 0xB3	; 179
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <_Z4menuv+0x13a>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <_Z4menuv+0x140>
     b38:	00 00       	nop
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	93 e2       	ldi	r25, 0x23	; 35
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <_Z4menuv+0x146>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <_Z4menuv+0x14c>
     b44:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(5);
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	85 dd       	rcall	.-1270   	; 0x654 <_Z5einsth>
						lcd_string("Wohenende");
     b4a:	80 e3       	ldi	r24, 0x30	; 48
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	8b db       	rcall	.-2282   	; 0x266 <_Z10lcd_stringPKc>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     b50:	84 99       	sbic	0x10, 4	; 16
     b52:	1b c0       	rjmp	.+54     	; 0xb8a <_Z4menuv+0x192>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	93 eb       	ldi	r25, 0xB3	; 179
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <_Z4menuv+0x160>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <_Z4menuv+0x166>
     b5e:	00 00       	nop
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	93 e2       	ldi	r25, 0x23	; 35
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <_Z4menuv+0x16c>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <_Z4menuv+0x172>
     b6a:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     b6c:	84 9b       	sbis	0x10, 4	; 16
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <_Z4menuv+0x192>
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	93 eb       	ldi	r25, 0xB3	; 179
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <_Z4menuv+0x17c>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <_Z4menuv+0x182>
     b7a:	00 00       	nop
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	93 e2       	ldi	r25, 0x23	; 35
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <_Z4menuv+0x188>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <_Z4menuv+0x18e>
     b86:	00 00       	nop
     b88:	72 c2       	rjmp	.+1252   	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     b8a:	83 99       	sbic	0x10, 3	; 16
     b8c:	43 c2       	rjmp	.+1158   	; 0x1014 <_Z4menuv+0x61c>
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	93 eb       	ldi	r25, 0xB3	; 179
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <_Z4menuv+0x19a>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <_Z4menuv+0x1a0>
     b98:	00 00       	nop
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	93 e2       	ldi	r25, 0x23	; 35
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <_Z4menuv+0x1a6>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <_Z4menuv+0x1ac>
     ba4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     ba6:	83 9b       	sbis	0x10, 3	; 16
     ba8:	35 c2       	rjmp	.+1130   	; 0x1014 <_Z4menuv+0x61c>
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	93 eb       	ldi	r25, 0xB3	; 179
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <_Z4menuv+0x1b6>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <_Z4menuv+0x1bc>
     bb4:	00 00       	nop
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	93 e2       	ldi	r25, 0x23	; 35
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <_Z4menuv+0x1c2>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <_Z4menuv+0x1c8>
     bc0:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     bc2:	82 e0       	ldi	r24, 0x02	; 2
				break;
     bc4:	1e cf       	rjmp	.-452    	; 0xa02 <_Z4menuv+0xa>
			
			case 2:
				//Lampe einstellen
				lcd_clear();
     bc6:	fd da       	rcall	.-2566   	; 0x1c2 <_Z9lcd_clearv>
				lcd_string("Lampenstaerke:");
     bc8:	86 ec       	ldi	r24, 0xC6	; 198
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	4c db       	rcall	.-2408   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	5d dc       	rcall	.-1862   	; 0x48e <_Z3aushh>
				itoa(lampenstaerke,Buffer,10);
     bd4:	4a e0       	ldi	r20, 0x0A	; 10
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	65 e5       	ldi	r22, 0x55	; 85
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	80 91 61 00 	lds	r24, 0x0061
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	bb d3       	rcall	.+1910   	; 0x135a <itoa>
				lcd_string(Buffer);
     be4:	85 e5       	ldi	r24, 0x55	; 85
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	3e db       	rcall	.-2436   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     bea:	3c c0       	rjmp	.+120    	; 0xc64 <_Z4menuv+0x26c>
				{
					if(Sekunden!=sektemp){
						zeit();
     bec:	ae db       	rcall	.-2212   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     bee:	82 99       	sbic	0x10, 2	; 16
     bf0:	1c c0       	rjmp	.+56     	; 0xc2a <_Z4menuv+0x232>
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	93 eb       	ldi	r25, 0xB3	; 179
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <_Z4menuv+0x1fe>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <_Z4menuv+0x204>
     bfc:	00 00       	nop
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	93 e2       	ldi	r25, 0x23	; 35
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <_Z4menuv+0x20a>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <_Z4menuv+0x210>
     c08:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     c0a:	82 9b       	sbis	0x10, 2	; 16
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <_Z4menuv+0x232>
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	93 eb       	ldi	r25, 0xB3	; 179
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <_Z4menuv+0x21a>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <_Z4menuv+0x220>
     c18:	00 00       	nop
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	93 e2       	ldi	r25, 0x23	; 35
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <_Z4menuv+0x226>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <_Z4menuv+0x22c>
     c24:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(1);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	15 dd       	rcall	.-1494   	; 0x654 <_Z5einsth>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     c2a:	84 99       	sbic	0x10, 4	; 16
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <_Z4menuv+0x26c>
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	93 eb       	ldi	r25, 0xB3	; 179
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <_Z4menuv+0x23a>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <_Z4menuv+0x240>
     c38:	00 00       	nop
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	93 e2       	ldi	r25, 0x23	; 35
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <_Z4menuv+0x246>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <_Z4menuv+0x24c>
     c44:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     c46:	84 9b       	sbis	0x10, 4	; 16
     c48:	0d c0       	rjmp	.+26     	; 0xc64 <_Z4menuv+0x26c>
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	93 eb       	ldi	r25, 0xB3	; 179
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <_Z4menuv+0x256>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <_Z4menuv+0x25c>
     c54:	00 00       	nop
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	93 e2       	ldi	r25, 0x23	; 35
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <_Z4menuv+0x262>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <_Z4menuv+0x268>
     c60:	00 00       	nop
     c62:	05 c2       	rjmp	.+1034   	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     c64:	83 99       	sbic	0x10, 3	; 16
     c66:	dd c1       	rjmp	.+954    	; 0x1022 <_Z4menuv+0x62a>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	93 eb       	ldi	r25, 0xB3	; 179
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <_Z4menuv+0x274>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <_Z4menuv+0x27a>
     c72:	00 00       	nop
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	93 e2       	ldi	r25, 0x23	; 35
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <_Z4menuv+0x280>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <_Z4menuv+0x286>
     c7e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     c80:	83 9b       	sbis	0x10, 3	; 16
     c82:	cf c1       	rjmp	.+926    	; 0x1022 <_Z4menuv+0x62a>
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	93 eb       	ldi	r25, 0xB3	; 179
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <_Z4menuv+0x290>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <_Z4menuv+0x296>
     c8e:	00 00       	nop
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	93 e2       	ldi	r25, 0x23	; 35
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <_Z4menuv+0x29c>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <_Z4menuv+0x2a2>
     c9a:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     c9c:	83 e0       	ldi	r24, 0x03	; 3
				break;
     c9e:	b1 ce       	rjmp	.-670    	; 0xa02 <_Z4menuv+0xa>
			
			case 3:
				//Zeit einstellen ohnen Sekunden
				lcd_clear();
     ca0:	90 da       	rcall	.-2784   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,3);
     ca2:	63 e0       	ldi	r22, 0x03	; 3
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	f3 db       	rcall	.-2074   	; 0x48e <_Z3aushh>
				aus(2,0);
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	f0 db       	rcall	.-2080   	; 0x48e <_Z3aushh>
				lcd_string("Zeit");
     cae:	8a e3       	ldi	r24, 0x3A	; 58
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	d9 da       	rcall	.-2638   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     cb4:	3f c0       	rjmp	.+126    	; 0xd34 <_Z4menuv+0x33c>
				{
					if(Sekunden!=sektemp){
						zeit();
     cb6:	49 db       	rcall	.-2414   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     cb8:	82 99       	sbic	0x10, 2	; 16
     cba:	1f c0       	rjmp	.+62     	; 0xcfa <_Z4menuv+0x302>
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	93 eb       	ldi	r25, 0xB3	; 179
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <_Z4menuv+0x2c8>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <_Z4menuv+0x2ce>
     cc6:	00 00       	nop
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	93 e2       	ldi	r25, 0x23	; 35
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <_Z4menuv+0x2d4>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <_Z4menuv+0x2da>
     cd2:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     cd4:	82 9b       	sbis	0x10, 2	; 16
     cd6:	11 c0       	rjmp	.+34     	; 0xcfa <_Z4menuv+0x302>
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	93 eb       	ldi	r25, 0xB3	; 179
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <_Z4menuv+0x2e4>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <_Z4menuv+0x2ea>
     ce2:	00 00       	nop
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	93 e2       	ldi	r25, 0x23	; 35
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <_Z4menuv+0x2f0>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <_Z4menuv+0x2f6>
     cee:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(0);
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	b0 dc       	rcall	.-1696   	; 0x654 <_Z5einsth>
						lcd_string("Zeit");
     cf4:	8a e3       	ldi	r24, 0x3A	; 58
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	b6 da       	rcall	.-2708   	; 0x266 <_Z10lcd_stringPKc>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     cfa:	84 99       	sbic	0x10, 4	; 16
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <_Z4menuv+0x33c>
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	93 eb       	ldi	r25, 0xB3	; 179
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <_Z4menuv+0x30a>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <_Z4menuv+0x310>
     d08:	00 00       	nop
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	93 e2       	ldi	r25, 0x23	; 35
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <_Z4menuv+0x316>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <_Z4menuv+0x31c>
     d14:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     d16:	84 9b       	sbis	0x10, 4	; 16
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <_Z4menuv+0x33c>
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	93 eb       	ldi	r25, 0xB3	; 179
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <_Z4menuv+0x326>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <_Z4menuv+0x32c>
     d24:	00 00       	nop
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	93 e2       	ldi	r25, 0x23	; 35
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <_Z4menuv+0x332>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <_Z4menuv+0x338>
     d30:	00 00       	nop
     d32:	9d c1       	rjmp	.+826    	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     d34:	83 99       	sbic	0x10, 3	; 16
     d36:	7c c1       	rjmp	.+760    	; 0x1030 <_Z4menuv+0x638>
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	93 eb       	ldi	r25, 0xB3	; 179
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <_Z4menuv+0x344>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <_Z4menuv+0x34a>
     d42:	00 00       	nop
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	93 e2       	ldi	r25, 0x23	; 35
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <_Z4menuv+0x350>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <_Z4menuv+0x356>
     d4e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     d50:	83 9b       	sbis	0x10, 3	; 16
     d52:	6e c1       	rjmp	.+732    	; 0x1030 <_Z4menuv+0x638>
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	93 eb       	ldi	r25, 0xB3	; 179
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <_Z4menuv+0x360>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <_Z4menuv+0x366>
     d5e:	00 00       	nop
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	93 e2       	ldi	r25, 0x23	; 35
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <_Z4menuv+0x36c>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <_Z4menuv+0x372>
     d6a:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     d6c:	84 e0       	ldi	r24, 0x04	; 4
				break;
     d6e:	49 ce       	rjmp	.-878    	; 0xa02 <_Z4menuv+0xa>
				
			case 4:
				//Sekundenoffset einstellen
				lcd_clear();
     d70:	28 da       	rcall	.-2992   	; 0x1c2 <_Z9lcd_clearv>
				lcd_home();
     d72:	5e da       	rcall	.-2884   	; 0x230 <_Z8lcd_homev>
				lcd_string("Sekundenoffset:");
     d74:	85 ed       	ldi	r24, 0xD5	; 213
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	76 da       	rcall	.-2836   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	87 db       	rcall	.-2290   	; 0x48e <_Z3aushh>
				itoa(sekoffset,Buffer,10);
     d80:	80 91 69 01 	lds	r24, 0x0169
     d84:	4a e0       	ldi	r20, 0x0A	; 10
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	65 e5       	ldi	r22, 0x55	; 85
     d8a:	71 e0       	ldi	r23, 0x01	; 1
     d8c:	99 27       	eor	r25, r25
     d8e:	87 fd       	sbrc	r24, 7
     d90:	90 95       	com	r25
     d92:	e3 d2       	rcall	.+1478   	; 0x135a <itoa>
				lcd_string(Buffer);
     d94:	85 e5       	ldi	r24, 0x55	; 85
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	66 da       	rcall	.-2868   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     d9a:	3c c0       	rjmp	.+120    	; 0xe14 <_Z4menuv+0x41c>
				{
					if(Sekunden!=sektemp){
						zeit();
     d9c:	d6 da       	rcall	.-2644   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     d9e:	82 99       	sbic	0x10, 2	; 16
     da0:	1c c0       	rjmp	.+56     	; 0xdda <_Z4menuv+0x3e2>
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	93 eb       	ldi	r25, 0xB3	; 179
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <_Z4menuv+0x3ae>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <_Z4menuv+0x3b4>
     dac:	00 00       	nop
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	93 e2       	ldi	r25, 0x23	; 35
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <_Z4menuv+0x3ba>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <_Z4menuv+0x3c0>
     db8:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     dba:	82 9b       	sbis	0x10, 2	; 16
     dbc:	0e c0       	rjmp	.+28     	; 0xdda <_Z4menuv+0x3e2>
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	93 eb       	ldi	r25, 0xB3	; 179
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <_Z4menuv+0x3ca>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <_Z4menuv+0x3d0>
     dc8:	00 00       	nop
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	93 e2       	ldi	r25, 0x23	; 35
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <_Z4menuv+0x3d6>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <_Z4menuv+0x3dc>
     dd4:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(2);
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	3d dc       	rcall	.-1926   	; 0x654 <_Z5einsth>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     dda:	84 99       	sbic	0x10, 4	; 16
     ddc:	1b c0       	rjmp	.+54     	; 0xe14 <_Z4menuv+0x41c>
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	93 eb       	ldi	r25, 0xB3	; 179
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <_Z4menuv+0x3ea>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <_Z4menuv+0x3f0>
     de8:	00 00       	nop
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	93 e2       	ldi	r25, 0x23	; 35
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <_Z4menuv+0x3f6>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <_Z4menuv+0x3fc>
     df4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     df6:	84 9b       	sbis	0x10, 4	; 16
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <_Z4menuv+0x41c>
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	93 eb       	ldi	r25, 0xB3	; 179
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <_Z4menuv+0x406>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <_Z4menuv+0x40c>
     e04:	00 00       	nop
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	93 e2       	ldi	r25, 0x23	; 35
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <_Z4menuv+0x412>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <_Z4menuv+0x418>
     e10:	00 00       	nop
     e12:	2d c1       	rjmp	.+602    	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     e14:	83 99       	sbic	0x10, 3	; 16
     e16:	13 c1       	rjmp	.+550    	; 0x103e <_Z4menuv+0x646>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	93 eb       	ldi	r25, 0xB3	; 179
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <_Z4menuv+0x424>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <_Z4menuv+0x42a>
     e22:	00 00       	nop
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	93 e2       	ldi	r25, 0x23	; 35
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <_Z4menuv+0x430>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <_Z4menuv+0x436>
     e2e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     e30:	83 9b       	sbis	0x10, 3	; 16
     e32:	05 c1       	rjmp	.+522    	; 0x103e <_Z4menuv+0x646>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	93 eb       	ldi	r25, 0xB3	; 179
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <_Z4menuv+0x440>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <_Z4menuv+0x446>
     e3e:	00 00       	nop
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	93 e2       	ldi	r25, 0x23	; 35
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <_Z4menuv+0x44c>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <_Z4menuv+0x452>
     e4a:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     e4c:	85 e0       	ldi	r24, 0x05	; 5
				break;
     e4e:	d9 cd       	rjmp	.-1102   	; 0xa02 <_Z4menuv+0xa>
				
			case 5:
				//Temperaturoffset einstellen
				lcd_clear();
     e50:	b8 d9       	rcall	.-3216   	; 0x1c2 <_Z9lcd_clearv>
				lcd_home();
     e52:	ee d9       	rcall	.-3108   	; 0x230 <_Z8lcd_homev>
				lcd_string("Temperaturoffset:");
     e54:	85 ee       	ldi	r24, 0xE5	; 229
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	06 da       	rcall	.-3060   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	17 db       	rcall	.-2514   	; 0x48e <_Z3aushh>
				itoa(tempoffset,Buffer,10);
     e60:	80 91 62 00 	lds	r24, 0x0062
     e64:	4a e0       	ldi	r20, 0x0A	; 10
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	65 e5       	ldi	r22, 0x55	; 85
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	99 27       	eor	r25, r25
     e6e:	87 fd       	sbrc	r24, 7
     e70:	90 95       	com	r25
     e72:	73 d2       	rcall	.+1254   	; 0x135a <itoa>
				lcd_string(Buffer);
     e74:	85 e5       	ldi	r24, 0x55	; 85
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	f6 d9       	rcall	.-3092   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     e7a:	3d c0       	rjmp	.+122    	; 0xef6 <_Z4menuv+0x4fe>
				{
					if(Sekunden!=sektemp){
						zeit();
     e7c:	66 da       	rcall	.-2868   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     e7e:	82 99       	sbic	0x10, 2	; 16
     e80:	1c c0       	rjmp	.+56     	; 0xeba <_Z4menuv+0x4c2>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	93 eb       	ldi	r25, 0xB3	; 179
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <_Z4menuv+0x48e>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <_Z4menuv+0x494>
     e8c:	00 00       	nop
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	93 e2       	ldi	r25, 0x23	; 35
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <_Z4menuv+0x49a>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <_Z4menuv+0x4a0>
     e98:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     e9a:	82 9b       	sbis	0x10, 2	; 16
     e9c:	0e c0       	rjmp	.+28     	; 0xeba <_Z4menuv+0x4c2>
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	93 eb       	ldi	r25, 0xB3	; 179
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <_Z4menuv+0x4aa>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <_Z4menuv+0x4b0>
     ea8:	00 00       	nop
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	93 e2       	ldi	r25, 0x23	; 35
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <_Z4menuv+0x4b6>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <_Z4menuv+0x4bc>
     eb4:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(3);
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	cd db       	rcall	.-2150   	; 0x654 <_Z5einsth>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     eba:	84 99       	sbic	0x10, 4	; 16
     ebc:	1c c0       	rjmp	.+56     	; 0xef6 <_Z4menuv+0x4fe>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	93 eb       	ldi	r25, 0xB3	; 179
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <_Z4menuv+0x4ca>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <_Z4menuv+0x4d0>
     ec8:	00 00       	nop
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	93 e2       	ldi	r25, 0x23	; 35
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <_Z4menuv+0x4d6>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <_Z4menuv+0x4dc>
     ed4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     ed6:	84 9b       	sbis	0x10, 4	; 16
     ed8:	0e c0       	rjmp	.+28     	; 0xef6 <_Z4menuv+0x4fe>
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	93 eb       	ldi	r25, 0xB3	; 179
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <_Z4menuv+0x4e6>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <_Z4menuv+0x4ec>
     ee4:	00 00       	nop
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	93 e2       	ldi	r25, 0x23	; 35
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <_Z4menuv+0x4f2>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <_Z4menuv+0x4f8>
     ef0:	00 00       	nop
					}
					if (debounce(&PIND,PD4))
					{
						temperatur();
     ef2:	1e da       	rcall	.-3012   	; 0x330 <_Z10temperaturv>
						return 1;
     ef4:	bc c0       	rjmp	.+376    	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     ef6:	83 99       	sbic	0x10, 3	; 16
     ef8:	a9 c0       	rjmp	.+338    	; 0x104c <_Z4menuv+0x654>
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	93 eb       	ldi	r25, 0xB3	; 179
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <_Z4menuv+0x506>
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <_Z4menuv+0x50c>
     f04:	00 00       	nop
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	93 e2       	ldi	r25, 0x23	; 35
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <_Z4menuv+0x512>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <_Z4menuv+0x518>
     f10:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     f12:	83 9b       	sbis	0x10, 3	; 16
     f14:	9b c0       	rjmp	.+310    	; 0x104c <_Z4menuv+0x654>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	93 eb       	ldi	r25, 0xB3	; 179
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <_Z4menuv+0x522>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <_Z4menuv+0x528>
     f20:	00 00       	nop
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	93 e2       	ldi	r25, 0x23	; 35
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <_Z4menuv+0x52e>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <_Z4menuv+0x534>
     f2c:	00 00       	nop
					}
				}
				temperatur();
     f2e:	00 da       	rcall	.-3072   	; 0x330 <_Z10temperaturv>
				posit++;
     f30:	8d 2f       	mov	r24, r29
				break;
     f32:	67 cd       	rjmp	.-1330   	; 0xa02 <_Z4menuv+0xa>
				
			case 6:
				//Display ausschalten
				lcd_clear();
     f34:	46 d9       	rcall	.-3444   	; 0x1c2 <_Z9lcd_clearv>
				lcd_home();
     f36:	7c d9       	rcall	.-3336   	; 0x230 <_Z8lcd_homev>
				lcd_string("Display");
     f38:	8f e3       	ldi	r24, 0x3F	; 63
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	94 d9       	rcall	.-3288   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	a5 da       	rcall	.-2742   	; 0x48e <_Z3aushh>
				lcd_string("ausschalten?");
     f44:	87 e4       	ldi	r24, 0x47	; 71
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	8e d9       	rcall	.-3300   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     f4a:	3f c0       	rjmp	.+126    	; 0xfca <_Z4menuv+0x5d2>
				{
					if(Sekunden!=sektemp){
						zeit();
     f4c:	fe d9       	rcall	.-3076   	; 0x34a <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     f4e:	82 99       	sbic	0x10, 2	; 16
     f50:	84 c0       	rjmp	.+264    	; 0x105a <_Z4menuv+0x662>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	93 eb       	ldi	r25, 0xB3	; 179
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <_Z4menuv+0x55e>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <_Z4menuv+0x564>
     f5c:	00 00       	nop
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	93 e2       	ldi	r25, 0x23	; 35
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <_Z4menuv+0x56a>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <_Z4menuv+0x570>
     f68:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     f6a:	82 9b       	sbis	0x10, 2	; 16
     f6c:	76 c0       	rjmp	.+236    	; 0x105a <_Z4menuv+0x662>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	93 eb       	ldi	r25, 0xB3	; 179
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <_Z4menuv+0x57a>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <_Z4menuv+0x580>
     f78:	00 00       	nop
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	93 e2       	ldi	r25, 0x23	; 35
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <_Z4menuv+0x586>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <_Z4menuv+0x58c>
     f84:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						displaystat=false;
     f86:	10 92 60 00 	sts	0x0060, r1
						displayoff=0;
     f8a:	10 92 54 01 	sts	0x0154, r1
						lcd_clear();
     f8e:	19 d9       	rcall	.-3534   	; 0x1c2 <_Z9lcd_clearv>
						PORTC &= ~(1<<PC2); //Display ausschalten
     f90:	aa 98       	cbi	0x15, 2	; 21
						displaystat=false;
						displayoff=0;
						lcd_clear();
						PORTC &= ~(1<<PC2); //Display ausschalten
						*/
						return 1;
     f92:	6d c0       	rjmp	.+218    	; 0x106e <_Z4menuv+0x676>
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	93 eb       	ldi	r25, 0xB3	; 179
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <_Z4menuv+0x5a0>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <_Z4menuv+0x5a6>
     f9e:	00 00       	nop
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	93 e2       	ldi	r25, 0x23	; 35
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <_Z4menuv+0x5ac>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <_Z4menuv+0x5b2>
     faa:	00 00       	nop
     fac:	84 9b       	sbis	0x10, 4	; 16
     fae:	0d c0       	rjmp	.+26     	; 0xfca <_Z4menuv+0x5d2>
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	93 eb       	ldi	r25, 0xB3	; 179
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <_Z4menuv+0x5bc>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <_Z4menuv+0x5c2>
     fba:	00 00       	nop
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	93 e2       	ldi	r25, 0x23	; 35
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <_Z4menuv+0x5c8>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <_Z4menuv+0x5ce>
     fc6:	00 00       	nop
     fc8:	52 c0       	rjmp	.+164    	; 0x106e <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     fca:	83 99       	sbic	0x10, 3	; 16
     fcc:	49 c0       	rjmp	.+146    	; 0x1060 <_Z4menuv+0x668>
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	93 eb       	ldi	r25, 0xB3	; 179
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <_Z4menuv+0x5da>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <_Z4menuv+0x5e0>
     fd8:	00 00       	nop
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	93 e2       	ldi	r25, 0x23	; 35
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <_Z4menuv+0x5e6>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <_Z4menuv+0x5ec>
     fe4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     fe6:	83 9b       	sbis	0x10, 3	; 16
     fe8:	3b c0       	rjmp	.+118    	; 0x1060 <_Z4menuv+0x668>
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	93 eb       	ldi	r25, 0xB3	; 179
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <_Z4menuv+0x5f6>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <_Z4menuv+0x5fc>
     ff4:	00 00       	nop
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	93 e2       	ldi	r25, 0x23	; 35
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <_Z4menuv+0x602>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <_Z4menuv+0x608>
    1000:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
    1002:	8c 2f       	mov	r24, r28
				break;
    1004:	fe cc       	rjmp	.-1540   	; 0xa02 <_Z4menuv+0xa>
				lcd_string("Werktags");
				posit = posit + 1;
				while(!debounce(&PIND,PD3))
				{
					//Zeitabfrage mit einbauen
					if(Sekunden!=sektemp){
    1006:	90 91 77 01 	lds	r25, 0x0177
    100a:	80 91 6e 01 	lds	r24, 0x016E
    100e:	98 13       	cpse	r25, r24
    1010:	15 cd       	rjmp	.-1494   	; 0xa3c <_Z4menuv+0x44>
    1012:	15 cd       	rjmp	.-1494   	; 0xa3e <_Z4menuv+0x46>
				aus(1,7);
				aus(2,0);
				lcd_string("Wohenende");
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1014:	90 91 77 01 	lds	r25, 0x0177
    1018:	80 91 6e 01 	lds	r24, 0x016E
    101c:	98 13       	cpse	r25, r24
    101e:	76 cd       	rjmp	.-1300   	; 0xb0c <_Z4menuv+0x114>
    1020:	76 cd       	rjmp	.-1300   	; 0xb0e <_Z4menuv+0x116>
				aus(2,0);
				itoa(lampenstaerke,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1022:	90 91 77 01 	lds	r25, 0x0177
    1026:	80 91 6e 01 	lds	r24, 0x016E
    102a:	98 13       	cpse	r25, r24
    102c:	df cd       	rjmp	.-1090   	; 0xbec <_Z4menuv+0x1f4>
    102e:	df cd       	rjmp	.-1090   	; 0xbee <_Z4menuv+0x1f6>
				aus(1,3);
				aus(2,0);
				lcd_string("Zeit");
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1030:	90 91 77 01 	lds	r25, 0x0177
    1034:	80 91 6e 01 	lds	r24, 0x016E
    1038:	98 13       	cpse	r25, r24
    103a:	3d ce       	rjmp	.-902    	; 0xcb6 <_Z4menuv+0x2be>
    103c:	3d ce       	rjmp	.-902    	; 0xcb8 <_Z4menuv+0x2c0>
				aus(2,0);
				itoa(sekoffset,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    103e:	90 91 77 01 	lds	r25, 0x0177
    1042:	80 91 6e 01 	lds	r24, 0x016E
    1046:	98 13       	cpse	r25, r24
    1048:	a9 ce       	rjmp	.-686    	; 0xd9c <_Z4menuv+0x3a4>
    104a:	a9 ce       	rjmp	.-686    	; 0xd9e <_Z4menuv+0x3a6>
				aus(2,0);
				itoa(tempoffset,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    104c:	90 91 77 01 	lds	r25, 0x0177
    1050:	80 91 6e 01 	lds	r24, 0x016E
    1054:	98 13       	cpse	r25, r24
    1056:	12 cf       	rjmp	.-476    	; 0xe7c <_Z4menuv+0x484>
    1058:	12 cf       	rjmp	.-476    	; 0xe7e <_Z4menuv+0x486>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    105a:	84 99       	sbic	0x10, 4	; 16
    105c:	b6 cf       	rjmp	.-148    	; 0xfca <_Z4menuv+0x5d2>
    105e:	9a cf       	rjmp	.-204    	; 0xf94 <_Z4menuv+0x59c>
				lcd_string("Display");
				aus(2,0);
				lcd_string("ausschalten?");
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1060:	90 91 77 01 	lds	r25, 0x0177
    1064:	80 91 6e 01 	lds	r24, 0x016E
    1068:	98 13       	cpse	r25, r24
    106a:	70 cf       	rjmp	.-288    	; 0xf4c <_Z4menuv+0x554>
    106c:	70 cf       	rjmp	.-288    	; 0xf4e <_Z4menuv+0x556>
				posit=0;
				break;
		}
	}
return 0;
}
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <_Z4initv>:
}

void init(){
	//ADC
	ADMUX = (1<<REFS0);
    1076:	80 e4       	ldi	r24, 0x40	; 64
    1078:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);
    107e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);
    1080:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
    1082:	36 99       	sbic	0x06, 6	; 6
    1084:	fe cf       	rjmp	.-4      	; 0x1082 <_Z4initv+0xc>
	}
	(void) ADCW;
    1086:	84 b1       	in	r24, 0x04	; 4
    1088:	95 b1       	in	r25, 0x05	; 5
	
	//Eingänge
	PORTD |= (1<<PD2) | (1<<PD3) | (1<<PD4);
    108a:	82 b3       	in	r24, 0x12	; 18
    108c:	8c 61       	ori	r24, 0x1C	; 28
    108e:	82 bb       	out	0x12, r24	; 18
	
	//Ausgänge
	DDRC = (1<<PC5) | (1<<PC4) | (1<<PC3) | (1<<PC2);
    1090:	8c e3       	ldi	r24, 0x3C	; 60
    1092:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC5) | (1<<PC4) | (1<<PC3) | (1<<PC2);
    1094:	85 b3       	in	r24, 0x15	; 21
    1096:	8c 63       	ori	r24, 0x3C	; 60
    1098:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~((1<<PC5) | (1<<PC4) | (1<<PC3) | (1<<PC2));
    109a:	85 b3       	in	r24, 0x15	; 21
    109c:	83 7c       	andi	r24, 0xC3	; 195
    109e:	85 bb       	out	0x15, r24	; 21
	
	//LCD einstellen und erste Ausgabe
	PORTC |= (1<PC2);
    10a0:	a8 9a       	sbi	0x15, 0	; 21
    10a2:	89 e9       	ldi	r24, 0x99	; 153
    10a4:	93 e0       	ldi	r25, 0x03	; 3
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <_Z4initv+0x30>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <_Z4initv+0x36>
	_delay_ms(1);
	lcd_init();
    10ac:	91 d8       	rcall	.-3806   	; 0x1d0 <_Z8lcd_initv>
	aus(1,4);
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	ed d9       	rcall	.-3110   	; 0x48e <_Z3aushh>
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	2f ed       	ldi	r18, 0xDF	; 223
    10b8:	80 e1       	ldi	r24, 0x10	; 16
    10ba:	91 50       	subi	r25, 0x01	; 1
    10bc:	20 40       	sbci	r18, 0x00	; 0
    10be:	80 40       	sbci	r24, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <_Z4initv+0x44>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <_Z4initv+0x4e>
    10c4:	00 00       	nop
	_delay_ms(1500);
	lcd_clear();
    10c6:	7d d8       	rcall	.-3846   	; 0x1c2 <_Z9lcd_clearv>
	
	//erste zeiteinstellung
	zeitsetzen();
    10c8:	7a dc       	rcall	.-1804   	; 0x9be <_Z10zeitsetzenv>
	
	//Timer 1 Einstelungen
	TCNT1H = 0b11110001;
    10ca:	81 ef       	ldi	r24, 0xF1	; 241
    10cc:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
    10ce:	80 ef       	ldi	r24, 0xF0	; 240
    10d0:	8c bd       	out	0x2c, r24	; 44
	TIMSK = (1<<TOIE1);
    10d2:	84 e0       	ldi	r24, 0x04	; 4
    10d4:	89 bf       	out	0x39, r24	; 57
	TCCR1B = (1<<CS10) | (1<<CS12);
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	8e bd       	out	0x2e, r24	; 46
	
	//Interupts aktivieren
	sei();
    10da:	78 94       	sei
	
	//Wecker einschalten
	Wan=0;
    10dc:	10 92 6f 01 	sts	0x016F, r1
    10e0:	08 95       	ret

000010e2 <__vector_8>:
#include "einstellungen.h"
#include "zeit.h"
#include "menue.h"
#include "ausgabe.h"

ISR(TIMER1_OVF_vect){
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	8f 93       	push	r24
	TCNT1H = 0b11110001;
    10ee:	81 ef       	ldi	r24, 0xF1	; 241
    10f0:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
    10f2:	80 ef       	ldi	r24, 0xF0	; 240
    10f4:	8c bd       	out	0x2c, r24	; 44
	Sekunden++;
    10f6:	80 91 77 01 	lds	r24, 0x0177
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	80 93 77 01 	sts	0x0177, r24
}
    1100:	8f 91       	pop	r24
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <main>:

int main(void)
{
	init();
    110c:	b4 df       	rcall	.-152    	; 0x1076 <_Z4initv>
					}
				}
			}
			else
			{
				if(Stunden==WStunden[1]){
    110e:	c3 e7       	ldi	r28, 0x73	; 115
    1110:	d1 e0       	ldi	r29, 0x01	; 1
					if(Minuten==WMinuten[1]+1){
    1112:	0f 2e       	mov	r0, r31
    1114:	f1 e7       	ldi	r31, 0x71	; 113
    1116:	ef 2e       	mov	r14, r31
    1118:	f1 e0       	ldi	r31, 0x01	; 1
    111a:	ff 2e       	mov	r15, r31
    111c:	f0 2d       	mov	r31, r0
		}
		else if (Wan==2)	//Abfrage, damit der Wecker nachdem man ihn in der ersten minute ausgeschaltet hat nicht wieder an geht
		{
			if (WochenTag!=0 && WochenTag!=6)
			{
				if(Stunden==WStunden[0]){
    111e:	02 e7       	ldi	r16, 0x72	; 114
    1120:	11 e0       	ldi	r17, 0x01	; 1
					if(Minuten==WMinuten[0]+1){
    1122:	0f 2e       	mov	r0, r31
    1124:	f0 e7       	ldi	r31, 0x70	; 112
    1126:	cf 2e       	mov	r12, r31
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	df 2e       	mov	r13, r31
    112c:	f0 2d       	mov	r31, r0
{
	init();
	
	while(1)
	{
		if (Sekunden!=sektemp)
    112e:	90 91 77 01 	lds	r25, 0x0177
    1132:	80 91 6e 01 	lds	r24, 0x016E
    1136:	98 17       	cp	r25, r24
    1138:	41 f1       	breq	.+80     	; 0x118a <main+0x7e>
		{
			zeit();
    113a:	07 d9       	rcall	.-3570   	; 0x34a <_Z4zeitv>
			if (displaystat)
    113c:	80 91 60 00 	lds	r24, 0x0060
    1140:	88 23       	and	r24, r24
    1142:	c9 f0       	breq	.+50     	; 0x1176 <main+0x6a>
			{
				aus(1,3);	//obere Zeile
    1144:	63 e0       	ldi	r22, 0x03	; 3
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	a2 d9       	rcall	.-3260   	; 0x48e <_Z3aushh>
				aus(2,1);	//untere zeile
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	9f d9       	rcall	.-3266   	; 0x48e <_Z3aushh>
				if (Wan!=1)
    1150:	80 91 6f 01 	lds	r24, 0x016F
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	79 f4       	brne	.+30     	; 0x1176 <main+0x6a>
				{
					//Aussetzen, des Ausschalten, da keine moeglichkeit das Display wirklich auszuschalten
					//displayoff++;
				}
				else if (!displaystat && Wan ==1)
    1158:	80 91 60 00 	lds	r24, 0x0060
    115c:	81 11       	cpse	r24, r1
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <main+0x6a>
				{
					//Display wieder anschalten, falls noch nicht angeschaltet
					PORTC |= (1<<PC2); //display einsschalten und neue anzeige starten
    1160:	aa 9a       	sbi	0x15, 2	; 21
					lcd_init();
    1162:	36 d8       	rcall	.-3988   	; 0x1d0 <_Z8lcd_initv>
					aus(1,3);
    1164:	63 e0       	ldi	r22, 0x03	; 3
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	92 d9       	rcall	.-3292   	; 0x48e <_Z3aushh>
					aus(2,1);
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	8f d9       	rcall	.-3298   	; 0x48e <_Z3aushh>
					displaystat=true;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 60 00 	sts	0x0060, r24
				}
			}
			if (displayoff>=120)
    1176:	80 91 54 01 	lds	r24, 0x0154
    117a:	88 37       	cpi	r24, 0x78	; 120
    117c:	30 f0       	brcs	.+12     	; 0x118a <main+0x7e>
			{
				displaystat=false;
    117e:	10 92 60 00 	sts	0x0060, r1
				displayoff=0;
    1182:	10 92 54 01 	sts	0x0154, r1
				lcd_clear();
    1186:	1d d8       	rcall	.-4038   	; 0x1c2 <_Z9lcd_clearv>
				PORTC &= ~(1<<PC2); //Display ausschalten
    1188:	aa 98       	cbi	0x15, 2	; 21
			}
			
		}
		if (Wan==1)
    118a:	80 91 6f 01 	lds	r24, 0x016F
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	21 f5       	brne	.+72     	; 0x11da <main+0xce>
    1192:	82 99       	sbic	0x10, 2	; 16
    1194:	4e c0       	rjmp	.+156    	; 0x1232 <main+0x126>
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	93 eb       	ldi	r25, 0xB3	; 179
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <main+0x8e>
    119e:	00 c0       	rjmp	.+0      	; 0x11a0 <main+0x94>
    11a0:	00 00       	nop
    11a2:	ef ef       	ldi	r30, 0xFF	; 255
    11a4:	f3 e2       	ldi	r31, 0x23	; 35
    11a6:	31 97       	sbiw	r30, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <main+0x9a>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <main+0xa0>
    11ac:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    11ae:	82 9b       	sbis	0x10, 2	; 16
    11b0:	40 c0       	rjmp	.+128    	; 0x1232 <main+0x126>
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	93 eb       	ldi	r25, 0xB3	; 179
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <main+0xaa>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <main+0xb0>
    11bc:	00 00       	nop
    11be:	ef ef       	ldi	r30, 0xFF	; 255
    11c0:	f3 e2       	ldi	r31, 0x23	; 35
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <main+0xb6>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <main+0xbc>
    11c8:	00 00       	nop
		{
			if(debounce(&PIND,2))
			{
				displayoff=0;
    11ca:	10 92 54 01 	sts	0x0154, r1
				Wan=2;
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	80 93 6f 01 	sts	0x016F, r24
				lichteinaus(0);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	62 d8       	rcall	.-3900   	; 0x29c <_Z11lichteinaush>
    11d8:	2c c0       	rjmp	.+88     	; 0x1232 <main+0x126>
			}
		}
		else if (Wan==2)	//Abfrage, damit der Wecker nachdem man ihn in der ersten minute ausgeschaltet hat nicht wieder an geht
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	51 f5       	brne	.+84     	; 0x1232 <main+0x126>
		{
			if (WochenTag!=0 && WochenTag!=6)
    11de:	80 91 74 01 	lds	r24, 0x0174
    11e2:	88 23       	and	r24, r24
    11e4:	a9 f0       	breq	.+42     	; 0x1210 <main+0x104>
    11e6:	86 30       	cpi	r24, 0x06	; 6
    11e8:	99 f0       	breq	.+38     	; 0x1210 <main+0x104>
			{
				if(Stunden==WStunden[0]){
    11ea:	f8 01       	movw	r30, r16
    11ec:	90 81       	ld	r25, Z
    11ee:	80 91 75 01 	lds	r24, 0x0175
    11f2:	98 13       	cpse	r25, r24
    11f4:	1e c0       	rjmp	.+60     	; 0x1232 <main+0x126>
					if(Minuten==WMinuten[0]+1){
    11f6:	20 91 76 01 	lds	r18, 0x0176
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	f6 01       	movw	r30, r12
    11fe:	80 81       	ld	r24, Z
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	28 17       	cp	r18, r24
    1206:	39 07       	cpc	r19, r25
    1208:	a1 f4       	brne	.+40     	; 0x1232 <main+0x126>
						Wan = 0;
    120a:	10 92 6f 01 	sts	0x016F, r1
    120e:	11 c0       	rjmp	.+34     	; 0x1232 <main+0x126>
					}
				}
			}
			else
			{
				if(Stunden==WStunden[1]){
    1210:	98 81       	ld	r25, Y
    1212:	80 91 75 01 	lds	r24, 0x0175
    1216:	98 13       	cpse	r25, r24
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <main+0x126>
					if(Minuten==WMinuten[1]+1){
    121a:	20 91 76 01 	lds	r18, 0x0176
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	f7 01       	movw	r30, r14
    1222:	80 81       	ld	r24, Z
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	28 17       	cp	r18, r24
    122a:	39 07       	cpc	r19, r25
    122c:	11 f4       	brne	.+4      	; 0x1232 <main+0x126>
						Wan = 0;
    122e:	10 92 6f 01 	sts	0x016F, r1

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    1232:	84 99       	sbic	0x10, 4	; 16
    1234:	33 c0       	rjmp	.+102    	; 0x129c <main+0x190>
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	93 eb       	ldi	r25, 0xB3	; 179
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <main+0x12e>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <main+0x134>
    1240:	00 00       	nop
    1242:	ef ef       	ldi	r30, 0xFF	; 255
    1244:	f3 e2       	ldi	r31, 0x23	; 35
    1246:	31 97       	sbiw	r30, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <main+0x13a>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <main+0x140>
    124c:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    124e:	84 9b       	sbis	0x10, 4	; 16
    1250:	25 c0       	rjmp	.+74     	; 0x129c <main+0x190>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	93 eb       	ldi	r25, 0xB3	; 179
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <main+0x14a>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <main+0x150>
    125c:	00 00       	nop
    125e:	ef ef       	ldi	r30, 0xFF	; 255
    1260:	f3 e2       	ldi	r31, 0x23	; 35
    1262:	31 97       	sbiw	r30, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <main+0x156>
    1266:	00 c0       	rjmp	.+0      	; 0x1268 <main+0x15c>
    1268:	00 00       	nop
			}
		}
		//Display einschalten bzw. das menue oeffnen
		if (debounce(&PIND,PD4))
		{
			displayoff=0;
    126a:	10 92 54 01 	sts	0x0154, r1
			if (!displaystat)
    126e:	80 91 60 00 	lds	r24, 0x0060
    1272:	81 11       	cpse	r24, r1
    1274:	0c c0       	rjmp	.+24     	; 0x128e <main+0x182>
			{
				PORTC |= (1<<PC2); //display einsschalten und neue anzeige starten
    1276:	aa 9a       	sbi	0x15, 2	; 21
				lcd_init();
    1278:	ab d7       	rcall	.+3926   	; 0x21d0 <__data_load_end+0x850>
				aus(1,3);
    127a:	63 e0       	ldi	r22, 0x03	; 3
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	07 d9       	rcall	.-3570   	; 0x48e <_Z3aushh>
				aus(2,1);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	04 d9       	rcall	.-3576   	; 0x48e <_Z3aushh>
				displaystat=true;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 60 00 	sts	0x0060, r24
    128c:	07 c0       	rjmp	.+14     	; 0x129c <main+0x190>
			}
			else
			{
				menu();
    128e:	b4 db       	rcall	.-2200   	; 0x9f8 <_Z4menuv>
				aus(1,3);	//Ausgabe des Display starten
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	fc d8       	rcall	.-3592   	; 0x48e <_Z3aushh>
				aus(2,1);
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	f9 d8       	rcall	.-3598   	; 0x48e <_Z3aushh>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    129c:	83 99       	sbic	0x10, 3	; 16
    129e:	47 cf       	rjmp	.-370    	; 0x112e <main+0x22>
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	93 eb       	ldi	r25, 0xB3	; 179
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <main+0x198>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <main+0x19e>
    12aa:	00 00       	nop
    12ac:	ef ef       	ldi	r30, 0xFF	; 255
    12ae:	f3 e2       	ldi	r31, 0x23	; 35
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <main+0x1a4>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <main+0x1aa>
    12b6:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    12b8:	83 9b       	sbis	0x10, 3	; 16
    12ba:	39 cf       	rjmp	.-398    	; 0x112e <main+0x22>
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	93 eb       	ldi	r25, 0xB3	; 179
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <main+0x1b4>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <main+0x1ba>
    12c6:	00 00       	nop
    12c8:	ef ef       	ldi	r30, 0xFF	; 255
    12ca:	f3 e2       	ldi	r31, 0x23	; 35
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <main+0x1c0>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <main+0x1c6>
    12d2:	00 00       	nop
			
		}
		//Taster fuer die Pos pruefen, um die Lampen einzuschalten
		if (debounce(&PIND,PD3))
		{
			displayoff=0;
    12d4:	10 92 54 01 	sts	0x0154, r1
			switch (lampenstaerke)
    12d8:	80 91 61 00 	lds	r24, 0x0061
    12dc:	82 30       	cpi	r24, 0x02	; 2
    12de:	69 f0       	breq	.+26     	; 0x12fa <main+0x1ee>
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	99 f0       	breq	.+38     	; 0x130a <main+0x1fe>
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <main+0x1de>
    12e8:	22 cf       	rjmp	.-444    	; 0x112e <main+0x22>
			{
				case 1:
				if ( PORTC & (1<<PC5) )
    12ea:	ad 9b       	sbis	0x15, 5	; 21
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <main+0x1e8>
				{
					lichteinaus(0);	//Licht aus, wenn Licht an
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	d5 d7       	rcall	.+4010   	; 0x229c <__data_load_end+0x91c>
    12f2:	1d cf       	rjmp	.-454    	; 0x112e <main+0x22>
				}
				else
				{
					lichteinaus(1); //nur erste Lampe
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	d2 d7       	rcall	.+4004   	; 0x229c <__data_load_end+0x91c>
    12f8:	1a cf       	rjmp	.-460    	; 0x112e <main+0x22>
				}
					break;
					
				case 2:
				if ( PORTC & (1<<PC5) )
    12fa:	ad 9b       	sbis	0x15, 5	; 21
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <main+0x1f8>
				{
					lichteinaus(0);	//Licht aus, wenn Licht an
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	cd d7       	rcall	.+3994   	; 0x229c <__data_load_end+0x91c>
    1302:	15 cf       	rjmp	.-470    	; 0x112e <main+0x22>
				}
				else
				{
					lichteinaus(5); //nur erste Lampe
    1304:	85 e0       	ldi	r24, 0x05	; 5
    1306:	ca d7       	rcall	.+3988   	; 0x229c <__data_load_end+0x91c>
    1308:	12 cf       	rjmp	.-476    	; 0x112e <main+0x22>
				}
					break;
					
				case 3:
				if ( PORTC & (1<<PC5) )
    130a:	ad 9b       	sbis	0x15, 5	; 21
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <main+0x208>
				{
					lichteinaus(0);	//Licht aus, wenn Licht an
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	c5 d7       	rcall	.+3978   	; 0x229c <__data_load_end+0x91c>
    1312:	0d cf       	rjmp	.-486    	; 0x112e <main+0x22>
				}
				else
				{
					lichteinaus(4); //nur erste Lampe
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	c2 d7       	rcall	.+3972   	; 0x229c <__data_load_end+0x91c>
    1318:	0a cf       	rjmp	.-492    	; 0x112e <main+0x22>

0000131a <dtostrf>:
    131a:	ef 92       	push	r14
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	c0 2f       	mov	r28, r16
    1324:	47 ff       	sbrs	r20, 7
    1326:	02 c0       	rjmp	.+4      	; 0x132c <dtostrf+0x12>
    1328:	34 e1       	ldi	r19, 0x14	; 20
    132a:	01 c0       	rjmp	.+2      	; 0x132e <dtostrf+0x14>
    132c:	34 e0       	ldi	r19, 0x04	; 4
    132e:	e4 2f       	mov	r30, r20
    1330:	ff 27       	eor	r31, r31
    1332:	e7 fd       	sbrc	r30, 7
    1334:	f0 95       	com	r31
    1336:	f7 ff       	sbrs	r31, 7
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <dtostrf+0x26>
    133a:	f1 95       	neg	r31
    133c:	e1 95       	neg	r30
    133e:	f1 09       	sbc	r31, r1
    1340:	e3 2e       	mov	r14, r19
    1342:	02 2f       	mov	r16, r18
    1344:	2e 2f       	mov	r18, r30
    1346:	4c 2f       	mov	r20, r28
    1348:	51 2f       	mov	r21, r17
    134a:	26 d0       	rcall	.+76     	; 0x1398 <dtoa_prf>
    134c:	8c 2f       	mov	r24, r28
    134e:	91 2f       	mov	r25, r17
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ef 90       	pop	r14
    1358:	08 95       	ret

0000135a <itoa>:
    135a:	fb 01       	movw	r30, r22
    135c:	9f 01       	movw	r18, r30
    135e:	e8 94       	clt
    1360:	42 30       	cpi	r20, 0x02	; 2
    1362:	bc f0       	brlt	.+46     	; 0x1392 <itoa+0x38>
    1364:	45 32       	cpi	r20, 0x25	; 37
    1366:	ac f4       	brge	.+42     	; 0x1392 <itoa+0x38>
    1368:	4a 30       	cpi	r20, 0x0A	; 10
    136a:	29 f4       	brne	.+10     	; 0x1376 <itoa+0x1c>
    136c:	97 fb       	bst	r25, 7
    136e:	1e f4       	brtc	.+6      	; 0x1376 <itoa+0x1c>
    1370:	90 95       	com	r25
    1372:	81 95       	neg	r24
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	64 2f       	mov	r22, r20
    1378:	77 27       	eor	r23, r23
    137a:	72 d2       	rcall	.+1252   	; 0x1860 <__udivmodhi4>
    137c:	80 5d       	subi	r24, 0xD0	; 208
    137e:	8a 33       	cpi	r24, 0x3A	; 58
    1380:	0c f0       	brlt	.+2      	; 0x1384 <itoa+0x2a>
    1382:	89 5d       	subi	r24, 0xD9	; 217
    1384:	81 93       	st	Z+, r24
    1386:	cb 01       	movw	r24, r22
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	a9 f7       	brne	.-22     	; 0x1376 <itoa+0x1c>
    138c:	16 f4       	brtc	.+4      	; 0x1392 <itoa+0x38>
    138e:	5d e2       	ldi	r21, 0x2D	; 45
    1390:	51 93       	st	Z+, r21
    1392:	10 82       	st	Z, r1
    1394:	c9 01       	movw	r24, r18
    1396:	54 c2       	rjmp	.+1192   	; 0x1840 <strrev>

00001398 <dtoa_prf>:
    1398:	6f 92       	push	r6
    139a:	7f 92       	push	r7
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	29 97       	sbiw	r28, 0x09	; 9
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	6a 01       	movw	r12, r20
    13c4:	b2 2e       	mov	r11, r18
    13c6:	10 2f       	mov	r17, r16
    13c8:	0c 33       	cpi	r16, 0x3C	; 60
    13ca:	18 f4       	brcc	.+6      	; 0x13d2 <dtoa_prf+0x3a>
    13cc:	f0 2e       	mov	r15, r16
    13ce:	f3 94       	inc	r15
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <dtoa_prf+0x3e>
    13d2:	5c e3       	ldi	r21, 0x3C	; 60
    13d4:	f5 2e       	mov	r15, r21
    13d6:	0f 2d       	mov	r16, r15
    13d8:	27 e0       	ldi	r18, 0x07	; 7
    13da:	ae 01       	movw	r20, r28
    13dc:	4f 5f       	subi	r20, 0xFF	; 255
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	57 d1       	rcall	.+686    	; 0x1690 <__ftoa_engine>
    13e2:	79 81       	ldd	r23, Y+1	; 0x01
    13e4:	27 2f       	mov	r18, r23
    13e6:	29 70       	andi	r18, 0x09	; 9
    13e8:	21 30       	cpi	r18, 0x01	; 1
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <dtoa_prf+0x60>
    13ec:	e1 fc       	sbrc	r14, 1
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <dtoa_prf+0x64>
    13f0:	e0 fe       	sbrs	r14, 0
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <dtoa_prf+0x68>
    13f4:	60 e2       	ldi	r22, 0x20	; 32
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <dtoa_prf+0x6a>
    13f8:	6d e2       	ldi	r22, 0x2D	; 45
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <dtoa_prf+0x6a>
    13fc:	6b e2       	ldi	r22, 0x2B	; 43
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <dtoa_prf+0x6a>
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	73 ff       	sbrs	r23, 3
    1404:	3d c0       	rjmp	.+122    	; 0x1480 <dtoa_prf+0xe8>
    1406:	66 23       	and	r22, r22
    1408:	11 f0       	breq	.+4      	; 0x140e <dtoa_prf+0x76>
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <dtoa_prf+0x78>
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	8b 15       	cp	r24, r11
    1412:	10 f4       	brcc	.+4      	; 0x1418 <dtoa_prf+0x80>
    1414:	b8 1a       	sub	r11, r24
    1416:	01 c0       	rjmp	.+2      	; 0x141a <dtoa_prf+0x82>
    1418:	b1 2c       	mov	r11, r1
    141a:	e4 fc       	sbrc	r14, 4
    141c:	0b c0       	rjmp	.+22     	; 0x1434 <dtoa_prf+0x9c>
    141e:	8b 2d       	mov	r24, r11
    1420:	f6 01       	movw	r30, r12
    1422:	90 e2       	ldi	r25, 0x20	; 32
    1424:	02 c0       	rjmp	.+4      	; 0x142a <dtoa_prf+0x92>
    1426:	91 93       	st	Z+, r25
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	81 11       	cpse	r24, r1
    142c:	fc cf       	rjmp	.-8      	; 0x1426 <dtoa_prf+0x8e>
    142e:	cb 0c       	add	r12, r11
    1430:	d1 1c       	adc	r13, r1
    1432:	b1 2c       	mov	r11, r1
    1434:	66 23       	and	r22, r22
    1436:	19 f0       	breq	.+6      	; 0x143e <dtoa_prf+0xa6>
    1438:	d6 01       	movw	r26, r12
    143a:	6d 93       	st	X+, r22
    143c:	6d 01       	movw	r12, r26
    143e:	e2 fe       	sbrs	r14, 2
    1440:	0a c0       	rjmp	.+20     	; 0x1456 <dtoa_prf+0xbe>
    1442:	8e e4       	ldi	r24, 0x4E	; 78
    1444:	f6 01       	movw	r30, r12
    1446:	80 83       	st	Z, r24
    1448:	91 e4       	ldi	r25, 0x41	; 65
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	82 83       	std	Z+2, r24	; 0x02
    144e:	f3 e0       	ldi	r31, 0x03	; 3
    1450:	cf 0e       	add	r12, r31
    1452:	d1 1c       	adc	r13, r1
    1454:	0c c0       	rjmp	.+24     	; 0x146e <dtoa_prf+0xd6>
    1456:	8e e6       	ldi	r24, 0x6E	; 110
    1458:	d6 01       	movw	r26, r12
    145a:	8c 93       	st	X, r24
    145c:	91 e6       	ldi	r25, 0x61	; 97
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	9c 93       	st	X, r25
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	8c 93       	st	X, r24
    1468:	b3 e0       	ldi	r27, 0x03	; 3
    146a:	cb 0e       	add	r12, r27
    146c:	d1 1c       	adc	r13, r1
    146e:	8b 2d       	mov	r24, r11
    1470:	f6 01       	movw	r30, r12
    1472:	90 e2       	ldi	r25, 0x20	; 32
    1474:	02 c0       	rjmp	.+4      	; 0x147a <dtoa_prf+0xe2>
    1476:	91 93       	st	Z+, r25
    1478:	81 50       	subi	r24, 0x01	; 1
    147a:	81 11       	cpse	r24, r1
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <dtoa_prf+0xde>
    147e:	40 c0       	rjmp	.+128    	; 0x1500 <dtoa_prf+0x168>
    1480:	72 ff       	sbrs	r23, 2
    1482:	45 c0       	rjmp	.+138    	; 0x150e <dtoa_prf+0x176>
    1484:	66 23       	and	r22, r22
    1486:	11 f0       	breq	.+4      	; 0x148c <dtoa_prf+0xf4>
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	01 c0       	rjmp	.+2      	; 0x148e <dtoa_prf+0xf6>
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	8b 15       	cp	r24, r11
    1490:	10 f4       	brcc	.+4      	; 0x1496 <dtoa_prf+0xfe>
    1492:	b8 1a       	sub	r11, r24
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <dtoa_prf+0x100>
    1496:	b1 2c       	mov	r11, r1
    1498:	e4 fc       	sbrc	r14, 4
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <dtoa_prf+0x11a>
    149c:	8b 2d       	mov	r24, r11
    149e:	f6 01       	movw	r30, r12
    14a0:	90 e2       	ldi	r25, 0x20	; 32
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <dtoa_prf+0x110>
    14a4:	91 93       	st	Z+, r25
    14a6:	81 50       	subi	r24, 0x01	; 1
    14a8:	81 11       	cpse	r24, r1
    14aa:	fc cf       	rjmp	.-8      	; 0x14a4 <dtoa_prf+0x10c>
    14ac:	cb 0c       	add	r12, r11
    14ae:	d1 1c       	adc	r13, r1
    14b0:	b1 2c       	mov	r11, r1
    14b2:	66 23       	and	r22, r22
    14b4:	19 f0       	breq	.+6      	; 0x14bc <dtoa_prf+0x124>
    14b6:	f6 01       	movw	r30, r12
    14b8:	61 93       	st	Z+, r22
    14ba:	6f 01       	movw	r12, r30
    14bc:	e2 fe       	sbrs	r14, 2
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <dtoa_prf+0x144>
    14c0:	89 e4       	ldi	r24, 0x49	; 73
    14c2:	d6 01       	movw	r26, r12
    14c4:	8c 93       	st	X, r24
    14c6:	8e e4       	ldi	r24, 0x4E	; 78
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	8c 93       	st	X, r24
    14cc:	11 97       	sbiw	r26, 0x01	; 1
    14ce:	86 e4       	ldi	r24, 0x46	; 70
    14d0:	12 96       	adiw	r26, 0x02	; 2
    14d2:	8c 93       	st	X, r24
    14d4:	b3 e0       	ldi	r27, 0x03	; 3
    14d6:	cb 0e       	add	r12, r27
    14d8:	d1 1c       	adc	r13, r1
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <dtoa_prf+0x158>
    14dc:	89 e6       	ldi	r24, 0x69	; 105
    14de:	f6 01       	movw	r30, r12
    14e0:	80 83       	st	Z, r24
    14e2:	8e e6       	ldi	r24, 0x6E	; 110
    14e4:	81 83       	std	Z+1, r24	; 0x01
    14e6:	86 e6       	ldi	r24, 0x66	; 102
    14e8:	82 83       	std	Z+2, r24	; 0x02
    14ea:	f3 e0       	ldi	r31, 0x03	; 3
    14ec:	cf 0e       	add	r12, r31
    14ee:	d1 1c       	adc	r13, r1
    14f0:	8b 2d       	mov	r24, r11
    14f2:	f6 01       	movw	r30, r12
    14f4:	90 e2       	ldi	r25, 0x20	; 32
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <dtoa_prf+0x164>
    14f8:	91 93       	st	Z+, r25
    14fa:	81 50       	subi	r24, 0x01	; 1
    14fc:	81 11       	cpse	r24, r1
    14fe:	fc cf       	rjmp	.-8      	; 0x14f8 <dtoa_prf+0x160>
    1500:	f6 01       	movw	r30, r12
    1502:	eb 0d       	add	r30, r11
    1504:	f1 1d       	adc	r31, r1
    1506:	10 82       	st	Z, r1
    1508:	2e ef       	ldi	r18, 0xFE	; 254
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	ac c0       	rjmp	.+344    	; 0x1666 <dtoa_prf+0x2ce>
    150e:	a1 e0       	ldi	r26, 0x01	; 1
    1510:	61 11       	cpse	r22, r1
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <dtoa_prf+0x17e>
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	4a 2f       	mov	r20, r26
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	18 16       	cp	r1, r24
    151c:	19 06       	cpc	r1, r25
    151e:	24 f4       	brge	.+8      	; 0x1528 <dtoa_prf+0x190>
    1520:	9c 01       	movw	r18, r24
    1522:	2f 5f       	subi	r18, 0xFF	; 255
    1524:	3f 4f       	sbci	r19, 0xFF	; 255
    1526:	02 c0       	rjmp	.+4      	; 0x152c <dtoa_prf+0x194>
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	24 0f       	add	r18, r20
    152e:	35 1f       	adc	r19, r21
    1530:	11 23       	and	r17, r17
    1532:	29 f0       	breq	.+10     	; 0x153e <dtoa_prf+0x1a6>
    1534:	41 2f       	mov	r20, r17
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	4f 5f       	subi	r20, 0xFF	; 255
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <dtoa_prf+0x1aa>
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	42 0f       	add	r20, r18
    1544:	53 1f       	adc	r21, r19
    1546:	2b 2d       	mov	r18, r11
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	42 17       	cp	r20, r18
    154c:	53 07       	cpc	r21, r19
    154e:	14 f4       	brge	.+4      	; 0x1554 <dtoa_prf+0x1bc>
    1550:	b4 1a       	sub	r11, r20
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <dtoa_prf+0x1be>
    1554:	b1 2c       	mov	r11, r1
    1556:	3e 2d       	mov	r19, r14
    1558:	30 71       	andi	r19, 0x10	; 16
    155a:	e4 fc       	sbrc	r14, 4
    155c:	0d c0       	rjmp	.+26     	; 0x1578 <dtoa_prf+0x1e0>
    155e:	e3 fc       	sbrc	r14, 3
    1560:	0b c0       	rjmp	.+22     	; 0x1578 <dtoa_prf+0x1e0>
    1562:	2b 2d       	mov	r18, r11
    1564:	f6 01       	movw	r30, r12
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	02 c0       	rjmp	.+4      	; 0x156e <dtoa_prf+0x1d6>
    156a:	41 93       	st	Z+, r20
    156c:	21 50       	subi	r18, 0x01	; 1
    156e:	21 11       	cpse	r18, r1
    1570:	fc cf       	rjmp	.-8      	; 0x156a <dtoa_prf+0x1d2>
    1572:	cb 0c       	add	r12, r11
    1574:	d1 1c       	adc	r13, r1
    1576:	b1 2c       	mov	r11, r1
    1578:	aa 23       	and	r26, r26
    157a:	19 f0       	breq	.+6      	; 0x1582 <dtoa_prf+0x1ea>
    157c:	d6 01       	movw	r26, r12
    157e:	6d 93       	st	X+, r22
    1580:	6d 01       	movw	r12, r26
    1582:	31 11       	cpse	r19, r1
    1584:	0b c0       	rjmp	.+22     	; 0x159c <dtoa_prf+0x204>
    1586:	2b 2d       	mov	r18, r11
    1588:	f6 01       	movw	r30, r12
    158a:	30 e3       	ldi	r19, 0x30	; 48
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <dtoa_prf+0x1fa>
    158e:	31 93       	st	Z+, r19
    1590:	21 50       	subi	r18, 0x01	; 1
    1592:	21 11       	cpse	r18, r1
    1594:	fc cf       	rjmp	.-8      	; 0x158e <dtoa_prf+0x1f6>
    1596:	cb 0c       	add	r12, r11
    1598:	d1 1c       	adc	r13, r1
    159a:	b1 2c       	mov	r11, r1
    159c:	f8 0e       	add	r15, r24
    159e:	0a 81       	ldd	r16, Y+2	; 0x02
    15a0:	40 e1       	ldi	r20, 0x10	; 16
    15a2:	a4 2e       	mov	r10, r20
    15a4:	a7 22       	and	r10, r23
    15a6:	74 ff       	sbrs	r23, 4
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <dtoa_prf+0x218>
    15aa:	01 33       	cpi	r16, 0x31	; 49
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <dtoa_prf+0x218>
    15ae:	fa 94       	dec	r15
    15b0:	1f 14       	cp	r1, r15
    15b2:	2c f4       	brge	.+10     	; 0x15be <dtoa_prf+0x226>
    15b4:	2f 2d       	mov	r18, r15
    15b6:	29 30       	cpi	r18, 0x09	; 9
    15b8:	18 f0       	brcs	.+6      	; 0x15c0 <dtoa_prf+0x228>
    15ba:	28 e0       	ldi	r18, 0x08	; 8
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <dtoa_prf+0x228>
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	ac 01       	movw	r20, r24
    15c2:	97 ff       	sbrs	r25, 7
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <dtoa_prf+0x232>
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	3e e2       	ldi	r19, 0x2E	; 46
    15d0:	93 2e       	mov	r9, r19
    15d2:	fc 01       	movw	r30, r24
    15d4:	e2 1b       	sub	r30, r18
    15d6:	f1 09       	sbc	r31, r1
    15d8:	9f 01       	movw	r18, r30
    15da:	dc 01       	movw	r26, r24
    15dc:	a4 1b       	sub	r26, r20
    15de:	b5 0b       	sbc	r27, r21
    15e0:	fe 01       	movw	r30, r28
    15e2:	31 96       	adiw	r30, 0x01	; 1
    15e4:	ea 0f       	add	r30, r26
    15e6:	fb 1f       	adc	r31, r27
    15e8:	a1 2f       	mov	r26, r17
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	66 24       	eor	r6, r6
    15ee:	77 24       	eor	r7, r7
    15f0:	6a 1a       	sub	r6, r26
    15f2:	7b 0a       	sbc	r7, r27
    15f4:	4f 3f       	cpi	r20, 0xFF	; 255
    15f6:	1f ef       	ldi	r17, 0xFF	; 255
    15f8:	51 07       	cpc	r21, r17
    15fa:	19 f4       	brne	.+6      	; 0x1602 <dtoa_prf+0x26a>
    15fc:	d6 01       	movw	r26, r12
    15fe:	9d 92       	st	X+, r9
    1600:	6d 01       	movw	r12, r26
    1602:	84 17       	cp	r24, r20
    1604:	95 07       	cpc	r25, r21
    1606:	54 f0       	brlt	.+20     	; 0x161c <dtoa_prf+0x284>
    1608:	24 17       	cp	r18, r20
    160a:	35 07       	cpc	r19, r21
    160c:	3c f4       	brge	.+14     	; 0x161c <dtoa_prf+0x284>
    160e:	7f 01       	movw	r14, r30
    1610:	e6 0e       	add	r14, r22
    1612:	f7 1e       	adc	r15, r23
    1614:	d7 01       	movw	r26, r14
    1616:	11 96       	adiw	r26, 0x01	; 1
    1618:	1c 91       	ld	r17, X
    161a:	01 c0       	rjmp	.+2      	; 0x161e <dtoa_prf+0x286>
    161c:	10 e3       	ldi	r17, 0x30	; 48
    161e:	41 50       	subi	r20, 0x01	; 1
    1620:	51 09       	sbc	r21, r1
    1622:	6f 5f       	subi	r22, 0xFF	; 255
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	46 15       	cp	r20, r6
    1628:	57 05       	cpc	r21, r7
    162a:	24 f0       	brlt	.+8      	; 0x1634 <dtoa_prf+0x29c>
    162c:	d6 01       	movw	r26, r12
    162e:	1d 93       	st	X+, r17
    1630:	6d 01       	movw	r12, r26
    1632:	e0 cf       	rjmp	.-64     	; 0x15f4 <dtoa_prf+0x25c>
    1634:	48 17       	cp	r20, r24
    1636:	59 07       	cpc	r21, r25
    1638:	39 f4       	brne	.+14     	; 0x1648 <dtoa_prf+0x2b0>
    163a:	06 33       	cpi	r16, 0x36	; 54
    163c:	20 f4       	brcc	.+8      	; 0x1646 <dtoa_prf+0x2ae>
    163e:	05 33       	cpi	r16, 0x35	; 53
    1640:	19 f4       	brne	.+6      	; 0x1648 <dtoa_prf+0x2b0>
    1642:	a1 10       	cpse	r10, r1
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <dtoa_prf+0x2b0>
    1646:	11 e3       	ldi	r17, 0x31	; 49
    1648:	f6 01       	movw	r30, r12
    164a:	11 93       	st	Z+, r17
    164c:	8b 2d       	mov	r24, r11
    164e:	df 01       	movw	r26, r30
    1650:	90 e2       	ldi	r25, 0x20	; 32
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <dtoa_prf+0x2c0>
    1654:	9d 93       	st	X+, r25
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	81 11       	cpse	r24, r1
    165a:	fc cf       	rjmp	.-8      	; 0x1654 <dtoa_prf+0x2bc>
    165c:	eb 0d       	add	r30, r11
    165e:	f1 1d       	adc	r31, r1
    1660:	10 82       	st	Z, r1
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	c9 01       	movw	r24, r18
    1668:	29 96       	adiw	r28, 0x09	; 9
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	7f 90       	pop	r7
    168c:	6f 90       	pop	r6
    168e:	08 95       	ret

00001690 <__ftoa_engine>:
    1690:	28 30       	cpi	r18, 0x08	; 8
    1692:	08 f0       	brcs	.+2      	; 0x1696 <__ftoa_engine+0x6>
    1694:	27 e0       	ldi	r18, 0x07	; 7
    1696:	33 27       	eor	r19, r19
    1698:	da 01       	movw	r26, r20
    169a:	99 0f       	add	r25, r25
    169c:	31 1d       	adc	r19, r1
    169e:	87 fd       	sbrc	r24, 7
    16a0:	91 60       	ori	r25, 0x01	; 1
    16a2:	00 96       	adiw	r24, 0x00	; 0
    16a4:	61 05       	cpc	r22, r1
    16a6:	71 05       	cpc	r23, r1
    16a8:	39 f4       	brne	.+14     	; 0x16b8 <__ftoa_engine+0x28>
    16aa:	32 60       	ori	r19, 0x02	; 2
    16ac:	2e 5f       	subi	r18, 0xFE	; 254
    16ae:	3d 93       	st	X+, r19
    16b0:	30 e3       	ldi	r19, 0x30	; 48
    16b2:	2a 95       	dec	r18
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <__ftoa_engine+0x1e>
    16b6:	08 95       	ret
    16b8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ba:	30 f0       	brcs	.+12     	; 0x16c8 <__ftoa_engine+0x38>
    16bc:	80 38       	cpi	r24, 0x80	; 128
    16be:	71 05       	cpc	r23, r1
    16c0:	61 05       	cpc	r22, r1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__ftoa_engine+0x36>
    16c4:	3c 5f       	subi	r19, 0xFC	; 252
    16c6:	3c 5f       	subi	r19, 0xFC	; 252
    16c8:	3d 93       	st	X+, r19
    16ca:	91 30       	cpi	r25, 0x01	; 1
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <__ftoa_engine+0x40>
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	91 1d       	adc	r25, r1
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	1f 93       	push	r17
    16d8:	0f 93       	push	r16
    16da:	ff 92       	push	r15
    16dc:	ef 92       	push	r14
    16de:	19 2f       	mov	r17, r25
    16e0:	98 7f       	andi	r25, 0xF8	; 248
    16e2:	96 95       	lsr	r25
    16e4:	e9 2f       	mov	r30, r25
    16e6:	96 95       	lsr	r25
    16e8:	96 95       	lsr	r25
    16ea:	e9 0f       	add	r30, r25
    16ec:	ff 27       	eor	r31, r31
    16ee:	e0 57       	subi	r30, 0x70	; 112
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	99 27       	eor	r25, r25
    16f4:	33 27       	eor	r19, r19
    16f6:	ee 24       	eor	r14, r14
    16f8:	ff 24       	eor	r15, r15
    16fa:	a7 01       	movw	r20, r14
    16fc:	e7 01       	movw	r28, r14
    16fe:	05 90       	lpm	r0, Z+
    1700:	08 94       	sec
    1702:	07 94       	ror	r0
    1704:	28 f4       	brcc	.+10     	; 0x1710 <__ftoa_engine+0x80>
    1706:	36 0f       	add	r19, r22
    1708:	e7 1e       	adc	r14, r23
    170a:	f8 1e       	adc	r15, r24
    170c:	49 1f       	adc	r20, r25
    170e:	51 1d       	adc	r21, r1
    1710:	66 0f       	add	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	06 94       	lsr	r0
    171a:	a1 f7       	brne	.-24     	; 0x1704 <__ftoa_engine+0x74>
    171c:	05 90       	lpm	r0, Z+
    171e:	07 94       	ror	r0
    1720:	28 f4       	brcc	.+10     	; 0x172c <__ftoa_engine+0x9c>
    1722:	e7 0e       	add	r14, r23
    1724:	f8 1e       	adc	r15, r24
    1726:	49 1f       	adc	r20, r25
    1728:	56 1f       	adc	r21, r22
    172a:	c1 1d       	adc	r28, r1
    172c:	77 0f       	add	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	66 1f       	adc	r22, r22
    1734:	06 94       	lsr	r0
    1736:	a1 f7       	brne	.-24     	; 0x1720 <__ftoa_engine+0x90>
    1738:	05 90       	lpm	r0, Z+
    173a:	07 94       	ror	r0
    173c:	28 f4       	brcc	.+10     	; 0x1748 <__ftoa_engine+0xb8>
    173e:	f8 0e       	add	r15, r24
    1740:	49 1f       	adc	r20, r25
    1742:	56 1f       	adc	r21, r22
    1744:	c7 1f       	adc	r28, r23
    1746:	d1 1d       	adc	r29, r1
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	66 1f       	adc	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	06 94       	lsr	r0
    1752:	a1 f7       	brne	.-24     	; 0x173c <__ftoa_engine+0xac>
    1754:	05 90       	lpm	r0, Z+
    1756:	07 94       	ror	r0
    1758:	20 f4       	brcc	.+8      	; 0x1762 <__ftoa_engine+0xd2>
    175a:	49 0f       	add	r20, r25
    175c:	56 1f       	adc	r21, r22
    175e:	c7 1f       	adc	r28, r23
    1760:	d8 1f       	adc	r29, r24
    1762:	99 0f       	add	r25, r25
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	06 94       	lsr	r0
    176c:	a9 f7       	brne	.-22     	; 0x1758 <__ftoa_engine+0xc8>
    176e:	84 91       	lpm	r24, Z
    1770:	10 95       	com	r17
    1772:	17 70       	andi	r17, 0x07	; 7
    1774:	41 f0       	breq	.+16     	; 0x1786 <__ftoa_engine+0xf6>
    1776:	d6 95       	lsr	r29
    1778:	c7 95       	ror	r28
    177a:	57 95       	ror	r21
    177c:	47 95       	ror	r20
    177e:	f7 94       	ror	r15
    1780:	e7 94       	ror	r14
    1782:	1a 95       	dec	r17
    1784:	c1 f7       	brne	.-16     	; 0x1776 <__ftoa_engine+0xe6>
    1786:	e6 e3       	ldi	r30, 0x36	; 54
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	68 94       	set
    178c:	15 90       	lpm	r1, Z+
    178e:	15 91       	lpm	r17, Z+
    1790:	35 91       	lpm	r19, Z+
    1792:	65 91       	lpm	r22, Z+
    1794:	95 91       	lpm	r25, Z+
    1796:	05 90       	lpm	r0, Z+
    1798:	7f e2       	ldi	r23, 0x2F	; 47
    179a:	73 95       	inc	r23
    179c:	e1 18       	sub	r14, r1
    179e:	f1 0a       	sbc	r15, r17
    17a0:	43 0b       	sbc	r20, r19
    17a2:	56 0b       	sbc	r21, r22
    17a4:	c9 0b       	sbc	r28, r25
    17a6:	d0 09       	sbc	r29, r0
    17a8:	c0 f7       	brcc	.-16     	; 0x179a <__ftoa_engine+0x10a>
    17aa:	e1 0c       	add	r14, r1
    17ac:	f1 1e       	adc	r15, r17
    17ae:	43 1f       	adc	r20, r19
    17b0:	56 1f       	adc	r21, r22
    17b2:	c9 1f       	adc	r28, r25
    17b4:	d0 1d       	adc	r29, r0
    17b6:	7e f4       	brtc	.+30     	; 0x17d6 <__ftoa_engine+0x146>
    17b8:	70 33       	cpi	r23, 0x30	; 48
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__ftoa_engine+0x130>
    17bc:	8a 95       	dec	r24
    17be:	e6 cf       	rjmp	.-52     	; 0x178c <__ftoa_engine+0xfc>
    17c0:	e8 94       	clt
    17c2:	01 50       	subi	r16, 0x01	; 1
    17c4:	30 f0       	brcs	.+12     	; 0x17d2 <__ftoa_engine+0x142>
    17c6:	08 0f       	add	r16, r24
    17c8:	0a f4       	brpl	.+2      	; 0x17cc <__ftoa_engine+0x13c>
    17ca:	00 27       	eor	r16, r16
    17cc:	02 17       	cp	r16, r18
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <__ftoa_engine+0x142>
    17d0:	20 2f       	mov	r18, r16
    17d2:	23 95       	inc	r18
    17d4:	02 2f       	mov	r16, r18
    17d6:	7a 33       	cpi	r23, 0x3A	; 58
    17d8:	28 f0       	brcs	.+10     	; 0x17e4 <__ftoa_engine+0x154>
    17da:	79 e3       	ldi	r23, 0x39	; 57
    17dc:	7d 93       	st	X+, r23
    17de:	2a 95       	dec	r18
    17e0:	e9 f7       	brne	.-6      	; 0x17dc <__ftoa_engine+0x14c>
    17e2:	10 c0       	rjmp	.+32     	; 0x1804 <__ftoa_engine+0x174>
    17e4:	7d 93       	st	X+, r23
    17e6:	2a 95       	dec	r18
    17e8:	89 f6       	brne	.-94     	; 0x178c <__ftoa_engine+0xfc>
    17ea:	06 94       	lsr	r0
    17ec:	97 95       	ror	r25
    17ee:	67 95       	ror	r22
    17f0:	37 95       	ror	r19
    17f2:	17 95       	ror	r17
    17f4:	17 94       	ror	r1
    17f6:	e1 18       	sub	r14, r1
    17f8:	f1 0a       	sbc	r15, r17
    17fa:	43 0b       	sbc	r20, r19
    17fc:	56 0b       	sbc	r21, r22
    17fe:	c9 0b       	sbc	r28, r25
    1800:	d0 09       	sbc	r29, r0
    1802:	98 f0       	brcs	.+38     	; 0x182a <__ftoa_engine+0x19a>
    1804:	23 95       	inc	r18
    1806:	7e 91       	ld	r23, -X
    1808:	73 95       	inc	r23
    180a:	7a 33       	cpi	r23, 0x3A	; 58
    180c:	08 f0       	brcs	.+2      	; 0x1810 <__ftoa_engine+0x180>
    180e:	70 e3       	ldi	r23, 0x30	; 48
    1810:	7c 93       	st	X, r23
    1812:	20 13       	cpse	r18, r16
    1814:	b8 f7       	brcc	.-18     	; 0x1804 <__ftoa_engine+0x174>
    1816:	7e 91       	ld	r23, -X
    1818:	70 61       	ori	r23, 0x10	; 16
    181a:	7d 93       	st	X+, r23
    181c:	30 f0       	brcs	.+12     	; 0x182a <__ftoa_engine+0x19a>
    181e:	83 95       	inc	r24
    1820:	71 e3       	ldi	r23, 0x31	; 49
    1822:	7d 93       	st	X+, r23
    1824:	70 e3       	ldi	r23, 0x30	; 48
    1826:	2a 95       	dec	r18
    1828:	e1 f7       	brne	.-8      	; 0x1822 <__ftoa_engine+0x192>
    182a:	11 24       	eor	r1, r1
    182c:	ef 90       	pop	r14
    182e:	ff 90       	pop	r15
    1830:	0f 91       	pop	r16
    1832:	1f 91       	pop	r17
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	99 27       	eor	r25, r25
    183a:	87 fd       	sbrc	r24, 7
    183c:	90 95       	com	r25
    183e:	08 95       	ret

00001840 <strrev>:
    1840:	dc 01       	movw	r26, r24
    1842:	fc 01       	movw	r30, r24
    1844:	67 2f       	mov	r22, r23
    1846:	71 91       	ld	r23, Z+
    1848:	77 23       	and	r23, r23
    184a:	e1 f7       	brne	.-8      	; 0x1844 <strrev+0x4>
    184c:	32 97       	sbiw	r30, 0x02	; 2
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <strrev+0x18>
    1850:	7c 91       	ld	r23, X
    1852:	6d 93       	st	X+, r22
    1854:	70 83       	st	Z, r23
    1856:	62 91       	ld	r22, -Z
    1858:	ae 17       	cp	r26, r30
    185a:	bf 07       	cpc	r27, r31
    185c:	c8 f3       	brcs	.-14     	; 0x1850 <strrev+0x10>
    185e:	08 95       	ret

00001860 <__udivmodhi4>:
    1860:	aa 1b       	sub	r26, r26
    1862:	bb 1b       	sub	r27, r27
    1864:	51 e1       	ldi	r21, 0x11	; 17
    1866:	07 c0       	rjmp	.+14     	; 0x1876 <__udivmodhi4_ep>

00001868 <__udivmodhi4_loop>:
    1868:	aa 1f       	adc	r26, r26
    186a:	bb 1f       	adc	r27, r27
    186c:	a6 17       	cp	r26, r22
    186e:	b7 07       	cpc	r27, r23
    1870:	10 f0       	brcs	.+4      	; 0x1876 <__udivmodhi4_ep>
    1872:	a6 1b       	sub	r26, r22
    1874:	b7 0b       	sbc	r27, r23

00001876 <__udivmodhi4_ep>:
    1876:	88 1f       	adc	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	5a 95       	dec	r21
    187c:	a9 f7       	brne	.-22     	; 0x1868 <__udivmodhi4_loop>
    187e:	80 95       	com	r24
    1880:	90 95       	com	r25
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	08 95       	ret

00001888 <_exit>:
    1888:	f8 94       	cli

0000188a <__stop_program>:
    188a:	ff cf       	rjmp	.-2      	; 0x188a <__stop_program>
