
Sonnenaufgangsweckerlampe_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00001110  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000d0  008000d0  00001214  2**0
                  ALLOC
  3 .stab         00002b80  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000854  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000045e8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000138  00000000  00000000  00004617  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021a8  00000000  00000000  0000474f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000053b  00000000  00000000  000068f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a21  00000000  00000000  00006e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000338  00000000  00000000  00007854  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000576  00000000  00000000  00007b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001377  00000000  00000000  00008102  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  00009479  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	a9 c0       	rjmp	.+338    	; 0x156 <__bad_interrupt>
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	a7 c0       	rjmp	.+334    	; 0x156 <__bad_interrupt>
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	a5 c0       	rjmp	.+330    	; 0x156 <__bad_interrupt>
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	a3 c0       	rjmp	.+326    	; 0x156 <__bad_interrupt>
      10:	da c3       	rjmp	.+1972   	; 0x7c6 <__vector_8>
      12:	a1 c0       	rjmp	.+322    	; 0x156 <__bad_interrupt>
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	9f c0       	rjmp	.+318    	; 0x156 <__bad_interrupt>
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	9d c0       	rjmp	.+314    	; 0x156 <__bad_interrupt>
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	9b c0       	rjmp	.+310    	; 0x156 <__bad_interrupt>
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	99 c0       	rjmp	.+306    	; 0x156 <__bad_interrupt>
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 40       	sbci	r16, 0x00	; 0
      28:	7a 10       	cpse	r7, r10
      2a:	f3 5a       	subi	r31, 0xA3	; 163
      2c:	00 a0       	ldd	r0, Z+32	; 0x20
      2e:	72 4e       	sbci	r23, 0xE2	; 226
      30:	18 09       	sbc	r17, r8
      32:	00 10       	cpse	r0, r0
      34:	a5 d4       	rcall	.+2378   	; 0x980 <__divsf3_pse+0x76>
      36:	e8 00       	.word	0x00e8	; ????
      38:	00 e8       	ldi	r16, 0x80	; 128
      3a:	76 48       	sbci	r23, 0x86	; 134
      3c:	17 00       	.word	0x0017	; ????
      3e:	00 e4       	ldi	r16, 0x40	; 64
      40:	0b 54       	subi	r16, 0x4B	; 75
      42:	02 00       	.word	0x0002	; ????
      44:	00 ca       	rjmp	.-3072   	; 0xfffff446 <__eeprom_end+0xff7ef446>
      46:	9a 3b       	cpi	r25, 0xBA	; 186
      48:	00 00       	nop
      4a:	00 e1       	ldi	r16, 0x10	; 16
      4c:	f5 05       	cpc	r31, r5
      4e:	00 00       	nop
      50:	80 96       	adiw	r24, 0x20	; 32
      52:	98 00       	.word	0x0098	; ????
      54:	00 00       	nop
      56:	40 42       	sbci	r20, 0x20	; 32
      58:	0f 00       	.word	0x000f	; ????
      5a:	00 00       	nop
      5c:	a0 86       	std	Z+8, r10	; 0x08
      5e:	01 00       	.word	0x0001	; ????
      60:	00 00       	nop
      62:	10 27       	eor	r17, r16
      64:	00 00       	nop
      66:	00 00       	nop
      68:	e8 03       	fmulsu	r22, r16
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	64 00       	.word	0x0064	; ????
      70:	00 00       	nop
      72:	00 00       	nop
      74:	0a 00       	.word	0x000a	; ????
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	01 00       	.word	0x0001	; ????
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	2c 76       	andi	r18, 0x6C	; 108
      82:	d8 88       	ldd	r13, Y+16	; 0x10
      84:	dc 67       	ori	r29, 0x7C	; 124
      86:	4f 08       	sbc	r4, r15
      88:	23 df       	rcall	.-442    	; 0xfffffed0 <__eeprom_end+0xff7efed0>
      8a:	c1 df       	rcall	.-126    	; 0xe <__zero_reg__+0xd>
      8c:	ae 59       	subi	r26, 0x9E	; 158
      8e:	e1 b1       	in	r30, 0x01	; 1
      90:	b7 96       	adiw	r30, 0x27	; 39
      92:	e5 e3       	ldi	r30, 0x35	; 53
      94:	e4 53       	subi	r30, 0x34	; 52
      96:	c6 3a       	cpi	r28, 0xA6	; 166
      98:	e6 51       	subi	r30, 0x16	; 22
      9a:	99 76       	andi	r25, 0x69	; 105
      9c:	96 e8       	ldi	r25, 0x86	; 134
      9e:	e6 c2       	rjmp	.+1484   	; 0x66c <_Z5einsth+0x30>
      a0:	84 26       	eor	r8, r20
      a2:	eb 89       	ldd	r30, Y+19	; 0x13
      a4:	8c 9b       	sbis	0x11, 4	; 17
      a6:	62 ed       	ldi	r22, 0xD2	; 210
      a8:	40 7c       	andi	r20, 0xC0	; 192
      aa:	6f fc       	.word	0xfc6f	; ????
      ac:	ef bc       	out	0x2f, r14	; 47
      ae:	9c 9f       	mul	r25, r28
      b0:	40 f2       	brcs	.-112    	; 0x42 <__SREG__+0x3>
      b2:	ba a5       	ldd	r27, Y+42	; 0x2a
      b4:	6f a5       	ldd	r22, Y+47	; 0x2f
      b6:	f4 90       	lpm	r15, Z
      b8:	05 5a       	subi	r16, 0xA5	; 165
      ba:	2a f7       	brpl	.-54     	; 0x86 <__SREG__+0x47>
      bc:	5c 93       	st	X, r21
      be:	6b 6c       	ori	r22, 0xCB	; 203
      c0:	f9 67       	ori	r31, 0x79	; 121
      c2:	6d c1       	rjmp	.+730    	; 0x39e <_Z4zeitv+0xe4>
      c4:	1b fc       	.word	0xfc1b	; ????
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	0d 47       	sbci	r16, 0x7D	; 125
      ca:	fe f5       	brtc	.+126    	; 0x14a <.do_clear_bss_loop>
      cc:	20 e6       	ldi	r18, 0x60	; 96
      ce:	b5 00       	.word	0x00b5	; ????
      d0:	d0 ed       	ldi	r29, 0xD0	; 208
      d2:	90 2e       	mov	r9, r16
      d4:	03 00       	.word	0x0003	; ????
      d6:	94 35       	cpi	r25, 0x54	; 84
      d8:	77 05       	cpc	r23, r7
      da:	00 80       	ld	r0, Z
      dc:	84 1e       	adc	r8, r20
      de:	08 00       	.word	0x0008	; ????
      e0:	00 20       	and	r0, r0
      e2:	4e 0a       	sbc	r4, r30
      e4:	00 00       	nop
      e6:	00 c8       	rjmp	.-4096   	; 0xfffff0e8 <__eeprom_end+0xff7ef0e8>
      e8:	0c 33       	cpi	r16, 0x3C	; 60
      ea:	33 33       	cpi	r19, 0x33	; 51
      ec:	33 0f       	add	r19, r19
      ee:	98 6e       	ori	r25, 0xE8	; 232
      f0:	12 83       	std	Z+2, r17	; 0x02
      f2:	11 41       	sbci	r17, 0x11	; 17
      f4:	ef 8d       	ldd	r30, Y+31	; 0x1f
      f6:	21 14       	cp	r2, r1
      f8:	89 3b       	cpi	r24, 0xB9	; 185
      fa:	e6 55       	subi	r30, 0x56	; 86
      fc:	16 cf       	rjmp	.-468    	; 0xffffff2a <__eeprom_end+0xff7eff2a>
      fe:	fe e6       	ldi	r31, 0x6E	; 110
     100:	db 18       	sub	r13, r11
     102:	d1 84       	ldd	r13, Z+9	; 0x09
     104:	4b 38       	cpi	r20, 0x8B	; 139
     106:	1b f7       	brvc	.-58     	; 0xce <__SREG__+0x8f>
     108:	7c 1d       	adc	r23, r12
     10a:	90 1d       	adc	r25, r0
     10c:	a4 bb       	out	0x14, r26	; 20
     10e:	e4 24       	eor	r14, r4
     110:	20 32       	cpi	r18, 0x20	; 32
     112:	84 72       	andi	r24, 0x24	; 36
     114:	5e 22       	and	r5, r30
     116:	81 00       	.word	0x0081	; ????
     118:	c9 f1       	breq	.+114    	; 0x18c <_Z8lcd_datah+0x12>
     11a:	24 ec       	ldi	r18, 0xC4	; 196
     11c:	a1 e5       	ldi	r26, 0x51	; 81
     11e:	3d 27       	eor	r19, r29

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf e5       	ldi	r28, 0x5F	; 95
     126:	d4 e0       	ldi	r29, 0x04	; 4
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	a0 e6       	ldi	r26, 0x60	; 96
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e0 e1       	ldi	r30, 0x10	; 16
     134:	f1 e1       	ldi	r31, 0x11	; 17
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	a0 3d       	cpi	r26, 0xD0	; 208
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	a0 ed       	ldi	r26, 0xD0	; 208
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	a1 3f       	cpi	r26, 0xF1	; 241
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
     152:	4e d3       	rcall	.+1692   	; 0x7f0 <main>
     154:	db c7       	rjmp	.+4022   	; 0x110c <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <_ZL10lcd_enablev>:

////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls
static void lcd_enable( void )
{
	LCD_PORT |= (1<<LCD_EN);     // Enable auf 1 setzen
     158:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	88 e1       	ldi	r24, 0x18	; 24
     15c:	8a 95       	dec	r24
     15e:	f1 f7       	brne	.-4      	; 0x15c <_ZL10lcd_enablev+0x4>
     160:	00 c0       	rjmp	.+0      	; 0x162 <_ZL10lcd_enablev+0xa>
	_delay_us( LCD_ENABLE_US );  // kurze Pause
	LCD_PORT &= ~(1<<LCD_EN);    // Enable auf 0 setzen
     162:	c5 98       	cbi	0x18, 5	; 24
     164:	08 95       	ret

00000166 <_ZL7lcd_outh>:
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
	data &= 0xF0;                       // obere 4 Bit maskieren
	
	LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske löschen
     166:	98 b3       	in	r25, 0x18	; 24
     168:	90 7f       	andi	r25, 0xF0	; 240
     16a:	98 bb       	out	0x18, r25	; 24
	LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
     16c:	98 b3       	in	r25, 0x18	; 24
     16e:	82 95       	swap	r24
     170:	8f 70       	andi	r24, 0x0F	; 15
     172:	98 2b       	or	r25, r24
     174:	98 bb       	out	0x18, r25	; 24
	lcd_enable();
     176:	f0 df       	rcall	.-32     	; 0x158 <_ZL10lcd_enablev>
     178:	08 95       	ret

0000017a <_Z8lcd_datah>:
}

////////////////////////////////////////////////////////////////////////////////
// Sendet ein Datenbyte an das LCD
void lcd_data( uint8_t data )
{
     17a:	cf 93       	push	r28
     17c:	c8 2f       	mov	r28, r24
	LCD_PORT |= (1<<LCD_RS);    // RS auf 1 setzen
     17e:	c4 9a       	sbi	0x18, 4	; 24
	
	lcd_out( data );            // zuerst die oberen,
     180:	f2 df       	rcall	.-28     	; 0x166 <_ZL7lcd_outh>
	lcd_out( data<<4 );         // dann die unteren 4 Bit senden
     182:	8c 2f       	mov	r24, r28
     184:	82 95       	swap	r24
     186:	80 7f       	andi	r24, 0xF0	; 240
     188:	ee df       	rcall	.-36     	; 0x166 <_ZL7lcd_outh>
     18a:	88 e3       	ldi	r24, 0x38	; 56
     18c:	8a 95       	dec	r24
     18e:	f1 f7       	brne	.-4      	; 0x18c <_Z8lcd_datah+0x12>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_Z8lcd_datah+0x18>
	
	_delay_us( LCD_WRITEDATA_US );
}
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_Z11lcd_commandh>:

////////////////////////////////////////////////////////////////////////////////
// Sendet einen Befehl an das LCD
void lcd_command( uint8_t data )
{
     196:	cf 93       	push	r28
     198:	c8 2f       	mov	r28, r24
	LCD_PORT &= ~(1<<LCD_RS);    // RS auf 0 setzen
     19a:	c4 98       	cbi	0x18, 4	; 24
	
	lcd_out( data );             // zuerst die oberen,
     19c:	e4 df       	rcall	.-56     	; 0x166 <_ZL7lcd_outh>
	lcd_out( data<<4 );           // dann die unteren 4 Bit senden
     19e:	8c 2f       	mov	r24, r28
     1a0:	82 95       	swap	r24
     1a2:	80 7f       	andi	r24, 0xF0	; 240
     1a4:	e0 df       	rcall	.-64     	; 0x166 <_ZL7lcd_outh>
     1a6:	83 e3       	ldi	r24, 0x33	; 51
     1a8:	8a 95       	dec	r24
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_Z11lcd_commandh+0x12>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z11lcd_commandh+0x18>
	
	_delay_us( LCD_COMMAND_US );
}
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <_Z9lcd_clearv>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcd_clear( void )
{
	lcd_command( LCD_CLEAR_DISPLAY );
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	f0 df       	rcall	.-32     	; 0x196 <_Z11lcd_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b6:	83 e3       	ldi	r24, 0x33	; 51
     1b8:	97 e0       	ldi	r25, 0x07	; 7
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <_Z9lcd_clearv+0x8>
     1be:	08 95       	ret

000001c0 <_Z8lcd_initv>:
{
	// verwendete Pins auf Ausgang schalten
	uint8_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
	(1<<LCD_RS) |                // R/S Leitung
	(1<<LCD_EN);                 // Enable Leitung
	LCD_DDR |= pins;
     1c0:	87 b3       	in	r24, 0x17	; 23
     1c2:	8f 63       	ori	r24, 0x3F	; 63
     1c4:	87 bb       	out	0x17, r24	; 23
	
	// initial alle Ausgänge auf Null
	LCD_PORT &= ~pins;
     1c6:	88 b3       	in	r24, 0x18	; 24
     1c8:	80 7c       	andi	r24, 0xC0	; 192
     1ca:	88 bb       	out	0x18, r24	; 24
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	95 e3       	ldi	r25, 0x35	; 53
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z8lcd_initv+0x10>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z8lcd_initv+0x16>
     1d6:	00 00       	nop
	
	// warten auf die Bereitschaft des LCD
	_delay_ms( LCD_BOOTUP_MS );
	
	// Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
	lcd_out( LCD_SOFT_RESET );
     1d8:	80 e3       	ldi	r24, 0x30	; 48
     1da:	c5 df       	rcall	.-118    	; 0x166 <_ZL7lcd_outh>
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	91 e1       	ldi	r25, 0x11	; 17
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z8lcd_initv+0x20>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z8lcd_initv+0x26>
     1e6:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS1 );
	
	lcd_enable();
     1e8:	b7 df       	rcall	.-146    	; 0x158 <_ZL10lcd_enablev>
     1ea:	89 e9       	ldi	r24, 0x99	; 153
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <_Z8lcd_initv+0x2e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <_Z8lcd_initv+0x34>
	_delay_ms( LCD_SOFT_RESET_MS2 );
	
	lcd_enable();
     1f4:	b1 df       	rcall	.-158    	; 0x158 <_ZL10lcd_enablev>
     1f6:	89 e9       	ldi	r24, 0x99	; 153
     1f8:	93 e0       	ldi	r25, 0x03	; 3
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <_Z8lcd_initv+0x3a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z8lcd_initv+0x40>
	_delay_ms( LCD_SOFT_RESET_MS3 );
	
	// 4-bit Modus aktivieren
	lcd_out( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT );
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	b1 df       	rcall	.-158    	; 0x166 <_ZL7lcd_outh>
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	91 e1       	ldi	r25, 0x11	; 17
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <_Z8lcd_initv+0x48>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <_Z8lcd_initv+0x4e>
     20e:	00 00       	nop
	
	// 4-bit Modus / 2 Zeilen / 5x7
	lcd_command( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT |
	LCD_FUNCTION_2LINE |
	LCD_FUNCTION_5X7 );
     210:	88 e2       	ldi	r24, 0x28	; 40
     212:	c1 df       	rcall	.-126    	; 0x196 <_Z11lcd_commandh>
	
	// Display ein / Cursor aus / Blinken aus
	lcd_command( LCD_SET_DISPLAY |
	LCD_DISPLAY_ON |
	LCD_CURSOR_OFF |
	LCD_BLINKING_OFF);
     214:	8c e0       	ldi	r24, 0x0C	; 12
     216:	bf df       	rcall	.-130    	; 0x196 <_Z11lcd_commandh>
	
	// Cursor inkrement / kein Scrollen
	lcd_command( LCD_SET_ENTRY |
	LCD_ENTRY_INCREASE |
	LCD_ENTRY_NOSHIFT );
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	bd df       	rcall	.-134    	; 0x196 <_Z11lcd_commandh>
	
	lcd_clear();
     21c:	ca df       	rcall	.-108    	; 0x1b2 <_Z9lcd_clearv>
     21e:	08 95       	ret

00000220 <_Z8lcd_homev>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
	lcd_command( LCD_CURSOR_HOME );
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	b9 df       	rcall	.-142    	; 0x196 <_Z11lcd_commandh>
     224:	83 e3       	ldi	r24, 0x33	; 51
     226:	97 e0       	ldi	r25, 0x07	; 7
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <_Z8lcd_homev+0x8>
     22c:	08 95       	ret

0000022e <_Z13lcd_setcursorhh>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;
	
	switch (y)
     22e:	62 30       	cpi	r22, 0x02	; 2
     230:	59 f0       	breq	.+22     	; 0x248 <_Z13lcd_setcursorhh+0x1a>
     232:	18 f4       	brcc	.+6      	; 0x23a <_Z13lcd_setcursorhh+0xc>
     234:	61 30       	cpi	r22, 0x01	; 1
     236:	71 f4       	brne	.+28     	; 0x254 <_Z13lcd_setcursorhh+0x26>
     238:	05 c0       	rjmp	.+10     	; 0x244 <_Z13lcd_setcursorhh+0x16>
     23a:	63 30       	cpi	r22, 0x03	; 3
     23c:	39 f0       	breq	.+14     	; 0x24c <_Z13lcd_setcursorhh+0x1e>
     23e:	64 30       	cpi	r22, 0x04	; 4
     240:	49 f4       	brne	.+18     	; 0x254 <_Z13lcd_setcursorhh+0x26>
     242:	06 c0       	rjmp	.+12     	; 0x250 <_Z13lcd_setcursorhh+0x22>
	{
		case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
     244:	80 58       	subi	r24, 0x80	; 128
		break;
     246:	05 c0       	rjmp	.+10     	; 0x252 <_Z13lcd_setcursorhh+0x24>
		
		case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
     248:	80 54       	subi	r24, 0x40	; 64
		break;
     24a:	03 c0       	rjmp	.+6      	; 0x252 <_Z13lcd_setcursorhh+0x24>
		
		case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
     24c:	80 57       	subi	r24, 0x70	; 112
		break;
     24e:	01 c0       	rjmp	.+2      	; 0x252 <_Z13lcd_setcursorhh+0x24>
		
		case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
     250:	80 53       	subi	r24, 0x30	; 48
		
		default:
		return;                                   // für den Fall einer falschen Zeile
	}
	
	lcd_command( data );
     252:	a1 df       	rcall	.-190    	; 0x196 <_Z11lcd_commandh>
     254:	08 95       	ret

00000256 <_Z10lcd_stringPKc>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	ec 01       	movw	r28, r24
	while( *data != '\0' )
     25c:	88 81       	ld	r24, Y
     25e:	88 23       	and	r24, r24
     260:	29 f0       	breq	.+10     	; 0x26c <_Z10lcd_stringPKc+0x16>
}

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
     262:	21 96       	adiw	r28, 0x01	; 1
{
	while( *data != '\0' )
	lcd_data( *data++ );
     264:	8a df       	rcall	.-236    	; 0x17a <_Z8lcd_datah>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
     266:	89 91       	ld	r24, Y+
     268:	81 11       	cpse	r24, r1
     26a:	fc cf       	rjmp	.-8      	; 0x264 <_Z10lcd_stringPKc+0xe>
	lcd_data( *data++ );
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
     272:	97 b1       	in	r25, 0x07	; 7
     274:	8f 71       	andi	r24, 0x1F	; 31
     276:	90 7e       	andi	r25, 0xE0	; 224
     278:	98 2b       	or	r25, r24
     27a:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);
     27c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
     27e:	36 99       	sbic	0x06, 6	; 6
     280:	fe cf       	rjmp	.-4      	; 0x27e <_Z8ADC_Readh+0xc>
	}
	return ADCW;
     282:	24 b1       	in	r18, 0x04	; 4
     284:	35 b1       	in	r19, 0x05	; 5
}
     286:	82 2f       	mov	r24, r18
     288:	93 2f       	mov	r25, r19
     28a:	08 95       	ret

0000028c <_Z6Weckerv>:

#ifndef ZEIT_H_
#define ZEIT_H_

void Wecker(){
	if (WochenTag!=0 && WochenTag!=6)
     28c:	80 91 ed 00 	lds	r24, 0x00ED
     290:	88 23       	and	r24, r24
     292:	91 f0       	breq	.+36     	; 0x2b8 <_Z6Weckerv+0x2c>
     294:	86 30       	cpi	r24, 0x06	; 6
     296:	81 f0       	breq	.+32     	; 0x2b8 <_Z6Weckerv+0x2c>
	{
		if(Stunden==WStunden){
     298:	90 91 ee 00 	lds	r25, 0x00EE
     29c:	80 91 ec 00 	lds	r24, 0x00EC
     2a0:	98 13       	cpse	r25, r24
     2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <_Z6Weckerv+0x2c>
			if(Minuten==WMinuten){
     2a4:	90 91 ef 00 	lds	r25, 0x00EF
     2a8:	80 91 eb 00 	lds	r24, 0x00EB
     2ac:	98 13       	cpse	r25, r24
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_Z6Weckerv+0x2c>
				Wan = 1;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 ea 00 	sts	0x00EA, r24
				PORTC |= (1<<PC5);
     2b6:	ad 9a       	sbi	0x15, 5	; 21
     2b8:	08 95       	ret

000002ba <_Z4zeitv>:
			}
		}
	}
}

void zeit(){
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
	sektemp=Sekunden;
     2ca:	80 91 f0 00 	lds	r24, 0x00F0
     2ce:	80 93 e9 00 	sts	0x00E9, r24
	if (Sekunden >= 60){
     2d2:	8c 33       	cpi	r24, 0x3C	; 60
     2d4:	08 f4       	brcc	.+2      	; 0x2d8 <_Z4zeitv+0x1e>
     2d6:	72 c0       	rjmp	.+228    	; 0x3bc <_Z4zeitv+0x102>
		//Temperatur bestimmen
		ADC_Read(0);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	cb df       	rcall	.-106    	; 0x272 <_Z8ADC_Readh>
		uint16_t adcval = ADC_Read(0);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	c9 df       	rcall	.-110    	; 0x272 <_Z8ADC_Readh>
		double span= (double)adcval*(5.0/1024.0);
     2e0:	bc 01       	movw	r22, r24
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	6a d3       	rcall	.+1748   	; 0x9bc <__floatunsisf>
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 ea       	ldi	r20, 0xA0	; 160
     2ee:	5b e3       	ldi	r21, 0x3B	; 59
     2f0:	f3 d3       	rcall	.+2022   	; 0xad8 <__mulsf3>
     2f2:	06 2f       	mov	r16, r22
     2f4:	17 2f       	mov	r17, r23
     2f6:	d8 2f       	mov	r29, r24
     2f8:	c9 2f       	mov	r28, r25
		double widerst = ((double)span*2700.0)/((double)(5-(double)span));
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 ec       	ldi	r19, 0xC0	; 192
     2fe:	48 e2       	ldi	r20, 0x28	; 40
     300:	55 e4       	ldi	r21, 0x45	; 69
     302:	ea d3       	rcall	.+2004   	; 0xad8 <__mulsf3>
     304:	6b 01       	movw	r12, r22
     306:	7c 01       	movw	r14, r24
     308:	20 2f       	mov	r18, r16
     30a:	31 2f       	mov	r19, r17
     30c:	4d 2f       	mov	r20, r29
     30e:	5c 2f       	mov	r21, r28
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 ea       	ldi	r24, 0xA0	; 160
     316:	90 e4       	ldi	r25, 0x40	; 64
     318:	84 d2       	rcall	.+1288   	; 0x822 <__subsf3>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	e4 d2       	rcall	.+1480   	; 0x8ec <__divsf3>
		tempera = (100.0/1387.0)*widerst+(50+tempoffset-(100.0/1387.0)*2417.0);
     324:	25 e2       	ldi	r18, 0x25	; 37
     326:	38 ea       	ldi	r19, 0xA8	; 168
     328:	43 e9       	ldi	r20, 0x93	; 147
     32a:	5d e3       	ldi	r21, 0x3D	; 61
     32c:	d5 d3       	rcall	.+1962   	; 0xad8 <__mulsf3>
     32e:	6b 01       	movw	r12, r22
     330:	7c 01       	movw	r14, r24
     332:	60 91 63 00 	lds	r22, 0x0063
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	6e 5c       	subi	r22, 0xCE	; 206
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	88 27       	eor	r24, r24
     33e:	77 fd       	sbrc	r23, 7
     340:	80 95       	com	r24
     342:	98 2f       	mov	r25, r24
     344:	3d d3       	rcall	.+1658   	; 0x9c0 <__floatsisf>
     346:	21 ed       	ldi	r18, 0xD1	; 209
     348:	32 e4       	ldi	r19, 0x42	; 66
     34a:	4e e2       	ldi	r20, 0x2E	; 46
     34c:	53 e4       	ldi	r21, 0x43	; 67
     34e:	69 d2       	rcall	.+1234   	; 0x822 <__subsf3>
     350:	9b 01       	movw	r18, r22
     352:	ac 01       	movw	r20, r24
     354:	c7 01       	movw	r24, r14
     356:	b6 01       	movw	r22, r12
     358:	65 d2       	rcall	.+1226   	; 0x824 <__addsf3>
     35a:	60 93 e5 00 	sts	0x00E5, r22
     35e:	70 93 e6 00 	sts	0x00E6, r23
     362:	80 93 e7 00 	sts	0x00E7, r24
     366:	90 93 e8 00 	sts	0x00E8, r25
		
		Sekunden = 0;
     36a:	10 92 f0 00 	sts	0x00F0, r1
		Minuten++;
     36e:	80 91 ef 00 	lds	r24, 0x00EF
     372:	8f 5f       	subi	r24, 0xFF	; 255
		if(Minuten >= 60){
     374:	8c 33       	cpi	r24, 0x3C	; 60
     376:	18 f4       	brcc	.+6      	; 0x37e <_Z4zeitv+0xc4>
		double span= (double)adcval*(5.0/1024.0);
		double widerst = ((double)span*2700.0)/((double)(5-(double)span));
		tempera = (100.0/1387.0)*widerst+(50+tempoffset-(100.0/1387.0)*2417.0);
		
		Sekunden = 0;
		Minuten++;
     378:	80 93 ef 00 	sts	0x00EF, r24
     37c:	07 c0       	rjmp	.+14     	; 0x38c <_Z4zeitv+0xd2>
		if(Minuten >= 60){
			Minuten = 0;
     37e:	10 92 ef 00 	sts	0x00EF, r1
			Stunden++;
     382:	80 91 ee 00 	lds	r24, 0x00EE
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 ee 00 	sts	0x00EE, r24
		}
		if(Stunden >= 24){
     38c:	80 91 ee 00 	lds	r24, 0x00EE
     390:	88 31       	cpi	r24, 0x18	; 24
     392:	a0 f0       	brcs	.+40     	; 0x3bc <_Z4zeitv+0x102>
			Stunden = 0;
     394:	10 92 ee 00 	sts	0x00EE, r1
			WochenTag++;
     398:	80 91 ed 00 	lds	r24, 0x00ED
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 93 ed 00 	sts	0x00ED, r24
			Tag++;
     3a2:	90 91 62 00 	lds	r25, 0x0062
     3a6:	9f 5f       	subi	r25, 0xFF	; 255
     3a8:	90 93 62 00 	sts	0x0062, r25
			if (WochenTag>=7)
     3ac:	87 30       	cpi	r24, 0x07	; 7
     3ae:	10 f0       	brcs	.+4      	; 0x3b4 <_Z4zeitv+0xfa>
			{
				WochenTag=0;
     3b0:	10 92 ed 00 	sts	0x00ED, r1
			{
				if (Tag==28)
				{
				}
			}*/
			Sekunden += sekoffset; //Ausgleich der VerlustSekunden
     3b4:	80 91 e4 00 	lds	r24, 0x00E4
     3b8:	80 93 f0 00 	sts	0x00F0, r24
		}
	}
	
	if(Wan==0)
     3bc:	80 91 ea 00 	lds	r24, 0x00EA
     3c0:	81 11       	cpse	r24, r1
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <_Z4zeitv+0x10c>
	{
		Wecker();
     3c4:	63 df       	rcall	.-314    	; 0x28c <_Z6Weckerv>
	}
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	df 90       	pop	r13
     3d4:	cf 90       	pop	r12
     3d6:	08 95       	ret

000003d8 <_Z4wtagh>:
		lcd_data(0b01000011); //C
	}
}

void wtag(uint8_t numm){
	switch (numm)
     3d8:	83 30       	cpi	r24, 0x03	; 3
     3da:	b9 f0       	breq	.+46     	; 0x40a <_Z4wtagh+0x32>
     3dc:	20 f4       	brcc	.+8      	; 0x3e6 <_Z4wtagh+0xe>
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	61 f0       	breq	.+24     	; 0x3fa <_Z4wtagh+0x22>
     3e2:	78 f4       	brcc	.+30     	; 0x402 <_Z4wtagh+0x2a>
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <_Z4wtagh+0x1a>
     3e6:	85 30       	cpi	r24, 0x05	; 5
     3e8:	c1 f0       	breq	.+48     	; 0x41a <_Z4wtagh+0x42>
     3ea:	98 f0       	brcs	.+38     	; 0x412 <_Z4wtagh+0x3a>
     3ec:	86 30       	cpi	r24, 0x06	; 6
     3ee:	e1 f4       	brne	.+56     	; 0x428 <_Z4wtagh+0x50>
     3f0:	18 c0       	rjmp	.+48     	; 0x422 <_Z4wtagh+0x4a>
	{
		case 0:
		lcd_string("So ");
     3f2:	84 e6       	ldi	r24, 0x64	; 100
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	2f df       	rcall	.-418    	; 0x256 <_Z10lcd_stringPKc>
		break;
     3f8:	08 95       	ret
		
		case 1:
		lcd_string("Mo ");
     3fa:	88 e6       	ldi	r24, 0x68	; 104
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	2b df       	rcall	.-426    	; 0x256 <_Z10lcd_stringPKc>
		break;
     400:	08 95       	ret
		
		case 2:
		lcd_string("Di ");
     402:	8c e6       	ldi	r24, 0x6C	; 108
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	27 df       	rcall	.-434    	; 0x256 <_Z10lcd_stringPKc>
		break;
     408:	08 95       	ret
		
		case 3:
		lcd_string("Mi ");
     40a:	80 e7       	ldi	r24, 0x70	; 112
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	23 df       	rcall	.-442    	; 0x256 <_Z10lcd_stringPKc>
		break;
     410:	08 95       	ret
		
		case 4:
		lcd_string("Do ");
     412:	84 e7       	ldi	r24, 0x74	; 116
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	1f df       	rcall	.-450    	; 0x256 <_Z10lcd_stringPKc>
		break;
     418:	08 95       	ret
		
		case 5:
		lcd_string("Fr ");
     41a:	88 e7       	ldi	r24, 0x78	; 120
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	1b df       	rcall	.-458    	; 0x256 <_Z10lcd_stringPKc>
		break;
     420:	08 95       	ret
		
		case 6:
		lcd_string("Sa ");
     422:	8c e7       	ldi	r24, 0x7C	; 124
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	17 df       	rcall	.-466    	; 0x256 <_Z10lcd_stringPKc>
     428:	08 95       	ret

0000042a <_Z11Kalenderausv>:
	}
}

void Kalenderaus(){
	//Wochentag noch nach der alten Methode
	wtag(WochenTag);
     42a:	80 91 ed 00 	lds	r24, 0x00ED
     42e:	d4 df       	rcall	.-88     	; 0x3d8 <_Z4wtagh>
	
	//Kalender als normale Tage, an sich nicht implementiert
	itoa(Tag,Buffer,10);
     430:	4a e0       	ldi	r20, 0x0A	; 10
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	60 ed       	ldi	r22, 0xD0	; 208
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	80 91 62 00 	lds	r24, 0x0062
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	cf d3       	rcall	.+1950   	; 0xbde <itoa>
	lcd_string(Buffer);
     440:	80 ed       	ldi	r24, 0xD0	; 208
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	08 df       	rcall	.-496    	; 0x256 <_Z10lcd_stringPKc>
	lcd_string(".");
     446:	87 ea       	ldi	r24, 0xA7	; 167
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	05 df       	rcall	.-502    	; 0x256 <_Z10lcd_stringPKc>
	itoa(Monat,Buffer,10);
     44c:	4a e0       	ldi	r20, 0x0A	; 10
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	60 ed       	ldi	r22, 0xD0	; 208
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	80 91 61 00 	lds	r24, 0x0061
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	c1 d3       	rcall	.+1922   	; 0xbde <itoa>
	lcd_string(Buffer);
     45c:	80 ed       	ldi	r24, 0xD0	; 208
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fa de       	rcall	.-524    	; 0x256 <_Z10lcd_stringPKc>
	lcd_string(".");
     462:	87 ea       	ldi	r24, 0xA7	; 167
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	f7 de       	rcall	.-530    	; 0x256 <_Z10lcd_stringPKc>
	itoa(Jahr,Buffer,10);
     468:	4a e0       	ldi	r20, 0x0A	; 10
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	60 ed       	ldi	r22, 0xD0	; 208
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	80 91 60 00 	lds	r24, 0x0060
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	b3 d3       	rcall	.+1894   	; 0xbde <itoa>
	lcd_string(Buffer);
     478:	80 ed       	ldi	r24, 0xD0	; 208
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	ec de       	rcall	.-552    	; 0x256 <_Z10lcd_stringPKc>
     47e:	08 95       	ret

00000480 <_Z7zeitaush>:
}

void zeitaus(uint8_t pos){
	switch (pos)
     480:	88 23       	and	r24, r24
     482:	21 f0       	breq	.+8      	; 0x48c <_Z7zeitaush+0xc>
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	09 f0       	breq	.+2      	; 0x48a <_Z7zeitaush+0xa>
     488:	42 c0       	rjmp	.+132    	; 0x50e <_Z7zeitaush+0x8e>
     48a:	1a c0       	rjmp	.+52     	; 0x4c0 <_Z7zeitaush+0x40>
	{
		case 0:
			itoa( Stunden, Buffer, 10 );
     48c:	4a e0       	ldi	r20, 0x0A	; 10
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	60 ed       	ldi	r22, 0xD0	; 208
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	80 91 ee 00 	lds	r24, 0x00EE
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	a1 d3       	rcall	.+1858   	; 0xbde <itoa>
			lcd_string(Buffer);
     49c:	80 ed       	ldi	r24, 0xD0	; 208
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	da de       	rcall	.-588    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(":");
     4a2:	80 e8       	ldi	r24, 0x80	; 128
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	d7 de       	rcall	.-594    	; 0x256 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     4a8:	4a e0       	ldi	r20, 0x0A	; 10
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 ed       	ldi	r22, 0xD0	; 208
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 91 ef 00 	lds	r24, 0x00EF
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	93 d3       	rcall	.+1830   	; 0xbde <itoa>
			lcd_string(Buffer);
     4b8:	80 ed       	ldi	r24, 0xD0	; 208
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	cc de       	rcall	.-616    	; 0x256 <_Z10lcd_stringPKc>
			
			break;
     4be:	08 95       	ret
		
		case 1:
			itoa( Stunden, Buffer, 10 );
     4c0:	4a e0       	ldi	r20, 0x0A	; 10
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 ed       	ldi	r22, 0xD0	; 208
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	80 91 ee 00 	lds	r24, 0x00EE
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	87 d3       	rcall	.+1806   	; 0xbde <itoa>
			lcd_string(Buffer);
     4d0:	80 ed       	ldi	r24, 0xD0	; 208
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	c0 de       	rcall	.-640    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(":");
     4d6:	80 e8       	ldi	r24, 0x80	; 128
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	bd de       	rcall	.-646    	; 0x256 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     4dc:	4a e0       	ldi	r20, 0x0A	; 10
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 ed       	ldi	r22, 0xD0	; 208
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	80 91 ef 00 	lds	r24, 0x00EF
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	79 d3       	rcall	.+1778   	; 0xbde <itoa>
			lcd_string(Buffer);
     4ec:	80 ed       	ldi	r24, 0xD0	; 208
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	b2 de       	rcall	.-668    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(":");
     4f2:	80 e8       	ldi	r24, 0x80	; 128
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	af de       	rcall	.-674    	; 0x256 <_Z10lcd_stringPKc>
			itoa(Sekunden, Buffer,10);
     4f8:	4a e0       	ldi	r20, 0x0A	; 10
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	60 ed       	ldi	r22, 0xD0	; 208
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 91 f0 00 	lds	r24, 0x00F0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	6b d3       	rcall	.+1750   	; 0xbde <itoa>
			lcd_string(Buffer);
     508:	80 ed       	ldi	r24, 0xD0	; 208
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	a4 de       	rcall	.-696    	; 0x256 <_Z10lcd_stringPKc>
     50e:	08 95       	ret

00000510 <_Z3aushh>:
		default:
		break;
	}
}

void aus(uint8_t zeile, uint8_t pos){
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	c6 2f       	mov	r28, r22
	
	switch (zeile)
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	21 f0       	breq	.+8      	; 0x524 <_Z3aushh+0x14>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	09 f0       	breq	.+2      	; 0x522 <_Z3aushh+0x12>
     520:	62 c0       	rjmp	.+196    	; 0x5e6 <_Z3aushh+0xd6>
     522:	49 c0       	rjmp	.+146    	; 0x5b6 <_Z3aushh+0xa6>
	{
		case 1:
			lcd_clear();
     524:	46 de       	rcall	.-884    	; 0x1b2 <_Z9lcd_clearv>
			lcd_home();
     526:	7c de       	rcall	.-776    	; 0x220 <_Z8lcd_homev>
			switch (pos)
     528:	c2 30       	cpi	r28, 0x02	; 2
     52a:	e1 f0       	breq	.+56     	; 0x564 <_Z3aushh+0x54>
     52c:	30 f4       	brcc	.+12     	; 0x53a <_Z3aushh+0x2a>
     52e:	cc 23       	and	r28, r28
     530:	59 f0       	breq	.+22     	; 0x548 <_Z3aushh+0x38>
     532:	c1 30       	cpi	r28, 0x01	; 1
     534:	09 f0       	breq	.+2      	; 0x538 <_Z3aushh+0x28>
     536:	57 c0       	rjmp	.+174    	; 0x5e6 <_Z3aushh+0xd6>
     538:	0e c0       	rjmp	.+28     	; 0x556 <_Z3aushh+0x46>
     53a:	c4 30       	cpi	r28, 0x04	; 4
     53c:	c1 f0       	breq	.+48     	; 0x56e <_Z3aushh+0x5e>
     53e:	a0 f0       	brcs	.+40     	; 0x568 <_Z3aushh+0x58>
     540:	c5 30       	cpi	r28, 0x05	; 5
     542:	09 f0       	breq	.+2      	; 0x546 <_Z3aushh+0x36>
     544:	50 c0       	rjmp	.+160    	; 0x5e6 <_Z3aushh+0xd6>
     546:	1d c0       	rjmp	.+58     	; 0x582 <_Z3aushh+0x72>
			{
				case 0:
					//Alles ohne Sekunden
					Kalenderaus();
     548:	70 df       	rcall	.-288    	; 0x42a <_Z11Kalenderausv>
					lcd_string(" ");
     54a:	8e e7       	ldi	r24, 0x7E	; 126
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	83 de       	rcall	.-762    	; 0x256 <_Z10lcd_stringPKc>
					zeitaus(0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	96 df       	rcall	.-212    	; 0x480 <_Z7zeitaush>
					
					break;
     554:	48 c0       	rjmp	.+144    	; 0x5e6 <_Z3aushh+0xd6>
					
				case 1:
					//Alles
					Kalenderaus();
     556:	69 df       	rcall	.-302    	; 0x42a <_Z11Kalenderausv>
					lcd_string(" ");
     558:	8e e7       	ldi	r24, 0x7E	; 126
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	7c de       	rcall	.-776    	; 0x256 <_Z10lcd_stringPKc>
					zeitaus(1);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	8f df       	rcall	.-226    	; 0x480 <_Z7zeitaush>
					
					break;
     562:	41 c0       	rjmp	.+130    	; 0x5e6 <_Z3aushh+0xd6>
				case 2:
					//Nur Kalender
					Kalenderaus();
     564:	62 df       	rcall	.-316    	; 0x42a <_Z11Kalenderausv>
					
					break;
     566:	3f c0       	rjmp	.+126    	; 0x5e6 <_Z3aushh+0xd6>
				case 3:
					//Nur Zeit ohne Sekunden
					zeitaus(0);
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	8a df       	rcall	.-236    	; 0x480 <_Z7zeitaush>
					
					break;
     56c:	3c c0       	rjmp	.+120    	; 0x5e6 <_Z3aushh+0xd6>
					
				case 4:
					lcd_string("Guten Tag");
     56e:	89 ea       	ldi	r24, 0xA9	; 169
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	71 de       	rcall	.-798    	; 0x256 <_Z10lcd_stringPKc>
					lcd_setcursor(0,2);
     574:	62 e0       	ldi	r22, 0x02	; 2
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	5a de       	rcall	.-844    	; 0x22e <_Z13lcd_setcursorhh>
					lcd_string("Wecker einstellen");
     57a:	83 eb       	ldi	r24, 0xB3	; 179
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	6b de       	rcall	.-810    	; 0x256 <_Z10lcd_stringPKc>
					
					break;
     580:	32 c0       	rjmp	.+100    	; 0x5e6 <_Z3aushh+0xd6>
				
				case 5:
					itoa(WStunden,Buffer,10);
     582:	4a e0       	ldi	r20, 0x0A	; 10
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 ed       	ldi	r22, 0xD0	; 208
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 91 ec 00 	lds	r24, 0x00EC
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	26 d3       	rcall	.+1612   	; 0xbde <itoa>
					lcd_string(Buffer);
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	5f de       	rcall	.-834    	; 0x256 <_Z10lcd_stringPKc>
					lcd_string(":");
     598:	80 e8       	ldi	r24, 0x80	; 128
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	5c de       	rcall	.-840    	; 0x256 <_Z10lcd_stringPKc>
					itoa(WMinuten,Buffer,10);
     59e:	4a e0       	ldi	r20, 0x0A	; 10
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 ed       	ldi	r22, 0xD0	; 208
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 91 eb 00 	lds	r24, 0x00EB
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	18 d3       	rcall	.+1584   	; 0xbde <itoa>
					lcd_string(Buffer);
     5ae:	80 ed       	ldi	r24, 0xD0	; 208
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	51 de       	rcall	.-862    	; 0x256 <_Z10lcd_stringPKc>
					
					break;
     5b4:	18 c0       	rjmp	.+48     	; 0x5e6 <_Z3aushh+0xd6>
			}
			break;
			
		case 2:
			lcd_setcursor(0,2);
     5b6:	62 e0       	ldi	r22, 0x02	; 2
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	39 de       	rcall	.-910    	; 0x22e <_Z13lcd_setcursorhh>
				switch (pos)
     5bc:	c1 30       	cpi	r28, 0x01	; 1
     5be:	99 f4       	brne	.+38     	; 0x5e6 <_Z3aushh+0xd6>
					
						break;
						
					case 1:
						//Temperatur
						dtostrf(tempera,2,2,Buffer);
     5c0:	60 91 e5 00 	lds	r22, 0x00E5
     5c4:	70 91 e6 00 	lds	r23, 0x00E6
     5c8:	80 91 e7 00 	lds	r24, 0x00E7
     5cc:	90 91 e8 00 	lds	r25, 0x00E8
     5d0:	00 ed       	ldi	r16, 0xD0	; 208
     5d2:	10 e0       	ldi	r17, 0x00	; 0
     5d4:	22 e0       	ldi	r18, 0x02	; 2
     5d6:	42 e0       	ldi	r20, 0x02	; 2
     5d8:	e2 d2       	rcall	.+1476   	; 0xb9e <dtostrf>
						lcd_string(Buffer);
     5da:	c8 01       	movw	r24, r16
     5dc:	3c de       	rcall	.-904    	; 0x256 <_Z10lcd_stringPKc>
						lcd_data(0b11011111); //°
     5de:	8f ed       	ldi	r24, 0xDF	; 223
     5e0:	cc dd       	rcall	.-1128   	; 0x17a <_Z8lcd_datah>
						lcd_data(0b01000011); //C
     5e2:	83 e4       	ldi	r24, 0x43	; 67
     5e4:	ca dd       	rcall	.-1132   	; 0x17a <_Z8lcd_datah>
						
						break;
				}
			break;
	}
}
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <_Z8erhoehenPhhhPKc>:
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	e9 01       	movw	r28, r18

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     5f4:	83 99       	sbic	0x10, 3	; 16
     5f6:	1f c0       	rjmp	.+62     	; 0x636 <_Z8erhoehenPhhhPKc+0x48>
     5f8:	ef ef       	ldi	r30, 0xFF	; 255
     5fa:	f3 eb       	ldi	r31, 0xB3	; 179
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <_Z8erhoehenPhhhPKc+0xe>
     600:	00 c0       	rjmp	.+0      	; 0x602 <_Z8erhoehenPhhhPKc+0x14>
     602:	00 00       	nop
	if(debounce(&PIND,3))
     604:	83 99       	sbic	0x10, 3	; 16
     606:	17 c0       	rjmp	.+46     	; 0x636 <_Z8erhoehenPhhhPKc+0x48>
	{
		*var+=1;
     608:	fc 01       	movw	r30, r24
     60a:	20 81       	ld	r18, Z
     60c:	2f 5f       	subi	r18, 0xFF	; 255
		if(*var>=obergrenze){
     60e:	26 17       	cp	r18, r22
     610:	10 f4       	brcc	.+4      	; 0x616 <_Z8erhoehenPhhhPKc+0x28>
//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
	if(debounce(&PIND,3))
	{
		*var+=1;
     612:	20 83       	st	Z, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <_Z8erhoehenPhhhPKc+0x2c>
		if(*var>=obergrenze){
			*var=0;
     616:	fc 01       	movw	r30, r24
     618:	10 82       	st	Z, r1
		}
		aus(1,pos);
     61a:	64 2f       	mov	r22, r20
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	78 df       	rcall	.-272    	; 0x510 <_Z3aushh>
		aus(2,0);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	75 df       	rcall	.-278    	; 0x510 <_Z3aushh>
		while( *data != '\0' )
     626:	88 81       	ld	r24, Y
     628:	88 23       	and	r24, r24
     62a:	29 f0       	breq	.+10     	; 0x636 <_Z8erhoehenPhhhPKc+0x48>
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     62c:	21 96       	adiw	r28, 0x01	; 1
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
		lcd_data( *data++ );
     62e:	a5 dd       	rcall	.-1206   	; 0x17a <_Z8lcd_datah>
		if(*var>=obergrenze){
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
     630:	89 91       	ld	r24, Y+
     632:	81 11       	cpse	r24, r1
     634:	fc cf       	rjmp	.-8      	; 0x62e <_Z8erhoehenPhhhPKc+0x40>
		lcd_data( *data++ );
		
	}
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <_Z5einsth>:


//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
     63c:	cf 93       	push	r28
	uint8_t temp=0;
	//abfrage wass eingestellt werden soll
	switch (posit){
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	79 f0       	breq	.+30     	; 0x660 <_Z5einsth+0x24>
     642:	30 f4       	brcc	.+12     	; 0x650 <_Z5einsth+0x14>
     644:	88 23       	and	r24, r24
     646:	51 f0       	breq	.+20     	; 0x65c <_Z5einsth+0x20>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	09 f0       	breq	.+2      	; 0x64e <_Z5einsth+0x12>
     64c:	71 c0       	rjmp	.+226    	; 0x730 <_Z5einsth+0xf4>
     64e:	07 c0       	rjmp	.+14     	; 0x65e <_Z5einsth+0x22>
     650:	83 30       	cpi	r24, 0x03	; 3
     652:	61 f1       	breq	.+88     	; 0x6ac <_Z5einsth+0x70>
     654:	84 30       	cpi	r24, 0x04	; 4
     656:	09 f0       	breq	.+2      	; 0x65a <_Z5einsth+0x1e>
     658:	6b c0       	rjmp	.+214    	; 0x730 <_Z5einsth+0xf4>
     65a:	41 c0       	rjmp	.+130    	; 0x6de <_Z5einsth+0xa2>
     65c:	ff cf       	rjmp	.-2      	; 0x65c <_Z5einsth+0x20>
     65e:	ff cf       	rjmp	.-2      	; 0x65e <_Z5einsth+0x22>
     660:	83 99       	sbic	0x10, 3	; 16
     662:	08 c0       	rjmp	.+16     	; 0x674 <_Z5einsth+0x38>
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	93 eb       	ldi	r25, 0xB3	; 179
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <_Z5einsth+0x2c>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <_Z5einsth+0x32>
     66e:	00 00       	nop
		return 0;
		break;
	case 2:
		//Einstellen Sekundenoffset
		//default =0
		while(debounce(&PIND,3));
     670:	83 9b       	sbis	0x10, 3	; 16
     672:	f6 cf       	rjmp	.-20     	; 0x660 <_Z5einsth+0x24>
		{
			if(Sekunden!=sektemp){
     674:	90 91 f0 00 	lds	r25, 0x00F0
     678:	80 91 e9 00 	lds	r24, 0x00E9
     67c:	98 13       	cpse	r25, r24
				zeit();
     67e:	1d de       	rcall	.-966    	; 0x2ba <_Z4zeitv>
     680:	83 99       	sbic	0x10, 3	; 16
     682:	58 c0       	rjmp	.+176    	; 0x734 <_Z5einsth+0xf8>
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	93 eb       	ldi	r25, 0xB3	; 179
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <_Z5einsth+0x4c>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <_Z5einsth+0x52>
     68e:	00 00       	nop
				//ausgabe(0);
			}
			if(debounce(&PIND,3)){
     690:	83 99       	sbic	0x10, 3	; 16
     692:	52 c0       	rjmp	.+164    	; 0x738 <_Z5einsth+0xfc>
				sekoffset++;
     694:	80 91 e4 00 	lds	r24, 0x00E4
     698:	8f 5f       	subi	r24, 0xFF	; 255
     69a:	80 93 e4 00 	sts	0x00E4, r24
				if (sekoffset==10)
     69e:	8a 30       	cpi	r24, 0x0A	; 10
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <_Z5einsth+0x68>
     6a2:	4c c0       	rjmp	.+152    	; 0x73c <_Z5einsth+0x100>
				{
					sekoffset=0;
     6a4:	10 92 e4 00 	sts	0x00E4, r1
				}
					
			}
		}
		return 0;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	49 c0       	rjmp	.+146    	; 0x73e <_Z5einsth+0x102>
     6ac:	83 99       	sbic	0x10, 3	; 16
     6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <_Z5einsth+0x84>
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	93 eb       	ldi	r25, 0xB3	; 179
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <_Z5einsth+0x78>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <_Z5einsth+0x7e>
     6ba:	00 00       	nop
		break;
	case 3:
		//Einstellen Temperaturoffset
		//default = 0;
		while(debounce(&PIND,3));
     6bc:	83 9b       	sbis	0x10, 3	; 16
     6be:	f6 cf       	rjmp	.-20     	; 0x6ac <_Z5einsth+0x70>
		{
			if(Sekunden!=sektemp){
     6c0:	90 91 f0 00 	lds	r25, 0x00F0
     6c4:	80 91 e9 00 	lds	r24, 0x00E9
     6c8:	98 13       	cpse	r25, r24
				zeit();
     6ca:	f7 dd       	rcall	.-1042   	; 0x2ba <_Z4zeitv>
				//ausgabe(0);
			}
			erhoehen(&tempoffset,10,3,NAME(tempoffset));
     6cc:	25 ec       	ldi	r18, 0xC5	; 197
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	43 e0       	ldi	r20, 0x03	; 3
     6d2:	6a e0       	ldi	r22, 0x0A	; 10
     6d4:	83 e6       	ldi	r24, 0x63	; 99
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	8a df       	rcall	.-236    	; 0x5ee <_Z8erhoehenPhhhPKc>
		}
		return 0;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	30 c0       	rjmp	.+96     	; 0x73e <_Z5einsth+0x102>
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
	uint8_t temp=0;
	//abfrage wass eingestellt werden soll
	switch (posit){
     6de:	c0 e0       	ldi	r28, 0x00	; 0
		break;
	case 4: //Wecker einstellen
		temp = 0;
		while (temp<2)
		{
			if (Sekunden!=sektemp)
     6e0:	90 91 f0 00 	lds	r25, 0x00F0
     6e4:	80 91 e9 00 	lds	r24, 0x00E9
     6e8:	98 13       	cpse	r25, r24
			{
				zeit();
     6ea:	e7 dd       	rcall	.-1074   	; 0x2ba <_Z4zeitv>
     6ec:	82 99       	sbic	0x10, 2	; 16
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <_Z5einsth+0xc2>
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	93 eb       	ldi	r25, 0xB3	; 179
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <_Z5einsth+0xb8>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <_Z5einsth+0xbe>
     6fa:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		//_delay_ms(50);   // beachten, vgl. Dokumentation der avr-libc
		if ( !(*port & (1 << pin)) )
     6fc:	80 b3       	in	r24, 0x10	; 16
			}
			if(debounce(&PIND,2));{
				temp++;
     6fe:	cf 5f       	subi	r28, 0xFF	; 255
			}
			switch (temp)
     700:	19 f0       	breq	.+6      	; 0x708 <_Z5einsth+0xcc>
     702:	c1 30       	cpi	r28, 0x01	; 1
     704:	89 f4       	brne	.+34     	; 0x728 <_Z5einsth+0xec>
     706:	08 c0       	rjmp	.+16     	; 0x718 <_Z5einsth+0xdc>
			{
				case 0:
					erhoehen(&WStunden,60,5,NAME(WStunden));
     708:	22 e8       	ldi	r18, 0x82	; 130
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	45 e0       	ldi	r20, 0x05	; 5
     70e:	6c e3       	ldi	r22, 0x3C	; 60
     710:	8c ee       	ldi	r24, 0xEC	; 236
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	6c df       	rcall	.-296    	; 0x5ee <_Z8erhoehenPhhhPKc>
					break;
     716:	e4 cf       	rjmp	.-56     	; 0x6e0 <_Z5einsth+0xa4>
				case 1:
					erhoehen(&WMinuten,24,5,NAME(WMinuten));
     718:	2b e8       	ldi	r18, 0x8B	; 139
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	45 e0       	ldi	r20, 0x05	; 5
     71e:	68 e1       	ldi	r22, 0x18	; 24
     720:	8b ee       	ldi	r24, 0xEB	; 235
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	64 df       	rcall	.-312    	; 0x5ee <_Z8erhoehenPhhhPKc>
					break;
     726:	dc cf       	rjmp	.-72     	; 0x6e0 <_Z5einsth+0xa4>
		}
		return 0;
		break;
	case 4: //Wecker einstellen
		temp = 0;
		while (temp<2)
     728:	c2 30       	cpi	r28, 0x02	; 2
     72a:	d0 f2       	brcs	.-76     	; 0x6e0 <_Z5einsth+0xa4>
					erhoehen(&WMinuten,24,5,NAME(WMinuten));
					break;
			}
			
		}
		return 0;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	07 c0       	rjmp	.+14     	; 0x73e <_Z5einsth+0x102>
		break;
//	case //alle einstellungen der Wecker
//		return 0;
//		break;
	default:
		return 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	05 c0       	rjmp	.+10     	; 0x73e <_Z5einsth+0x102>
					sekoffset=0;
				}
					
			}
		}
		return 0;
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	03 c0       	rjmp	.+6      	; 0x73e <_Z5einsth+0x102>
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	01 c0       	rjmp	.+2      	; 0x73e <_Z5einsth+0x102>
     73c:	80 e0       	ldi	r24, 0x00	; 0
//		break;
	default:
		return 1;
		break;
	}
}
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <_Z10zeitsetzenv>:

#ifndef EINSTELLUNGEN_H_
#define EINSTELLUNGEN_H_

void zeitsetzen(){
	Minuten = 34;
     742:	82 e2       	ldi	r24, 0x22	; 34
     744:	80 93 ef 00 	sts	0x00EF, r24
	Stunden	= 5;
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	80 93 ee 00 	sts	0x00EE, r24
	Sekunden = 50;
     74e:	92 e3       	ldi	r25, 0x32	; 50
     750:	90 93 f0 00 	sts	0x00F0, r25
	WochenTag=6;
     754:	96 e0       	ldi	r25, 0x06	; 6
     756:	90 93 ed 00 	sts	0x00ED, r25
	WStunden=5;
     75a:	80 93 ec 00 	sts	0x00EC, r24
	WMinuten=35;
     75e:	83 e2       	ldi	r24, 0x23	; 35
     760:	80 93 eb 00 	sts	0x00EB, r24
//	einsweck();
//	einstzeit();
	einst(4);
     764:	84 e0       	ldi	r24, 0x04	; 4
     766:	6a df       	rcall	.-300    	; 0x63c <_Z5einsth>
	einst(1);
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	68 df       	rcall	.-304    	; 0x63c <_Z5einsth>
	einst(0);
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	66 df       	rcall	.-308    	; 0x63c <_Z5einsth>
     770:	08 95       	ret

00000772 <_Z4initv>:
}

void init(){
	//LCD einstellen und erste Ausgabe
	lcd_init();
     772:	26 dd       	rcall	.-1460   	; 0x1c0 <_Z8lcd_initv>
	aus(1,4);
     774:	64 e0       	ldi	r22, 0x04	; 4
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	cb de       	rcall	.-618    	; 0x510 <_Z3aushh>
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	8f ed       	ldi	r24, 0xDF	; 223
     77e:	90 e1       	ldi	r25, 0x10	; 16
     780:	21 50       	subi	r18, 0x01	; 1
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	90 40       	sbci	r25, 0x00	; 0
     786:	e1 f7       	brne	.-8      	; 0x780 <_Z4initv+0xe>
     788:	00 c0       	rjmp	.+0      	; 0x78a <_Z4initv+0x18>
     78a:	00 00       	nop
	//lcd_string("Wecker");
	//lcd_setcursor( 0, 2 );
	//lcd_string("Start!");
	_delay_ms(1500);
	lcd_clear();
     78c:	12 dd       	rcall	.-1500   	; 0x1b2 <_Z9lcd_clearv>
	//SPCR = (1<<SPE) | (1<<MSTR) | (1<<DORD);
	//SPSR = (1<<SPI2X);
	//SPDR = 0;
	
	//ADC
	ADMUX = (1<<REFS0);
     78e:	80 e4       	ldi	r24, 0x40	; 64
     790:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);
     796:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);
     798:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
     79a:	36 99       	sbic	0x06, 6	; 6
     79c:	fe cf       	rjmp	.-4      	; 0x79a <_Z4initv+0x28>
	}
	(void) ADCW;
     79e:	84 b1       	in	r24, 0x04	; 4
     7a0:	95 b1       	in	r25, 0x05	; 5
	
	//Eingänge
	PORTD |= (1<<PD2) | (1<<PD3);
     7a2:	82 b3       	in	r24, 0x12	; 18
     7a4:	8c 60       	ori	r24, 0x0C	; 12
     7a6:	82 bb       	out	0x12, r24	; 18
	
	//Ausgänge
	DDRC = (1<<PC5);
     7a8:	80 e2       	ldi	r24, 0x20	; 32
     7aa:	84 bb       	out	0x14, r24	; 20
	
	//erste zeiteinstellung
	zeitsetzen();
     7ac:	ca df       	rcall	.-108    	; 0x742 <_Z10zeitsetzenv>
	
	//Timer 1 Einstelungen
	TCNT1H = 0b11110001;
     7ae:	81 ef       	ldi	r24, 0xF1	; 241
     7b0:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
     7b2:	80 ef       	ldi	r24, 0xF0	; 240
     7b4:	8c bd       	out	0x2c, r24	; 44
	TIMSK = (1<<TOIE1);
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	89 bf       	out	0x39, r24	; 57
	TCCR1B = (1<<CS10) | (1<<CS12);
     7ba:	85 e0       	ldi	r24, 0x05	; 5
     7bc:	8e bd       	out	0x2e, r24	; 46
	
	//Interupts aktivieren
	sei();
     7be:	78 94       	sei
	
	//Wecker einschalten
	Wan=0;
     7c0:	10 92 ea 00 	sts	0x00EA, r1
     7c4:	08 95       	ret

000007c6 <__vector_8>:
#include "einstellungen.h"
#include "zeit.h"
#include "menue.h"
#include "ausgabe.h"

ISR(TIMER1_OVF_vect){
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	8f 93       	push	r24
	TCNT1H = 0b11110001;
     7d2:	81 ef       	ldi	r24, 0xF1	; 241
     7d4:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
     7d6:	80 ef       	ldi	r24, 0xF0	; 240
     7d8:	8c bd       	out	0x2c, r24	; 44
	Sekunden++;
     7da:	80 91 f0 00 	lds	r24, 0x00F0
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 f0 00 	sts	0x00F0, r24
}
     7e4:	8f 91       	pop	r24
     7e6:	0f 90       	pop	r0
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	18 95       	reti

000007f0 <main>:

int main(void)
{
	init();
     7f0:	c0 df       	rcall	.-128    	; 0x772 <_Z4initv>
	
	while(1)
	{
		if (Sekunden!=sektemp)
     7f2:	90 91 f0 00 	lds	r25, 0x00F0
     7f6:	80 91 e9 00 	lds	r24, 0x00E9
     7fa:	98 17       	cp	r25, r24
     7fc:	21 f0       	breq	.+8      	; 0x806 <main+0x16>
		{
			zeit();
     7fe:	5d dd       	rcall	.-1350   	; 0x2ba <_Z4zeitv>
			aus(1,0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	85 de       	rcall	.-758    	; 0x510 <_Z3aushh>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     806:	82 99       	sbic	0x10, 2	; 16
     808:	f4 cf       	rjmp	.-24     	; 0x7f2 <main+0x2>
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	93 eb       	ldi	r25, 0xB3	; 179
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <main+0x1e>
     812:	00 c0       	rjmp	.+0      	; 0x814 <main+0x24>
     814:	00 00       	nop
			//ausgabe(1);
		}
		if(debounce(&PIND,2))
     816:	82 99       	sbic	0x10, 2	; 16
     818:	ec cf       	rjmp	.-40     	; 0x7f2 <main+0x2>
		{
			Wan=0;
     81a:	10 92 ea 00 	sts	0x00EA, r1
			PORTC &= ~(1<<PC5);
     81e:	ad 98       	cbi	0x15, 5	; 21
     820:	e8 cf       	rjmp	.-48     	; 0x7f2 <main+0x2>

00000822 <__subsf3>:
     822:	50 58       	subi	r21, 0x80	; 128

00000824 <__addsf3>:
     824:	bb 27       	eor	r27, r27
     826:	aa 27       	eor	r26, r26
     828:	0e d0       	rcall	.+28     	; 0x846 <__addsf3x>
     82a:	1c c1       	rjmp	.+568    	; 0xa64 <__fp_round>
     82c:	0d d1       	rcall	.+538    	; 0xa48 <__fp_pscA>
     82e:	30 f0       	brcs	.+12     	; 0x83c <__addsf3+0x18>
     830:	12 d1       	rcall	.+548    	; 0xa56 <__fp_pscB>
     832:	20 f0       	brcs	.+8      	; 0x83c <__addsf3+0x18>
     834:	31 f4       	brne	.+12     	; 0x842 <__addsf3+0x1e>
     836:	9f 3f       	cpi	r25, 0xFF	; 255
     838:	11 f4       	brne	.+4      	; 0x83e <__addsf3+0x1a>
     83a:	1e f4       	brtc	.+6      	; 0x842 <__addsf3+0x1e>
     83c:	02 c1       	rjmp	.+516    	; 0xa42 <__fp_nan>
     83e:	0e f4       	brtc	.+2      	; 0x842 <__addsf3+0x1e>
     840:	e0 95       	com	r30
     842:	e7 fb       	bst	r30, 7
     844:	f8 c0       	rjmp	.+496    	; 0xa36 <__fp_inf>

00000846 <__addsf3x>:
     846:	e9 2f       	mov	r30, r25
     848:	1e d1       	rcall	.+572    	; 0xa86 <__fp_split3>
     84a:	80 f3       	brcs	.-32     	; 0x82c <__addsf3+0x8>
     84c:	ba 17       	cp	r27, r26
     84e:	62 07       	cpc	r22, r18
     850:	73 07       	cpc	r23, r19
     852:	84 07       	cpc	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	18 f0       	brcs	.+6      	; 0x85e <__addsf3x+0x18>
     858:	71 f4       	brne	.+28     	; 0x876 <__addsf3x+0x30>
     85a:	9e f5       	brtc	.+102    	; 0x8c2 <__addsf3x+0x7c>
     85c:	36 c1       	rjmp	.+620    	; 0xaca <__fp_zero>
     85e:	0e f4       	brtc	.+2      	; 0x862 <__addsf3x+0x1c>
     860:	e0 95       	com	r30
     862:	0b 2e       	mov	r0, r27
     864:	ba 2f       	mov	r27, r26
     866:	a0 2d       	mov	r26, r0
     868:	0b 01       	movw	r0, r22
     86a:	b9 01       	movw	r22, r18
     86c:	90 01       	movw	r18, r0
     86e:	0c 01       	movw	r0, r24
     870:	ca 01       	movw	r24, r20
     872:	a0 01       	movw	r20, r0
     874:	11 24       	eor	r1, r1
     876:	ff 27       	eor	r31, r31
     878:	59 1b       	sub	r21, r25
     87a:	99 f0       	breq	.+38     	; 0x8a2 <__addsf3x+0x5c>
     87c:	59 3f       	cpi	r21, 0xF9	; 249
     87e:	50 f4       	brcc	.+20     	; 0x894 <__addsf3x+0x4e>
     880:	50 3e       	cpi	r21, 0xE0	; 224
     882:	68 f1       	brcs	.+90     	; 0x8de <__addsf3x+0x98>
     884:	1a 16       	cp	r1, r26
     886:	f0 40       	sbci	r31, 0x00	; 0
     888:	a2 2f       	mov	r26, r18
     88a:	23 2f       	mov	r18, r19
     88c:	34 2f       	mov	r19, r20
     88e:	44 27       	eor	r20, r20
     890:	58 5f       	subi	r21, 0xF8	; 248
     892:	f3 cf       	rjmp	.-26     	; 0x87a <__addsf3x+0x34>
     894:	46 95       	lsr	r20
     896:	37 95       	ror	r19
     898:	27 95       	ror	r18
     89a:	a7 95       	ror	r26
     89c:	f0 40       	sbci	r31, 0x00	; 0
     89e:	53 95       	inc	r21
     8a0:	c9 f7       	brne	.-14     	; 0x894 <__addsf3x+0x4e>
     8a2:	7e f4       	brtc	.+30     	; 0x8c2 <__addsf3x+0x7c>
     8a4:	1f 16       	cp	r1, r31
     8a6:	ba 0b       	sbc	r27, r26
     8a8:	62 0b       	sbc	r22, r18
     8aa:	73 0b       	sbc	r23, r19
     8ac:	84 0b       	sbc	r24, r20
     8ae:	ba f0       	brmi	.+46     	; 0x8de <__addsf3x+0x98>
     8b0:	91 50       	subi	r25, 0x01	; 1
     8b2:	a1 f0       	breq	.+40     	; 0x8dc <__addsf3x+0x96>
     8b4:	ff 0f       	add	r31, r31
     8b6:	bb 1f       	adc	r27, r27
     8b8:	66 1f       	adc	r22, r22
     8ba:	77 1f       	adc	r23, r23
     8bc:	88 1f       	adc	r24, r24
     8be:	c2 f7       	brpl	.-16     	; 0x8b0 <__addsf3x+0x6a>
     8c0:	0e c0       	rjmp	.+28     	; 0x8de <__addsf3x+0x98>
     8c2:	ba 0f       	add	r27, r26
     8c4:	62 1f       	adc	r22, r18
     8c6:	73 1f       	adc	r23, r19
     8c8:	84 1f       	adc	r24, r20
     8ca:	48 f4       	brcc	.+18     	; 0x8de <__addsf3x+0x98>
     8cc:	87 95       	ror	r24
     8ce:	77 95       	ror	r23
     8d0:	67 95       	ror	r22
     8d2:	b7 95       	ror	r27
     8d4:	f7 95       	ror	r31
     8d6:	9e 3f       	cpi	r25, 0xFE	; 254
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <__addsf3x+0x96>
     8da:	b3 cf       	rjmp	.-154    	; 0x842 <__addsf3+0x1e>
     8dc:	93 95       	inc	r25
     8de:	88 0f       	add	r24, r24
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__addsf3x+0x9e>
     8e2:	99 27       	eor	r25, r25
     8e4:	ee 0f       	add	r30, r30
     8e6:	97 95       	ror	r25
     8e8:	87 95       	ror	r24
     8ea:	08 95       	ret

000008ec <__divsf3>:
     8ec:	0c d0       	rcall	.+24     	; 0x906 <__divsf3x>
     8ee:	ba c0       	rjmp	.+372    	; 0xa64 <__fp_round>
     8f0:	b2 d0       	rcall	.+356    	; 0xa56 <__fp_pscB>
     8f2:	40 f0       	brcs	.+16     	; 0x904 <__divsf3+0x18>
     8f4:	a9 d0       	rcall	.+338    	; 0xa48 <__fp_pscA>
     8f6:	30 f0       	brcs	.+12     	; 0x904 <__divsf3+0x18>
     8f8:	21 f4       	brne	.+8      	; 0x902 <__divsf3+0x16>
     8fa:	5f 3f       	cpi	r21, 0xFF	; 255
     8fc:	19 f0       	breq	.+6      	; 0x904 <__divsf3+0x18>
     8fe:	9b c0       	rjmp	.+310    	; 0xa36 <__fp_inf>
     900:	51 11       	cpse	r21, r1
     902:	e4 c0       	rjmp	.+456    	; 0xacc <__fp_szero>
     904:	9e c0       	rjmp	.+316    	; 0xa42 <__fp_nan>

00000906 <__divsf3x>:
     906:	bf d0       	rcall	.+382    	; 0xa86 <__fp_split3>
     908:	98 f3       	brcs	.-26     	; 0x8f0 <__divsf3+0x4>

0000090a <__divsf3_pse>:
     90a:	99 23       	and	r25, r25
     90c:	c9 f3       	breq	.-14     	; 0x900 <__divsf3+0x14>
     90e:	55 23       	and	r21, r21
     910:	b1 f3       	breq	.-20     	; 0x8fe <__divsf3+0x12>
     912:	95 1b       	sub	r25, r21
     914:	55 0b       	sbc	r21, r21
     916:	bb 27       	eor	r27, r27
     918:	aa 27       	eor	r26, r26
     91a:	62 17       	cp	r22, r18
     91c:	73 07       	cpc	r23, r19
     91e:	84 07       	cpc	r24, r20
     920:	38 f0       	brcs	.+14     	; 0x930 <__divsf3_pse+0x26>
     922:	9f 5f       	subi	r25, 0xFF	; 255
     924:	5f 4f       	sbci	r21, 0xFF	; 255
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	44 1f       	adc	r20, r20
     92c:	aa 1f       	adc	r26, r26
     92e:	a9 f3       	breq	.-22     	; 0x91a <__divsf3_pse+0x10>
     930:	33 d0       	rcall	.+102    	; 0x998 <__divsf3_pse+0x8e>
     932:	0e 2e       	mov	r0, r30
     934:	3a f0       	brmi	.+14     	; 0x944 <__divsf3_pse+0x3a>
     936:	e0 e8       	ldi	r30, 0x80	; 128
     938:	30 d0       	rcall	.+96     	; 0x99a <__divsf3_pse+0x90>
     93a:	91 50       	subi	r25, 0x01	; 1
     93c:	50 40       	sbci	r21, 0x00	; 0
     93e:	e6 95       	lsr	r30
     940:	00 1c       	adc	r0, r0
     942:	ca f7       	brpl	.-14     	; 0x936 <__divsf3_pse+0x2c>
     944:	29 d0       	rcall	.+82     	; 0x998 <__divsf3_pse+0x8e>
     946:	fe 2f       	mov	r31, r30
     948:	27 d0       	rcall	.+78     	; 0x998 <__divsf3_pse+0x8e>
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	88 1f       	adc	r24, r24
     950:	bb 1f       	adc	r27, r27
     952:	26 17       	cp	r18, r22
     954:	37 07       	cpc	r19, r23
     956:	48 07       	cpc	r20, r24
     958:	ab 07       	cpc	r26, r27
     95a:	b0 e8       	ldi	r27, 0x80	; 128
     95c:	09 f0       	breq	.+2      	; 0x960 <__divsf3_pse+0x56>
     95e:	bb 0b       	sbc	r27, r27
     960:	80 2d       	mov	r24, r0
     962:	bf 01       	movw	r22, r30
     964:	ff 27       	eor	r31, r31
     966:	93 58       	subi	r25, 0x83	; 131
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	2a f0       	brmi	.+10     	; 0x976 <__divsf3_pse+0x6c>
     96c:	9e 3f       	cpi	r25, 0xFE	; 254
     96e:	51 05       	cpc	r21, r1
     970:	68 f0       	brcs	.+26     	; 0x98c <__divsf3_pse+0x82>
     972:	61 c0       	rjmp	.+194    	; 0xa36 <__fp_inf>
     974:	ab c0       	rjmp	.+342    	; 0xacc <__fp_szero>
     976:	5f 3f       	cpi	r21, 0xFF	; 255
     978:	ec f3       	brlt	.-6      	; 0x974 <__divsf3_pse+0x6a>
     97a:	98 3e       	cpi	r25, 0xE8	; 232
     97c:	dc f3       	brlt	.-10     	; 0x974 <__divsf3_pse+0x6a>
     97e:	86 95       	lsr	r24
     980:	77 95       	ror	r23
     982:	67 95       	ror	r22
     984:	b7 95       	ror	r27
     986:	f7 95       	ror	r31
     988:	9f 5f       	subi	r25, 0xFF	; 255
     98a:	c9 f7       	brne	.-14     	; 0x97e <__divsf3_pse+0x74>
     98c:	88 0f       	add	r24, r24
     98e:	91 1d       	adc	r25, r1
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	97 f9       	bld	r25, 7
     996:	08 95       	ret
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	88 1f       	adc	r24, r24
     9a0:	bb 1f       	adc	r27, r27
     9a2:	62 17       	cp	r22, r18
     9a4:	73 07       	cpc	r23, r19
     9a6:	84 07       	cpc	r24, r20
     9a8:	ba 07       	cpc	r27, r26
     9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__divsf3_pse+0xaa>
     9ac:	62 1b       	sub	r22, r18
     9ae:	73 0b       	sbc	r23, r19
     9b0:	84 0b       	sbc	r24, r20
     9b2:	ba 0b       	sbc	r27, r26
     9b4:	ee 1f       	adc	r30, r30
     9b6:	88 f7       	brcc	.-30     	; 0x99a <__divsf3_pse+0x90>
     9b8:	e0 95       	com	r30
     9ba:	08 95       	ret

000009bc <__floatunsisf>:
     9bc:	e8 94       	clt
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <__floatsisf+0x12>

000009c0 <__floatsisf>:
     9c0:	97 fb       	bst	r25, 7
     9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__floatsisf+0x12>
     9c4:	90 95       	com	r25
     9c6:	80 95       	com	r24
     9c8:	70 95       	com	r23
     9ca:	61 95       	neg	r22
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	8f 4f       	sbci	r24, 0xFF	; 255
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	99 23       	and	r25, r25
     9d4:	a9 f0       	breq	.+42     	; 0xa00 <__floatsisf+0x40>
     9d6:	f9 2f       	mov	r31, r25
     9d8:	96 e9       	ldi	r25, 0x96	; 150
     9da:	bb 27       	eor	r27, r27
     9dc:	93 95       	inc	r25
     9de:	f6 95       	lsr	r31
     9e0:	87 95       	ror	r24
     9e2:	77 95       	ror	r23
     9e4:	67 95       	ror	r22
     9e6:	b7 95       	ror	r27
     9e8:	f1 11       	cpse	r31, r1
     9ea:	f8 cf       	rjmp	.-16     	; 0x9dc <__floatsisf+0x1c>
     9ec:	fa f4       	brpl	.+62     	; 0xa2c <__floatsisf+0x6c>
     9ee:	bb 0f       	add	r27, r27
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <__floatsisf+0x36>
     9f2:	60 ff       	sbrs	r22, 0
     9f4:	1b c0       	rjmp	.+54     	; 0xa2c <__floatsisf+0x6c>
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	8f 4f       	sbci	r24, 0xFF	; 255
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	16 c0       	rjmp	.+44     	; 0xa2c <__floatsisf+0x6c>
     a00:	88 23       	and	r24, r24
     a02:	11 f0       	breq	.+4      	; 0xa08 <__floatsisf+0x48>
     a04:	96 e9       	ldi	r25, 0x96	; 150
     a06:	11 c0       	rjmp	.+34     	; 0xa2a <__floatsisf+0x6a>
     a08:	77 23       	and	r23, r23
     a0a:	21 f0       	breq	.+8      	; 0xa14 <__floatsisf+0x54>
     a0c:	9e e8       	ldi	r25, 0x8E	; 142
     a0e:	87 2f       	mov	r24, r23
     a10:	76 2f       	mov	r23, r22
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <__floatsisf+0x5e>
     a14:	66 23       	and	r22, r22
     a16:	71 f0       	breq	.+28     	; 0xa34 <__floatsisf+0x74>
     a18:	96 e8       	ldi	r25, 0x86	; 134
     a1a:	86 2f       	mov	r24, r22
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	2a f0       	brmi	.+10     	; 0xa2c <__floatsisf+0x6c>
     a22:	9a 95       	dec	r25
     a24:	66 0f       	add	r22, r22
     a26:	77 1f       	adc	r23, r23
     a28:	88 1f       	adc	r24, r24
     a2a:	da f7       	brpl	.-10     	; 0xa22 <__floatsisf+0x62>
     a2c:	88 0f       	add	r24, r24
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	97 f9       	bld	r25, 7
     a34:	08 95       	ret

00000a36 <__fp_inf>:
     a36:	97 f9       	bld	r25, 7
     a38:	9f 67       	ori	r25, 0x7F	; 127
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	08 95       	ret

00000a42 <__fp_nan>:
     a42:	9f ef       	ldi	r25, 0xFF	; 255
     a44:	80 ec       	ldi	r24, 0xC0	; 192
     a46:	08 95       	ret

00000a48 <__fp_pscA>:
     a48:	00 24       	eor	r0, r0
     a4a:	0a 94       	dec	r0
     a4c:	16 16       	cp	r1, r22
     a4e:	17 06       	cpc	r1, r23
     a50:	18 06       	cpc	r1, r24
     a52:	09 06       	cpc	r0, r25
     a54:	08 95       	ret

00000a56 <__fp_pscB>:
     a56:	00 24       	eor	r0, r0
     a58:	0a 94       	dec	r0
     a5a:	12 16       	cp	r1, r18
     a5c:	13 06       	cpc	r1, r19
     a5e:	14 06       	cpc	r1, r20
     a60:	05 06       	cpc	r0, r21
     a62:	08 95       	ret

00000a64 <__fp_round>:
     a64:	09 2e       	mov	r0, r25
     a66:	03 94       	inc	r0
     a68:	00 0c       	add	r0, r0
     a6a:	11 f4       	brne	.+4      	; 0xa70 <__fp_round+0xc>
     a6c:	88 23       	and	r24, r24
     a6e:	52 f0       	brmi	.+20     	; 0xa84 <__fp_round+0x20>
     a70:	bb 0f       	add	r27, r27
     a72:	40 f4       	brcc	.+16     	; 0xa84 <__fp_round+0x20>
     a74:	bf 2b       	or	r27, r31
     a76:	11 f4       	brne	.+4      	; 0xa7c <__fp_round+0x18>
     a78:	60 ff       	sbrs	r22, 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__fp_round+0x20>
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	08 95       	ret

00000a86 <__fp_split3>:
     a86:	57 fd       	sbrc	r21, 7
     a88:	90 58       	subi	r25, 0x80	; 128
     a8a:	44 0f       	add	r20, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	59 f0       	breq	.+22     	; 0xaa6 <__fp_splitA+0x10>
     a90:	5f 3f       	cpi	r21, 0xFF	; 255
     a92:	71 f0       	breq	.+28     	; 0xab0 <__fp_splitA+0x1a>
     a94:	47 95       	ror	r20

00000a96 <__fp_splitA>:
     a96:	88 0f       	add	r24, r24
     a98:	97 fb       	bst	r25, 7
     a9a:	99 1f       	adc	r25, r25
     a9c:	61 f0       	breq	.+24     	; 0xab6 <__fp_splitA+0x20>
     a9e:	9f 3f       	cpi	r25, 0xFF	; 255
     aa0:	79 f0       	breq	.+30     	; 0xac0 <__fp_splitA+0x2a>
     aa2:	87 95       	ror	r24
     aa4:	08 95       	ret
     aa6:	12 16       	cp	r1, r18
     aa8:	13 06       	cpc	r1, r19
     aaa:	14 06       	cpc	r1, r20
     aac:	55 1f       	adc	r21, r21
     aae:	f2 cf       	rjmp	.-28     	; 0xa94 <__fp_split3+0xe>
     ab0:	46 95       	lsr	r20
     ab2:	f1 df       	rcall	.-30     	; 0xa96 <__fp_splitA>
     ab4:	08 c0       	rjmp	.+16     	; 0xac6 <__fp_splitA+0x30>
     ab6:	16 16       	cp	r1, r22
     ab8:	17 06       	cpc	r1, r23
     aba:	18 06       	cpc	r1, r24
     abc:	99 1f       	adc	r25, r25
     abe:	f1 cf       	rjmp	.-30     	; 0xaa2 <__fp_splitA+0xc>
     ac0:	86 95       	lsr	r24
     ac2:	71 05       	cpc	r23, r1
     ac4:	61 05       	cpc	r22, r1
     ac6:	08 94       	sec
     ac8:	08 95       	ret

00000aca <__fp_zero>:
     aca:	e8 94       	clt

00000acc <__fp_szero>:
     acc:	bb 27       	eor	r27, r27
     ace:	66 27       	eor	r22, r22
     ad0:	77 27       	eor	r23, r23
     ad2:	cb 01       	movw	r24, r22
     ad4:	97 f9       	bld	r25, 7
     ad6:	08 95       	ret

00000ad8 <__mulsf3>:
     ad8:	0b d0       	rcall	.+22     	; 0xaf0 <__mulsf3x>
     ada:	c4 cf       	rjmp	.-120    	; 0xa64 <__fp_round>
     adc:	b5 df       	rcall	.-150    	; 0xa48 <__fp_pscA>
     ade:	28 f0       	brcs	.+10     	; 0xaea <__mulsf3+0x12>
     ae0:	ba df       	rcall	.-140    	; 0xa56 <__fp_pscB>
     ae2:	18 f0       	brcs	.+6      	; 0xaea <__mulsf3+0x12>
     ae4:	95 23       	and	r25, r21
     ae6:	09 f0       	breq	.+2      	; 0xaea <__mulsf3+0x12>
     ae8:	a6 cf       	rjmp	.-180    	; 0xa36 <__fp_inf>
     aea:	ab cf       	rjmp	.-170    	; 0xa42 <__fp_nan>
     aec:	11 24       	eor	r1, r1
     aee:	ee cf       	rjmp	.-36     	; 0xacc <__fp_szero>

00000af0 <__mulsf3x>:
     af0:	ca df       	rcall	.-108    	; 0xa86 <__fp_split3>
     af2:	a0 f3       	brcs	.-24     	; 0xadc <__mulsf3+0x4>

00000af4 <__mulsf3_pse>:
     af4:	95 9f       	mul	r25, r21
     af6:	d1 f3       	breq	.-12     	; 0xaec <__mulsf3+0x14>
     af8:	95 0f       	add	r25, r21
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	55 1f       	adc	r21, r21
     afe:	62 9f       	mul	r22, r18
     b00:	f0 01       	movw	r30, r0
     b02:	72 9f       	mul	r23, r18
     b04:	bb 27       	eor	r27, r27
     b06:	f0 0d       	add	r31, r0
     b08:	b1 1d       	adc	r27, r1
     b0a:	63 9f       	mul	r22, r19
     b0c:	aa 27       	eor	r26, r26
     b0e:	f0 0d       	add	r31, r0
     b10:	b1 1d       	adc	r27, r1
     b12:	aa 1f       	adc	r26, r26
     b14:	64 9f       	mul	r22, r20
     b16:	66 27       	eor	r22, r22
     b18:	b0 0d       	add	r27, r0
     b1a:	a1 1d       	adc	r26, r1
     b1c:	66 1f       	adc	r22, r22
     b1e:	82 9f       	mul	r24, r18
     b20:	22 27       	eor	r18, r18
     b22:	b0 0d       	add	r27, r0
     b24:	a1 1d       	adc	r26, r1
     b26:	62 1f       	adc	r22, r18
     b28:	73 9f       	mul	r23, r19
     b2a:	b0 0d       	add	r27, r0
     b2c:	a1 1d       	adc	r26, r1
     b2e:	62 1f       	adc	r22, r18
     b30:	83 9f       	mul	r24, r19
     b32:	a0 0d       	add	r26, r0
     b34:	61 1d       	adc	r22, r1
     b36:	22 1f       	adc	r18, r18
     b38:	74 9f       	mul	r23, r20
     b3a:	33 27       	eor	r19, r19
     b3c:	a0 0d       	add	r26, r0
     b3e:	61 1d       	adc	r22, r1
     b40:	23 1f       	adc	r18, r19
     b42:	84 9f       	mul	r24, r20
     b44:	60 0d       	add	r22, r0
     b46:	21 1d       	adc	r18, r1
     b48:	82 2f       	mov	r24, r18
     b4a:	76 2f       	mov	r23, r22
     b4c:	6a 2f       	mov	r22, r26
     b4e:	11 24       	eor	r1, r1
     b50:	9f 57       	subi	r25, 0x7F	; 127
     b52:	50 40       	sbci	r21, 0x00	; 0
     b54:	8a f0       	brmi	.+34     	; 0xb78 <__mulsf3_pse+0x84>
     b56:	e1 f0       	breq	.+56     	; 0xb90 <__mulsf3_pse+0x9c>
     b58:	88 23       	and	r24, r24
     b5a:	4a f0       	brmi	.+18     	; 0xb6e <__mulsf3_pse+0x7a>
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	bb 1f       	adc	r27, r27
     b62:	66 1f       	adc	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	88 1f       	adc	r24, r24
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	50 40       	sbci	r21, 0x00	; 0
     b6c:	a9 f7       	brne	.-22     	; 0xb58 <__mulsf3_pse+0x64>
     b6e:	9e 3f       	cpi	r25, 0xFE	; 254
     b70:	51 05       	cpc	r21, r1
     b72:	70 f0       	brcs	.+28     	; 0xb90 <__mulsf3_pse+0x9c>
     b74:	60 cf       	rjmp	.-320    	; 0xa36 <__fp_inf>
     b76:	aa cf       	rjmp	.-172    	; 0xacc <__fp_szero>
     b78:	5f 3f       	cpi	r21, 0xFF	; 255
     b7a:	ec f3       	brlt	.-6      	; 0xb76 <__mulsf3_pse+0x82>
     b7c:	98 3e       	cpi	r25, 0xE8	; 232
     b7e:	dc f3       	brlt	.-10     	; 0xb76 <__mulsf3_pse+0x82>
     b80:	86 95       	lsr	r24
     b82:	77 95       	ror	r23
     b84:	67 95       	ror	r22
     b86:	b7 95       	ror	r27
     b88:	f7 95       	ror	r31
     b8a:	e7 95       	ror	r30
     b8c:	9f 5f       	subi	r25, 0xFF	; 255
     b8e:	c1 f7       	brne	.-16     	; 0xb80 <__mulsf3_pse+0x8c>
     b90:	fe 2b       	or	r31, r30
     b92:	88 0f       	add	r24, r24
     b94:	91 1d       	adc	r25, r1
     b96:	96 95       	lsr	r25
     b98:	87 95       	ror	r24
     b9a:	97 f9       	bld	r25, 7
     b9c:	08 95       	ret

00000b9e <dtostrf>:
     b9e:	ef 92       	push	r14
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	c0 2f       	mov	r28, r16
     ba8:	47 ff       	sbrs	r20, 7
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <dtostrf+0x12>
     bac:	34 e1       	ldi	r19, 0x14	; 20
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <dtostrf+0x14>
     bb0:	34 e0       	ldi	r19, 0x04	; 4
     bb2:	e4 2f       	mov	r30, r20
     bb4:	ff 27       	eor	r31, r31
     bb6:	e7 fd       	sbrc	r30, 7
     bb8:	f0 95       	com	r31
     bba:	f7 ff       	sbrs	r31, 7
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <dtostrf+0x26>
     bbe:	f1 95       	neg	r31
     bc0:	e1 95       	neg	r30
     bc2:	f1 09       	sbc	r31, r1
     bc4:	e3 2e       	mov	r14, r19
     bc6:	02 2f       	mov	r16, r18
     bc8:	2e 2f       	mov	r18, r30
     bca:	4c 2f       	mov	r20, r28
     bcc:	51 2f       	mov	r21, r17
     bce:	26 d0       	rcall	.+76     	; 0xc1c <dtoa_prf>
     bd0:	8c 2f       	mov	r24, r28
     bd2:	91 2f       	mov	r25, r17
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <itoa>:
     bde:	fb 01       	movw	r30, r22
     be0:	9f 01       	movw	r18, r30
     be2:	e8 94       	clt
     be4:	42 30       	cpi	r20, 0x02	; 2
     be6:	bc f0       	brlt	.+46     	; 0xc16 <itoa+0x38>
     be8:	45 32       	cpi	r20, 0x25	; 37
     bea:	ac f4       	brge	.+42     	; 0xc16 <itoa+0x38>
     bec:	4a 30       	cpi	r20, 0x0A	; 10
     bee:	29 f4       	brne	.+10     	; 0xbfa <itoa+0x1c>
     bf0:	97 fb       	bst	r25, 7
     bf2:	1e f4       	brtc	.+6      	; 0xbfa <itoa+0x1c>
     bf4:	90 95       	com	r25
     bf6:	81 95       	neg	r24
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	64 2f       	mov	r22, r20
     bfc:	77 27       	eor	r23, r23
     bfe:	72 d2       	rcall	.+1252   	; 0x10e4 <__udivmodhi4>
     c00:	80 5d       	subi	r24, 0xD0	; 208
     c02:	8a 33       	cpi	r24, 0x3A	; 58
     c04:	0c f0       	brlt	.+2      	; 0xc08 <itoa+0x2a>
     c06:	89 5d       	subi	r24, 0xD9	; 217
     c08:	81 93       	st	Z+, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	a9 f7       	brne	.-22     	; 0xbfa <itoa+0x1c>
     c10:	16 f4       	brtc	.+4      	; 0xc16 <itoa+0x38>
     c12:	5d e2       	ldi	r21, 0x2D	; 45
     c14:	51 93       	st	Z+, r21
     c16:	10 82       	st	Z, r1
     c18:	c9 01       	movw	r24, r18
     c1a:	54 c2       	rjmp	.+1192   	; 0x10c4 <strrev>

00000c1c <dtoa_prf>:
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	29 97       	sbiw	r28, 0x09	; 9
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	6a 01       	movw	r12, r20
     c48:	b2 2e       	mov	r11, r18
     c4a:	10 2f       	mov	r17, r16
     c4c:	0c 33       	cpi	r16, 0x3C	; 60
     c4e:	18 f4       	brcc	.+6      	; 0xc56 <dtoa_prf+0x3a>
     c50:	f0 2e       	mov	r15, r16
     c52:	f3 94       	inc	r15
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <dtoa_prf+0x3e>
     c56:	5c e3       	ldi	r21, 0x3C	; 60
     c58:	f5 2e       	mov	r15, r21
     c5a:	0f 2d       	mov	r16, r15
     c5c:	27 e0       	ldi	r18, 0x07	; 7
     c5e:	ae 01       	movw	r20, r28
     c60:	4f 5f       	subi	r20, 0xFF	; 255
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	57 d1       	rcall	.+686    	; 0xf14 <__ftoa_engine>
     c66:	79 81       	ldd	r23, Y+1	; 0x01
     c68:	27 2f       	mov	r18, r23
     c6a:	29 70       	andi	r18, 0x09	; 9
     c6c:	21 30       	cpi	r18, 0x01	; 1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <dtoa_prf+0x60>
     c70:	e1 fc       	sbrc	r14, 1
     c72:	06 c0       	rjmp	.+12     	; 0xc80 <dtoa_prf+0x64>
     c74:	e0 fe       	sbrs	r14, 0
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <dtoa_prf+0x68>
     c78:	60 e2       	ldi	r22, 0x20	; 32
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <dtoa_prf+0x6a>
     c7c:	6d e2       	ldi	r22, 0x2D	; 45
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <dtoa_prf+0x6a>
     c80:	6b e2       	ldi	r22, 0x2B	; 43
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <dtoa_prf+0x6a>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	73 ff       	sbrs	r23, 3
     c88:	3d c0       	rjmp	.+122    	; 0xd04 <dtoa_prf+0xe8>
     c8a:	66 23       	and	r22, r22
     c8c:	11 f0       	breq	.+4      	; 0xc92 <dtoa_prf+0x76>
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <dtoa_prf+0x78>
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	8b 15       	cp	r24, r11
     c96:	10 f4       	brcc	.+4      	; 0xc9c <dtoa_prf+0x80>
     c98:	b8 1a       	sub	r11, r24
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <dtoa_prf+0x82>
     c9c:	b1 2c       	mov	r11, r1
     c9e:	e4 fc       	sbrc	r14, 4
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <dtoa_prf+0x9c>
     ca2:	8b 2d       	mov	r24, r11
     ca4:	f6 01       	movw	r30, r12
     ca6:	90 e2       	ldi	r25, 0x20	; 32
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <dtoa_prf+0x92>
     caa:	91 93       	st	Z+, r25
     cac:	81 50       	subi	r24, 0x01	; 1
     cae:	81 11       	cpse	r24, r1
     cb0:	fc cf       	rjmp	.-8      	; 0xcaa <dtoa_prf+0x8e>
     cb2:	cb 0c       	add	r12, r11
     cb4:	d1 1c       	adc	r13, r1
     cb6:	b1 2c       	mov	r11, r1
     cb8:	66 23       	and	r22, r22
     cba:	19 f0       	breq	.+6      	; 0xcc2 <dtoa_prf+0xa6>
     cbc:	d6 01       	movw	r26, r12
     cbe:	6d 93       	st	X+, r22
     cc0:	6d 01       	movw	r12, r26
     cc2:	e2 fe       	sbrs	r14, 2
     cc4:	0a c0       	rjmp	.+20     	; 0xcda <dtoa_prf+0xbe>
     cc6:	8e e4       	ldi	r24, 0x4E	; 78
     cc8:	f6 01       	movw	r30, r12
     cca:	80 83       	st	Z, r24
     ccc:	91 e4       	ldi	r25, 0x41	; 65
     cce:	91 83       	std	Z+1, r25	; 0x01
     cd0:	82 83       	std	Z+2, r24	; 0x02
     cd2:	f3 e0       	ldi	r31, 0x03	; 3
     cd4:	cf 0e       	add	r12, r31
     cd6:	d1 1c       	adc	r13, r1
     cd8:	0c c0       	rjmp	.+24     	; 0xcf2 <dtoa_prf+0xd6>
     cda:	8e e6       	ldi	r24, 0x6E	; 110
     cdc:	d6 01       	movw	r26, r12
     cde:	8c 93       	st	X, r24
     ce0:	91 e6       	ldi	r25, 0x61	; 97
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	9c 93       	st	X, r25
     ce6:	11 97       	sbiw	r26, 0x01	; 1
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	8c 93       	st	X, r24
     cec:	b3 e0       	ldi	r27, 0x03	; 3
     cee:	cb 0e       	add	r12, r27
     cf0:	d1 1c       	adc	r13, r1
     cf2:	8b 2d       	mov	r24, r11
     cf4:	f6 01       	movw	r30, r12
     cf6:	90 e2       	ldi	r25, 0x20	; 32
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <dtoa_prf+0xe2>
     cfa:	91 93       	st	Z+, r25
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	81 11       	cpse	r24, r1
     d00:	fc cf       	rjmp	.-8      	; 0xcfa <dtoa_prf+0xde>
     d02:	40 c0       	rjmp	.+128    	; 0xd84 <dtoa_prf+0x168>
     d04:	72 ff       	sbrs	r23, 2
     d06:	45 c0       	rjmp	.+138    	; 0xd92 <dtoa_prf+0x176>
     d08:	66 23       	and	r22, r22
     d0a:	11 f0       	breq	.+4      	; 0xd10 <dtoa_prf+0xf4>
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <dtoa_prf+0xf6>
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	8b 15       	cp	r24, r11
     d14:	10 f4       	brcc	.+4      	; 0xd1a <dtoa_prf+0xfe>
     d16:	b8 1a       	sub	r11, r24
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <dtoa_prf+0x100>
     d1a:	b1 2c       	mov	r11, r1
     d1c:	e4 fc       	sbrc	r14, 4
     d1e:	0b c0       	rjmp	.+22     	; 0xd36 <dtoa_prf+0x11a>
     d20:	8b 2d       	mov	r24, r11
     d22:	f6 01       	movw	r30, r12
     d24:	90 e2       	ldi	r25, 0x20	; 32
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <dtoa_prf+0x110>
     d28:	91 93       	st	Z+, r25
     d2a:	81 50       	subi	r24, 0x01	; 1
     d2c:	81 11       	cpse	r24, r1
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <dtoa_prf+0x10c>
     d30:	cb 0c       	add	r12, r11
     d32:	d1 1c       	adc	r13, r1
     d34:	b1 2c       	mov	r11, r1
     d36:	66 23       	and	r22, r22
     d38:	19 f0       	breq	.+6      	; 0xd40 <dtoa_prf+0x124>
     d3a:	f6 01       	movw	r30, r12
     d3c:	61 93       	st	Z+, r22
     d3e:	6f 01       	movw	r12, r30
     d40:	e2 fe       	sbrs	r14, 2
     d42:	0e c0       	rjmp	.+28     	; 0xd60 <dtoa_prf+0x144>
     d44:	89 e4       	ldi	r24, 0x49	; 73
     d46:	d6 01       	movw	r26, r12
     d48:	8c 93       	st	X, r24
     d4a:	8e e4       	ldi	r24, 0x4E	; 78
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	8c 93       	st	X, r24
     d50:	11 97       	sbiw	r26, 0x01	; 1
     d52:	86 e4       	ldi	r24, 0x46	; 70
     d54:	12 96       	adiw	r26, 0x02	; 2
     d56:	8c 93       	st	X, r24
     d58:	b3 e0       	ldi	r27, 0x03	; 3
     d5a:	cb 0e       	add	r12, r27
     d5c:	d1 1c       	adc	r13, r1
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <dtoa_prf+0x158>
     d60:	89 e6       	ldi	r24, 0x69	; 105
     d62:	f6 01       	movw	r30, r12
     d64:	80 83       	st	Z, r24
     d66:	8e e6       	ldi	r24, 0x6E	; 110
     d68:	81 83       	std	Z+1, r24	; 0x01
     d6a:	86 e6       	ldi	r24, 0x66	; 102
     d6c:	82 83       	std	Z+2, r24	; 0x02
     d6e:	f3 e0       	ldi	r31, 0x03	; 3
     d70:	cf 0e       	add	r12, r31
     d72:	d1 1c       	adc	r13, r1
     d74:	8b 2d       	mov	r24, r11
     d76:	f6 01       	movw	r30, r12
     d78:	90 e2       	ldi	r25, 0x20	; 32
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <dtoa_prf+0x164>
     d7c:	91 93       	st	Z+, r25
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	81 11       	cpse	r24, r1
     d82:	fc cf       	rjmp	.-8      	; 0xd7c <dtoa_prf+0x160>
     d84:	f6 01       	movw	r30, r12
     d86:	eb 0d       	add	r30, r11
     d88:	f1 1d       	adc	r31, r1
     d8a:	10 82       	st	Z, r1
     d8c:	2e ef       	ldi	r18, 0xFE	; 254
     d8e:	3f ef       	ldi	r19, 0xFF	; 255
     d90:	ac c0       	rjmp	.+344    	; 0xeea <dtoa_prf+0x2ce>
     d92:	a1 e0       	ldi	r26, 0x01	; 1
     d94:	61 11       	cpse	r22, r1
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <dtoa_prf+0x17e>
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 2f       	mov	r20, r26
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	18 16       	cp	r1, r24
     da0:	19 06       	cpc	r1, r25
     da2:	24 f4       	brge	.+8      	; 0xdac <dtoa_prf+0x190>
     da4:	9c 01       	movw	r18, r24
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <dtoa_prf+0x194>
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	24 0f       	add	r18, r20
     db2:	35 1f       	adc	r19, r21
     db4:	11 23       	and	r17, r17
     db6:	29 f0       	breq	.+10     	; 0xdc2 <dtoa_prf+0x1a6>
     db8:	41 2f       	mov	r20, r17
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	4f 5f       	subi	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <dtoa_prf+0x1aa>
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	42 0f       	add	r20, r18
     dc8:	53 1f       	adc	r21, r19
     dca:	2b 2d       	mov	r18, r11
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	42 17       	cp	r20, r18
     dd0:	53 07       	cpc	r21, r19
     dd2:	14 f4       	brge	.+4      	; 0xdd8 <dtoa_prf+0x1bc>
     dd4:	b4 1a       	sub	r11, r20
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <dtoa_prf+0x1be>
     dd8:	b1 2c       	mov	r11, r1
     dda:	3e 2d       	mov	r19, r14
     ddc:	30 71       	andi	r19, 0x10	; 16
     dde:	e4 fc       	sbrc	r14, 4
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <dtoa_prf+0x1e0>
     de2:	e3 fc       	sbrc	r14, 3
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <dtoa_prf+0x1e0>
     de6:	2b 2d       	mov	r18, r11
     de8:	f6 01       	movw	r30, r12
     dea:	40 e2       	ldi	r20, 0x20	; 32
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <dtoa_prf+0x1d6>
     dee:	41 93       	st	Z+, r20
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	21 11       	cpse	r18, r1
     df4:	fc cf       	rjmp	.-8      	; 0xdee <dtoa_prf+0x1d2>
     df6:	cb 0c       	add	r12, r11
     df8:	d1 1c       	adc	r13, r1
     dfa:	b1 2c       	mov	r11, r1
     dfc:	aa 23       	and	r26, r26
     dfe:	19 f0       	breq	.+6      	; 0xe06 <dtoa_prf+0x1ea>
     e00:	d6 01       	movw	r26, r12
     e02:	6d 93       	st	X+, r22
     e04:	6d 01       	movw	r12, r26
     e06:	31 11       	cpse	r19, r1
     e08:	0b c0       	rjmp	.+22     	; 0xe20 <dtoa_prf+0x204>
     e0a:	2b 2d       	mov	r18, r11
     e0c:	f6 01       	movw	r30, r12
     e0e:	30 e3       	ldi	r19, 0x30	; 48
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <dtoa_prf+0x1fa>
     e12:	31 93       	st	Z+, r19
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	21 11       	cpse	r18, r1
     e18:	fc cf       	rjmp	.-8      	; 0xe12 <dtoa_prf+0x1f6>
     e1a:	cb 0c       	add	r12, r11
     e1c:	d1 1c       	adc	r13, r1
     e1e:	b1 2c       	mov	r11, r1
     e20:	f8 0e       	add	r15, r24
     e22:	0a 81       	ldd	r16, Y+2	; 0x02
     e24:	40 e1       	ldi	r20, 0x10	; 16
     e26:	a4 2e       	mov	r10, r20
     e28:	a7 22       	and	r10, r23
     e2a:	74 ff       	sbrs	r23, 4
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <dtoa_prf+0x218>
     e2e:	01 33       	cpi	r16, 0x31	; 49
     e30:	09 f4       	brne	.+2      	; 0xe34 <dtoa_prf+0x218>
     e32:	fa 94       	dec	r15
     e34:	1f 14       	cp	r1, r15
     e36:	2c f4       	brge	.+10     	; 0xe42 <dtoa_prf+0x226>
     e38:	2f 2d       	mov	r18, r15
     e3a:	29 30       	cpi	r18, 0x09	; 9
     e3c:	18 f0       	brcs	.+6      	; 0xe44 <dtoa_prf+0x228>
     e3e:	28 e0       	ldi	r18, 0x08	; 8
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <dtoa_prf+0x228>
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	ac 01       	movw	r20, r24
     e46:	97 ff       	sbrs	r25, 7
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <dtoa_prf+0x232>
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	3e e2       	ldi	r19, 0x2E	; 46
     e54:	93 2e       	mov	r9, r19
     e56:	fc 01       	movw	r30, r24
     e58:	e2 1b       	sub	r30, r18
     e5a:	f1 09       	sbc	r31, r1
     e5c:	9f 01       	movw	r18, r30
     e5e:	dc 01       	movw	r26, r24
     e60:	a4 1b       	sub	r26, r20
     e62:	b5 0b       	sbc	r27, r21
     e64:	fe 01       	movw	r30, r28
     e66:	31 96       	adiw	r30, 0x01	; 1
     e68:	ea 0f       	add	r30, r26
     e6a:	fb 1f       	adc	r31, r27
     e6c:	a1 2f       	mov	r26, r17
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	66 24       	eor	r6, r6
     e72:	77 24       	eor	r7, r7
     e74:	6a 1a       	sub	r6, r26
     e76:	7b 0a       	sbc	r7, r27
     e78:	4f 3f       	cpi	r20, 0xFF	; 255
     e7a:	1f ef       	ldi	r17, 0xFF	; 255
     e7c:	51 07       	cpc	r21, r17
     e7e:	19 f4       	brne	.+6      	; 0xe86 <dtoa_prf+0x26a>
     e80:	d6 01       	movw	r26, r12
     e82:	9d 92       	st	X+, r9
     e84:	6d 01       	movw	r12, r26
     e86:	84 17       	cp	r24, r20
     e88:	95 07       	cpc	r25, r21
     e8a:	54 f0       	brlt	.+20     	; 0xea0 <dtoa_prf+0x284>
     e8c:	24 17       	cp	r18, r20
     e8e:	35 07       	cpc	r19, r21
     e90:	3c f4       	brge	.+14     	; 0xea0 <dtoa_prf+0x284>
     e92:	7f 01       	movw	r14, r30
     e94:	e6 0e       	add	r14, r22
     e96:	f7 1e       	adc	r15, r23
     e98:	d7 01       	movw	r26, r14
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	1c 91       	ld	r17, X
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <dtoa_prf+0x286>
     ea0:	10 e3       	ldi	r17, 0x30	; 48
     ea2:	41 50       	subi	r20, 0x01	; 1
     ea4:	51 09       	sbc	r21, r1
     ea6:	6f 5f       	subi	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	46 15       	cp	r20, r6
     eac:	57 05       	cpc	r21, r7
     eae:	24 f0       	brlt	.+8      	; 0xeb8 <dtoa_prf+0x29c>
     eb0:	d6 01       	movw	r26, r12
     eb2:	1d 93       	st	X+, r17
     eb4:	6d 01       	movw	r12, r26
     eb6:	e0 cf       	rjmp	.-64     	; 0xe78 <dtoa_prf+0x25c>
     eb8:	48 17       	cp	r20, r24
     eba:	59 07       	cpc	r21, r25
     ebc:	39 f4       	brne	.+14     	; 0xecc <dtoa_prf+0x2b0>
     ebe:	06 33       	cpi	r16, 0x36	; 54
     ec0:	20 f4       	brcc	.+8      	; 0xeca <dtoa_prf+0x2ae>
     ec2:	05 33       	cpi	r16, 0x35	; 53
     ec4:	19 f4       	brne	.+6      	; 0xecc <dtoa_prf+0x2b0>
     ec6:	a1 10       	cpse	r10, r1
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <dtoa_prf+0x2b0>
     eca:	11 e3       	ldi	r17, 0x31	; 49
     ecc:	f6 01       	movw	r30, r12
     ece:	11 93       	st	Z+, r17
     ed0:	8b 2d       	mov	r24, r11
     ed2:	df 01       	movw	r26, r30
     ed4:	90 e2       	ldi	r25, 0x20	; 32
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <dtoa_prf+0x2c0>
     ed8:	9d 93       	st	X+, r25
     eda:	81 50       	subi	r24, 0x01	; 1
     edc:	81 11       	cpse	r24, r1
     ede:	fc cf       	rjmp	.-8      	; 0xed8 <dtoa_prf+0x2bc>
     ee0:	eb 0d       	add	r30, r11
     ee2:	f1 1d       	adc	r31, r1
     ee4:	10 82       	st	Z, r1
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	c9 01       	movw	r24, r18
     eec:	29 96       	adiw	r28, 0x09	; 9
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	08 95       	ret

00000f14 <__ftoa_engine>:
     f14:	28 30       	cpi	r18, 0x08	; 8
     f16:	08 f0       	brcs	.+2      	; 0xf1a <__ftoa_engine+0x6>
     f18:	27 e0       	ldi	r18, 0x07	; 7
     f1a:	33 27       	eor	r19, r19
     f1c:	da 01       	movw	r26, r20
     f1e:	99 0f       	add	r25, r25
     f20:	31 1d       	adc	r19, r1
     f22:	87 fd       	sbrc	r24, 7
     f24:	91 60       	ori	r25, 0x01	; 1
     f26:	00 96       	adiw	r24, 0x00	; 0
     f28:	61 05       	cpc	r22, r1
     f2a:	71 05       	cpc	r23, r1
     f2c:	39 f4       	brne	.+14     	; 0xf3c <__ftoa_engine+0x28>
     f2e:	32 60       	ori	r19, 0x02	; 2
     f30:	2e 5f       	subi	r18, 0xFE	; 254
     f32:	3d 93       	st	X+, r19
     f34:	30 e3       	ldi	r19, 0x30	; 48
     f36:	2a 95       	dec	r18
     f38:	e1 f7       	brne	.-8      	; 0xf32 <__ftoa_engine+0x1e>
     f3a:	08 95       	ret
     f3c:	9f 3f       	cpi	r25, 0xFF	; 255
     f3e:	30 f0       	brcs	.+12     	; 0xf4c <__ftoa_engine+0x38>
     f40:	80 38       	cpi	r24, 0x80	; 128
     f42:	71 05       	cpc	r23, r1
     f44:	61 05       	cpc	r22, r1
     f46:	09 f0       	breq	.+2      	; 0xf4a <__ftoa_engine+0x36>
     f48:	3c 5f       	subi	r19, 0xFC	; 252
     f4a:	3c 5f       	subi	r19, 0xFC	; 252
     f4c:	3d 93       	st	X+, r19
     f4e:	91 30       	cpi	r25, 0x01	; 1
     f50:	08 f0       	brcs	.+2      	; 0xf54 <__ftoa_engine+0x40>
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	91 1d       	adc	r25, r1
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	1f 93       	push	r17
     f5c:	0f 93       	push	r16
     f5e:	ff 92       	push	r15
     f60:	ef 92       	push	r14
     f62:	19 2f       	mov	r17, r25
     f64:	98 7f       	andi	r25, 0xF8	; 248
     f66:	96 95       	lsr	r25
     f68:	e9 2f       	mov	r30, r25
     f6a:	96 95       	lsr	r25
     f6c:	96 95       	lsr	r25
     f6e:	e9 0f       	add	r30, r25
     f70:	ff 27       	eor	r31, r31
     f72:	e0 58       	subi	r30, 0x80	; 128
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	99 27       	eor	r25, r25
     f78:	33 27       	eor	r19, r19
     f7a:	ee 24       	eor	r14, r14
     f7c:	ff 24       	eor	r15, r15
     f7e:	a7 01       	movw	r20, r14
     f80:	e7 01       	movw	r28, r14
     f82:	05 90       	lpm	r0, Z+
     f84:	08 94       	sec
     f86:	07 94       	ror	r0
     f88:	28 f4       	brcc	.+10     	; 0xf94 <__ftoa_engine+0x80>
     f8a:	36 0f       	add	r19, r22
     f8c:	e7 1e       	adc	r14, r23
     f8e:	f8 1e       	adc	r15, r24
     f90:	49 1f       	adc	r20, r25
     f92:	51 1d       	adc	r21, r1
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	06 94       	lsr	r0
     f9e:	a1 f7       	brne	.-24     	; 0xf88 <__ftoa_engine+0x74>
     fa0:	05 90       	lpm	r0, Z+
     fa2:	07 94       	ror	r0
     fa4:	28 f4       	brcc	.+10     	; 0xfb0 <__ftoa_engine+0x9c>
     fa6:	e7 0e       	add	r14, r23
     fa8:	f8 1e       	adc	r15, r24
     faa:	49 1f       	adc	r20, r25
     fac:	56 1f       	adc	r21, r22
     fae:	c1 1d       	adc	r28, r1
     fb0:	77 0f       	add	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	66 1f       	adc	r22, r22
     fb8:	06 94       	lsr	r0
     fba:	a1 f7       	brne	.-24     	; 0xfa4 <__ftoa_engine+0x90>
     fbc:	05 90       	lpm	r0, Z+
     fbe:	07 94       	ror	r0
     fc0:	28 f4       	brcc	.+10     	; 0xfcc <__ftoa_engine+0xb8>
     fc2:	f8 0e       	add	r15, r24
     fc4:	49 1f       	adc	r20, r25
     fc6:	56 1f       	adc	r21, r22
     fc8:	c7 1f       	adc	r28, r23
     fca:	d1 1d       	adc	r29, r1
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	66 1f       	adc	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	06 94       	lsr	r0
     fd6:	a1 f7       	brne	.-24     	; 0xfc0 <__ftoa_engine+0xac>
     fd8:	05 90       	lpm	r0, Z+
     fda:	07 94       	ror	r0
     fdc:	20 f4       	brcc	.+8      	; 0xfe6 <__ftoa_engine+0xd2>
     fde:	49 0f       	add	r20, r25
     fe0:	56 1f       	adc	r21, r22
     fe2:	c7 1f       	adc	r28, r23
     fe4:	d8 1f       	adc	r29, r24
     fe6:	99 0f       	add	r25, r25
     fe8:	66 1f       	adc	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	88 1f       	adc	r24, r24
     fee:	06 94       	lsr	r0
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__ftoa_engine+0xc8>
     ff2:	84 91       	lpm	r24, Z
     ff4:	10 95       	com	r17
     ff6:	17 70       	andi	r17, 0x07	; 7
     ff8:	41 f0       	breq	.+16     	; 0x100a <__ftoa_engine+0xf6>
     ffa:	d6 95       	lsr	r29
     ffc:	c7 95       	ror	r28
     ffe:	57 95       	ror	r21
    1000:	47 95       	ror	r20
    1002:	f7 94       	ror	r15
    1004:	e7 94       	ror	r14
    1006:	1a 95       	dec	r17
    1008:	c1 f7       	brne	.-16     	; 0xffa <__ftoa_engine+0xe6>
    100a:	e6 e2       	ldi	r30, 0x26	; 38
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	68 94       	set
    1010:	15 90       	lpm	r1, Z+
    1012:	15 91       	lpm	r17, Z+
    1014:	35 91       	lpm	r19, Z+
    1016:	65 91       	lpm	r22, Z+
    1018:	95 91       	lpm	r25, Z+
    101a:	05 90       	lpm	r0, Z+
    101c:	7f e2       	ldi	r23, 0x2F	; 47
    101e:	73 95       	inc	r23
    1020:	e1 18       	sub	r14, r1
    1022:	f1 0a       	sbc	r15, r17
    1024:	43 0b       	sbc	r20, r19
    1026:	56 0b       	sbc	r21, r22
    1028:	c9 0b       	sbc	r28, r25
    102a:	d0 09       	sbc	r29, r0
    102c:	c0 f7       	brcc	.-16     	; 0x101e <__ftoa_engine+0x10a>
    102e:	e1 0c       	add	r14, r1
    1030:	f1 1e       	adc	r15, r17
    1032:	43 1f       	adc	r20, r19
    1034:	56 1f       	adc	r21, r22
    1036:	c9 1f       	adc	r28, r25
    1038:	d0 1d       	adc	r29, r0
    103a:	7e f4       	brtc	.+30     	; 0x105a <__ftoa_engine+0x146>
    103c:	70 33       	cpi	r23, 0x30	; 48
    103e:	11 f4       	brne	.+4      	; 0x1044 <__ftoa_engine+0x130>
    1040:	8a 95       	dec	r24
    1042:	e6 cf       	rjmp	.-52     	; 0x1010 <__ftoa_engine+0xfc>
    1044:	e8 94       	clt
    1046:	01 50       	subi	r16, 0x01	; 1
    1048:	30 f0       	brcs	.+12     	; 0x1056 <__ftoa_engine+0x142>
    104a:	08 0f       	add	r16, r24
    104c:	0a f4       	brpl	.+2      	; 0x1050 <__ftoa_engine+0x13c>
    104e:	00 27       	eor	r16, r16
    1050:	02 17       	cp	r16, r18
    1052:	08 f4       	brcc	.+2      	; 0x1056 <__ftoa_engine+0x142>
    1054:	20 2f       	mov	r18, r16
    1056:	23 95       	inc	r18
    1058:	02 2f       	mov	r16, r18
    105a:	7a 33       	cpi	r23, 0x3A	; 58
    105c:	28 f0       	brcs	.+10     	; 0x1068 <__ftoa_engine+0x154>
    105e:	79 e3       	ldi	r23, 0x39	; 57
    1060:	7d 93       	st	X+, r23
    1062:	2a 95       	dec	r18
    1064:	e9 f7       	brne	.-6      	; 0x1060 <__ftoa_engine+0x14c>
    1066:	10 c0       	rjmp	.+32     	; 0x1088 <__ftoa_engine+0x174>
    1068:	7d 93       	st	X+, r23
    106a:	2a 95       	dec	r18
    106c:	89 f6       	brne	.-94     	; 0x1010 <__ftoa_engine+0xfc>
    106e:	06 94       	lsr	r0
    1070:	97 95       	ror	r25
    1072:	67 95       	ror	r22
    1074:	37 95       	ror	r19
    1076:	17 95       	ror	r17
    1078:	17 94       	ror	r1
    107a:	e1 18       	sub	r14, r1
    107c:	f1 0a       	sbc	r15, r17
    107e:	43 0b       	sbc	r20, r19
    1080:	56 0b       	sbc	r21, r22
    1082:	c9 0b       	sbc	r28, r25
    1084:	d0 09       	sbc	r29, r0
    1086:	98 f0       	brcs	.+38     	; 0x10ae <__ftoa_engine+0x19a>
    1088:	23 95       	inc	r18
    108a:	7e 91       	ld	r23, -X
    108c:	73 95       	inc	r23
    108e:	7a 33       	cpi	r23, 0x3A	; 58
    1090:	08 f0       	brcs	.+2      	; 0x1094 <__ftoa_engine+0x180>
    1092:	70 e3       	ldi	r23, 0x30	; 48
    1094:	7c 93       	st	X, r23
    1096:	20 13       	cpse	r18, r16
    1098:	b8 f7       	brcc	.-18     	; 0x1088 <__ftoa_engine+0x174>
    109a:	7e 91       	ld	r23, -X
    109c:	70 61       	ori	r23, 0x10	; 16
    109e:	7d 93       	st	X+, r23
    10a0:	30 f0       	brcs	.+12     	; 0x10ae <__ftoa_engine+0x19a>
    10a2:	83 95       	inc	r24
    10a4:	71 e3       	ldi	r23, 0x31	; 49
    10a6:	7d 93       	st	X+, r23
    10a8:	70 e3       	ldi	r23, 0x30	; 48
    10aa:	2a 95       	dec	r18
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <__ftoa_engine+0x192>
    10ae:	11 24       	eor	r1, r1
    10b0:	ef 90       	pop	r14
    10b2:	ff 90       	pop	r15
    10b4:	0f 91       	pop	r16
    10b6:	1f 91       	pop	r17
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	99 27       	eor	r25, r25
    10be:	87 fd       	sbrc	r24, 7
    10c0:	90 95       	com	r25
    10c2:	08 95       	ret

000010c4 <strrev>:
    10c4:	dc 01       	movw	r26, r24
    10c6:	fc 01       	movw	r30, r24
    10c8:	67 2f       	mov	r22, r23
    10ca:	71 91       	ld	r23, Z+
    10cc:	77 23       	and	r23, r23
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <strrev+0x4>
    10d0:	32 97       	sbiw	r30, 0x02	; 2
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <strrev+0x18>
    10d4:	7c 91       	ld	r23, X
    10d6:	6d 93       	st	X+, r22
    10d8:	70 83       	st	Z, r23
    10da:	62 91       	ld	r22, -Z
    10dc:	ae 17       	cp	r26, r30
    10de:	bf 07       	cpc	r27, r31
    10e0:	c8 f3       	brcs	.-14     	; 0x10d4 <strrev+0x10>
    10e2:	08 95       	ret

000010e4 <__udivmodhi4>:
    10e4:	aa 1b       	sub	r26, r26
    10e6:	bb 1b       	sub	r27, r27
    10e8:	51 e1       	ldi	r21, 0x11	; 17
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <__udivmodhi4_ep>

000010ec <__udivmodhi4_loop>:
    10ec:	aa 1f       	adc	r26, r26
    10ee:	bb 1f       	adc	r27, r27
    10f0:	a6 17       	cp	r26, r22
    10f2:	b7 07       	cpc	r27, r23
    10f4:	10 f0       	brcs	.+4      	; 0x10fa <__udivmodhi4_ep>
    10f6:	a6 1b       	sub	r26, r22
    10f8:	b7 0b       	sbc	r27, r23

000010fa <__udivmodhi4_ep>:
    10fa:	88 1f       	adc	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	5a 95       	dec	r21
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__udivmodhi4_loop>
    1102:	80 95       	com	r24
    1104:	90 95       	com	r25
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	08 95       	ret

0000110c <_exit>:
    110c:	f8 94       	cli

0000110e <__stop_program>:
    110e:	ff cf       	rjmp	.-2      	; 0x110e <__stop_program>
