
Sonnenaufgangsweckerlampe_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00001792  00001826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800122  00800122  000018e8  2**0
                  ALLOC
  3 .stab         00002b80  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000854  00000000  00000000  00004468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004cbc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000148  00000000  00000000  00004ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ca2  00000000  00000000  00004e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000053b  00000000  00000000  00008ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c57  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000368  00000000  00000000  00009c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000059f  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022fd  00000000  00000000  0000a56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  0000c86c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	a9 c0       	rjmp	.+338    	; 0x156 <__bad_interrupt>
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	a7 c0       	rjmp	.+334    	; 0x156 <__bad_interrupt>
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	a5 c0       	rjmp	.+330    	; 0x156 <__bad_interrupt>
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	a3 c0       	rjmp	.+326    	; 0x156 <__bad_interrupt>
      10:	fb c6       	rjmp	.+3574   	; 0xe08 <__vector_8>
      12:	a1 c0       	rjmp	.+322    	; 0x156 <__bad_interrupt>
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	9f c0       	rjmp	.+318    	; 0x156 <__bad_interrupt>
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	9d c0       	rjmp	.+314    	; 0x156 <__bad_interrupt>
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	9b c0       	rjmp	.+310    	; 0x156 <__bad_interrupt>
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	99 c0       	rjmp	.+306    	; 0x156 <__bad_interrupt>
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 40       	sbci	r16, 0x00	; 0
      28:	7a 10       	cpse	r7, r10
      2a:	f3 5a       	subi	r31, 0xA3	; 163
      2c:	00 a0       	ldd	r0, Z+32	; 0x20
      2e:	72 4e       	sbci	r23, 0xE2	; 226
      30:	18 09       	sbc	r17, r8
      32:	00 10       	cpse	r0, r0
      34:	a5 d4       	rcall	.+2378   	; 0x980 <_Z5einsth+0x30a>
      36:	e8 00       	.word	0x00e8	; ????
      38:	00 e8       	ldi	r16, 0x80	; 128
      3a:	76 48       	sbci	r23, 0x86	; 134
      3c:	17 00       	.word	0x0017	; ????
      3e:	00 e4       	ldi	r16, 0x40	; 64
      40:	0b 54       	subi	r16, 0x4B	; 75
      42:	02 00       	.word	0x0002	; ????
      44:	00 ca       	rjmp	.-3072   	; 0xfffff446 <__eeprom_end+0xff7ef446>
      46:	9a 3b       	cpi	r25, 0xBA	; 186
      48:	00 00       	nop
      4a:	00 e1       	ldi	r16, 0x10	; 16
      4c:	f5 05       	cpc	r31, r5
      4e:	00 00       	nop
      50:	80 96       	adiw	r24, 0x20	; 32
      52:	98 00       	.word	0x0098	; ????
      54:	00 00       	nop
      56:	40 42       	sbci	r20, 0x20	; 32
      58:	0f 00       	.word	0x000f	; ????
      5a:	00 00       	nop
      5c:	a0 86       	std	Z+8, r10	; 0x08
      5e:	01 00       	.word	0x0001	; ????
      60:	00 00       	nop
      62:	10 27       	eor	r17, r16
      64:	00 00       	nop
      66:	00 00       	nop
      68:	e8 03       	fmulsu	r22, r16
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	64 00       	.word	0x0064	; ????
      70:	00 00       	nop
      72:	00 00       	nop
      74:	0a 00       	.word	0x000a	; ????
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	01 00       	.word	0x0001	; ????
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	2c 76       	andi	r18, 0x6C	; 108
      82:	d8 88       	ldd	r13, Y+16	; 0x10
      84:	dc 67       	ori	r29, 0x7C	; 124
      86:	4f 08       	sbc	r4, r15
      88:	23 df       	rcall	.-442    	; 0xfffffed0 <__eeprom_end+0xff7efed0>
      8a:	c1 df       	rcall	.-126    	; 0xe <__zero_reg__+0xd>
      8c:	ae 59       	subi	r26, 0x9E	; 158
      8e:	e1 b1       	in	r30, 0x01	; 1
      90:	b7 96       	adiw	r30, 0x27	; 39
      92:	e5 e3       	ldi	r30, 0x35	; 53
      94:	e4 53       	subi	r30, 0x34	; 52
      96:	c6 3a       	cpi	r28, 0xA6	; 166
      98:	e6 51       	subi	r30, 0x16	; 22
      9a:	99 76       	andi	r25, 0x69	; 105
      9c:	96 e8       	ldi	r25, 0x86	; 134
      9e:	e6 c2       	rjmp	.+1484   	; 0x66c <_Z8erhoehenPhhhPKc+0x50>
      a0:	84 26       	eor	r8, r20
      a2:	eb 89       	ldd	r30, Y+19	; 0x13
      a4:	8c 9b       	sbis	0x11, 4	; 17
      a6:	62 ed       	ldi	r22, 0xD2	; 210
      a8:	40 7c       	andi	r20, 0xC0	; 192
      aa:	6f fc       	.word	0xfc6f	; ????
      ac:	ef bc       	out	0x2f, r14	; 47
      ae:	9c 9f       	mul	r25, r28
      b0:	40 f2       	brcs	.-112    	; 0x42 <__SREG__+0x3>
      b2:	ba a5       	ldd	r27, Y+42	; 0x2a
      b4:	6f a5       	ldd	r22, Y+47	; 0x2f
      b6:	f4 90       	lpm	r15, Z
      b8:	05 5a       	subi	r16, 0xA5	; 165
      ba:	2a f7       	brpl	.-54     	; 0x86 <__SREG__+0x47>
      bc:	5c 93       	st	X, r21
      be:	6b 6c       	ori	r22, 0xCB	; 203
      c0:	f9 67       	ori	r31, 0x79	; 121
      c2:	6d c1       	rjmp	.+730    	; 0x39e <_Z4zeitv+0x2c>
      c4:	1b fc       	.word	0xfc1b	; ????
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	0d 47       	sbci	r16, 0x7D	; 125
      ca:	fe f5       	brtc	.+126    	; 0x14a <.do_clear_bss_loop>
      cc:	20 e6       	ldi	r18, 0x60	; 96
      ce:	b5 00       	.word	0x00b5	; ????
      d0:	d0 ed       	ldi	r29, 0xD0	; 208
      d2:	90 2e       	mov	r9, r16
      d4:	03 00       	.word	0x0003	; ????
      d6:	94 35       	cpi	r25, 0x54	; 84
      d8:	77 05       	cpc	r23, r7
      da:	00 80       	ld	r0, Z
      dc:	84 1e       	adc	r8, r20
      de:	08 00       	.word	0x0008	; ????
      e0:	00 20       	and	r0, r0
      e2:	4e 0a       	sbc	r4, r30
      e4:	00 00       	nop
      e6:	00 c8       	rjmp	.-4096   	; 0xfffff0e8 <__eeprom_end+0xff7ef0e8>
      e8:	0c 33       	cpi	r16, 0x3C	; 60
      ea:	33 33       	cpi	r19, 0x33	; 51
      ec:	33 0f       	add	r19, r19
      ee:	98 6e       	ori	r25, 0xE8	; 232
      f0:	12 83       	std	Z+2, r17	; 0x02
      f2:	11 41       	sbci	r17, 0x11	; 17
      f4:	ef 8d       	ldd	r30, Y+31	; 0x1f
      f6:	21 14       	cp	r2, r1
      f8:	89 3b       	cpi	r24, 0xB9	; 185
      fa:	e6 55       	subi	r30, 0x56	; 86
      fc:	16 cf       	rjmp	.-468    	; 0xffffff2a <__eeprom_end+0xff7eff2a>
      fe:	fe e6       	ldi	r31, 0x6E	; 110
     100:	db 18       	sub	r13, r11
     102:	d1 84       	ldd	r13, Z+9	; 0x09
     104:	4b 38       	cpi	r20, 0x8B	; 139
     106:	1b f7       	brvc	.-58     	; 0xce <__SREG__+0x8f>
     108:	7c 1d       	adc	r23, r12
     10a:	90 1d       	adc	r25, r0
     10c:	a4 bb       	out	0x14, r26	; 20
     10e:	e4 24       	eor	r14, r4
     110:	20 32       	cpi	r18, 0x20	; 32
     112:	84 72       	andi	r24, 0x24	; 36
     114:	5e 22       	and	r5, r30
     116:	81 00       	.word	0x0081	; ????
     118:	c9 f1       	breq	.+114    	; 0x18c <_Z8lcd_datah+0x12>
     11a:	24 ec       	ldi	r18, 0xC4	; 196
     11c:	a1 e5       	ldi	r26, 0x51	; 81
     11e:	3d 27       	eor	r19, r29

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf e5       	ldi	r28, 0x5F	; 95
     126:	d4 e0       	ldi	r29, 0x04	; 4
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	a0 e6       	ldi	r26, 0x60	; 96
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e2 e9       	ldi	r30, 0x92	; 146
     134:	f7 e1       	ldi	r31, 0x17	; 23
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	a2 32       	cpi	r26, 0x22	; 34
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	a2 e2       	ldi	r26, 0x22	; 34
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	a3 34       	cpi	r26, 0x43	; 67
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
     152:	6f d6       	rcall	.+3294   	; 0xe32 <main>
     154:	1c cb       	rjmp	.-2504   	; 0xfffff78e <__eeprom_end+0xff7ef78e>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <_ZL10lcd_enablev>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	c5 9a       	sbi	0x18, 5	; 24
     15a:	88 e1       	ldi	r24, 0x18	; 24
     15c:	8a 95       	dec	r24
     15e:	f1 f7       	brne	.-4      	; 0x15c <_ZL10lcd_enablev+0x4>
     160:	00 c0       	rjmp	.+0      	; 0x162 <_ZL10lcd_enablev+0xa>
     162:	c5 98       	cbi	0x18, 5	; 24
     164:	08 95       	ret

00000166 <_ZL7lcd_outh>:
	}
	aus(1,0);
	aus(2,0);
	lcd_string(NAME(Sekunden));
	while(!debounce(&PIND,3)){
		if (debounce(&PIND,2))
     166:	98 b3       	in	r25, 0x18	; 24
     168:	90 7f       	andi	r25, 0xF0	; 240
		{
			Sekunden++;
     16a:	98 bb       	out	0x18, r25	; 24
     16c:	98 b3       	in	r25, 0x18	; 24
     16e:	82 95       	swap	r24
			if (Sekunden==60)
     170:	8f 70       	andi	r24, 0x0F	; 15
     172:	98 2b       	or	r25, r24
	aus(2,0);
	lcd_string(NAME(Sekunden));
	while(!debounce(&PIND,3)){
		if (debounce(&PIND,2))
		{
			Sekunden++;
     174:	98 bb       	out	0x18, r25	; 24
     176:	f0 df       	rcall	.-32     	; 0x158 <_ZL10lcd_enablev>
     178:	08 95       	ret

0000017a <_Z8lcd_datah>:
			if (Sekunden==60)
			{
				Sekunden=0;
     17a:	cf 93       	push	r28
     17c:	c8 2f       	mov	r28, r24
			}
			aus(1,0);
     17e:	c4 9a       	sbi	0x18, 4	; 24
     180:	f2 df       	rcall	.-28     	; 0x166 <_ZL7lcd_outh>
     182:	8c 2f       	mov	r24, r28
			aus(2,0);
     184:	82 95       	swap	r24
     186:	80 7f       	andi	r24, 0xF0	; 240
     188:	ee df       	rcall	.-36     	; 0x166 <_ZL7lcd_outh>
			lcd_string(NAME(Sekunden));
     18a:	88 e3       	ldi	r24, 0x38	; 56
     18c:	8a 95       	dec	r24
     18e:	f1 f7       	brne	.-4      	; 0x18c <_Z8lcd_datah+0x12>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     190:	00 c0       	rjmp	.+0      	; 0x192 <_Z8lcd_datah+0x18>
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_Z11lcd_commandh>:
     196:	cf 93       	push	r28
     198:	c8 2f       	mov	r28, r24
     19a:	c4 98       	cbi	0x18, 4	; 24
     19c:	e4 df       	rcall	.-56     	; 0x166 <_ZL7lcd_outh>
     19e:	8c 2f       	mov	r24, r28
     1a0:	82 95       	swap	r24
     1a2:	80 7f       	andi	r24, 0xF0	; 240
     1a4:	e0 df       	rcall	.-64     	; 0x166 <_ZL7lcd_outh>
     1a6:	83 e3       	ldi	r24, 0x33	; 51
     1a8:	8a 95       	dec	r24
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_Z11lcd_commandh+0x12>
		
	}
	aus(1,0);
	aus(2,0);
	lcd_string(NAME(Sekunden));
	while(!debounce(&PIND,3)){
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z11lcd_commandh+0x18>
     1ae:	cf 91       	pop	r28
			aus(2,0);
			lcd_string(NAME(Sekunden));
		}
		
	}
}
     1b0:	08 95       	ret

000001b2 <_Z9lcd_clearv>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcd_clear( void )
{
	lcd_command( LCD_CLEAR_DISPLAY );
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	f0 df       	rcall	.-32     	; 0x196 <_Z11lcd_commandh>
     1b6:	83 e3       	ldi	r24, 0x33	; 51
     1b8:	97 e0       	ldi	r25, 0x07	; 7
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <_Z9lcd_clearv+0x8>
     1be:	08 95       	ret

000001c0 <_Z8lcd_initv>:
{
	// verwendete Pins auf Ausgang schalten
	uint8_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
	(1<<LCD_RS) |                // R/S Leitung
	(1<<LCD_EN);                 // Enable Leitung
	LCD_DDR |= pins;
     1c0:	87 b3       	in	r24, 0x17	; 23
     1c2:	8f 63       	ori	r24, 0x3F	; 63
     1c4:	87 bb       	out	0x17, r24	; 23
	
	// initial alle Ausgänge auf Null
	LCD_PORT &= ~pins;
     1c6:	88 b3       	in	r24, 0x18	; 24
     1c8:	80 7c       	andi	r24, 0xC0	; 192
     1ca:	88 bb       	out	0x18, r24	; 24
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	95 e3       	ldi	r25, 0x35	; 53
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z8lcd_initv+0x10>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z8lcd_initv+0x16>
     1d6:	00 00       	nop
	
	// warten auf die Bereitschaft des LCD
	_delay_ms( LCD_BOOTUP_MS );
	
	// Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
	lcd_out( LCD_SOFT_RESET );
     1d8:	80 e3       	ldi	r24, 0x30	; 48
     1da:	c5 df       	rcall	.-118    	; 0x166 <_ZL7lcd_outh>
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	91 e1       	ldi	r25, 0x11	; 17
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z8lcd_initv+0x20>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z8lcd_initv+0x26>
     1e6:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS1 );
	
	lcd_enable();
     1e8:	b7 df       	rcall	.-146    	; 0x158 <_ZL10lcd_enablev>
     1ea:	89 e9       	ldi	r24, 0x99	; 153
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <_Z8lcd_initv+0x2e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <_Z8lcd_initv+0x34>
	_delay_ms( LCD_SOFT_RESET_MS2 );
	
	lcd_enable();
     1f4:	b1 df       	rcall	.-158    	; 0x158 <_ZL10lcd_enablev>
     1f6:	89 e9       	ldi	r24, 0x99	; 153
     1f8:	93 e0       	ldi	r25, 0x03	; 3
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <_Z8lcd_initv+0x3a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z8lcd_initv+0x40>
	_delay_ms( LCD_SOFT_RESET_MS3 );
	
	// 4-bit Modus aktivieren
	lcd_out( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT );
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	b1 df       	rcall	.-158    	; 0x166 <_ZL7lcd_outh>
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	91 e1       	ldi	r25, 0x11	; 17
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <_Z8lcd_initv+0x48>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <_Z8lcd_initv+0x4e>
     20e:	00 00       	nop
	
	// 4-bit Modus / 2 Zeilen / 5x7
	lcd_command( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT |
	LCD_FUNCTION_2LINE |
	LCD_FUNCTION_5X7 );
     210:	88 e2       	ldi	r24, 0x28	; 40
     212:	c1 df       	rcall	.-126    	; 0x196 <_Z11lcd_commandh>
	
	// Display ein / Cursor aus / Blinken aus
	lcd_command( LCD_SET_DISPLAY |
	LCD_DISPLAY_ON |
	LCD_CURSOR_OFF |
	LCD_BLINKING_OFF);
     214:	8c e0       	ldi	r24, 0x0C	; 12
     216:	bf df       	rcall	.-130    	; 0x196 <_Z11lcd_commandh>
	
	// Cursor inkrement / kein Scrollen
	lcd_command( LCD_SET_ENTRY |
	LCD_ENTRY_INCREASE |
	LCD_ENTRY_NOSHIFT );
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	bd df       	rcall	.-134    	; 0x196 <_Z11lcd_commandh>
	
	lcd_clear();
     21c:	ca df       	rcall	.-108    	; 0x1b2 <_Z9lcd_clearv>
     21e:	08 95       	ret

00000220 <_Z8lcd_homev>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
	lcd_command( LCD_CURSOR_HOME );
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	b9 df       	rcall	.-142    	; 0x196 <_Z11lcd_commandh>
     224:	83 e3       	ldi	r24, 0x33	; 51
     226:	97 e0       	ldi	r25, 0x07	; 7
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <_Z8lcd_homev+0x8>
     22c:	08 95       	ret

0000022e <_Z13lcd_setcursorhh>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;
	
	switch (y)
     22e:	62 30       	cpi	r22, 0x02	; 2
     230:	59 f0       	breq	.+22     	; 0x248 <_Z13lcd_setcursorhh+0x1a>
     232:	18 f4       	brcc	.+6      	; 0x23a <_Z13lcd_setcursorhh+0xc>
     234:	61 30       	cpi	r22, 0x01	; 1
     236:	71 f4       	brne	.+28     	; 0x254 <_Z13lcd_setcursorhh+0x26>
     238:	05 c0       	rjmp	.+10     	; 0x244 <_Z13lcd_setcursorhh+0x16>
     23a:	63 30       	cpi	r22, 0x03	; 3
     23c:	39 f0       	breq	.+14     	; 0x24c <_Z13lcd_setcursorhh+0x1e>
     23e:	64 30       	cpi	r22, 0x04	; 4
     240:	49 f4       	brne	.+18     	; 0x254 <_Z13lcd_setcursorhh+0x26>
     242:	06 c0       	rjmp	.+12     	; 0x250 <_Z13lcd_setcursorhh+0x22>
	{
		case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
     244:	80 58       	subi	r24, 0x80	; 128
		break;
     246:	05 c0       	rjmp	.+10     	; 0x252 <_Z13lcd_setcursorhh+0x24>
		
		case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
     248:	80 54       	subi	r24, 0x40	; 64
		break;
     24a:	03 c0       	rjmp	.+6      	; 0x252 <_Z13lcd_setcursorhh+0x24>
		
		case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
     24c:	80 57       	subi	r24, 0x70	; 112
		break;
     24e:	01 c0       	rjmp	.+2      	; 0x252 <_Z13lcd_setcursorhh+0x24>
		
		case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
     250:	80 53       	subi	r24, 0x30	; 48
		
		default:
		return;                                   // für den Fall einer falschen Zeile
	}
	
	lcd_command( data );
     252:	a1 df       	rcall	.-190    	; 0x196 <_Z11lcd_commandh>
     254:	08 95       	ret

00000256 <_Z10lcd_stringPKc>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	ec 01       	movw	r28, r24
	while( *data != '\0' )
     25c:	88 81       	ld	r24, Y
     25e:	88 23       	and	r24, r24
     260:	29 f0       	breq	.+10     	; 0x26c <_Z10lcd_stringPKc+0x16>
}

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
     262:	21 96       	adiw	r28, 0x01	; 1
{
	while( *data != '\0' )
	lcd_data( *data++ );
     264:	8a df       	rcall	.-236    	; 0x17a <_Z8lcd_datah>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
     266:	89 91       	ld	r24, Y+
     268:	81 11       	cpse	r24, r1
     26a:	fc cf       	rjmp	.-8      	; 0x264 <_Z10lcd_stringPKc+0xe>
	lcd_data( *data++ );
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
     272:	97 b1       	in	r25, 0x07	; 7
     274:	8f 71       	andi	r24, 0x1F	; 31
     276:	90 7e       	andi	r25, 0xE0	; 224
     278:	98 2b       	or	r25, r24
     27a:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);
     27c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
     27e:	36 99       	sbic	0x06, 6	; 6
     280:	fe cf       	rjmp	.-4      	; 0x27e <_Z8ADC_Readh+0xc>
	}
	return ADCW;
     282:	24 b1       	in	r18, 0x04	; 4
     284:	35 b1       	in	r19, 0x05	; 5
}
     286:	82 2f       	mov	r24, r18
     288:	93 2f       	mov	r25, r19
     28a:	08 95       	ret

0000028c <_Z6Weckerv>:

#ifndef ZEIT_H_
#define ZEIT_H_

void Wecker(){
	if (WochenTag!=0 && WochenTag!=6)
     28c:	80 91 3f 01 	lds	r24, 0x013F
     290:	88 23       	and	r24, r24
     292:	91 f0       	breq	.+36     	; 0x2b8 <_Z6Weckerv+0x2c>
     294:	86 30       	cpi	r24, 0x06	; 6
     296:	81 f0       	breq	.+32     	; 0x2b8 <_Z6Weckerv+0x2c>
	{
		if(Stunden==WStunden){
     298:	90 91 40 01 	lds	r25, 0x0140
     29c:	80 91 3e 01 	lds	r24, 0x013E
     2a0:	98 13       	cpse	r25, r24
     2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <_Z6Weckerv+0x2c>
			if(Minuten==WMinuten){
     2a4:	90 91 41 01 	lds	r25, 0x0141
     2a8:	80 91 3d 01 	lds	r24, 0x013D
     2ac:	98 13       	cpse	r25, r24
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_Z6Weckerv+0x2c>
				Wan = 1;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 3c 01 	sts	0x013C, r24
				PORTC |= (1<<PC5);
     2b6:	ad 9a       	sbi	0x15, 5	; 21
     2b8:	08 95       	ret

000002ba <_Z10temperaturv>:
			}
		}
	}
}

void temperatur(){
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
	ADC_Read(0);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	d2 df       	rcall	.-92     	; 0x272 <_Z8ADC_Readh>
	uint16_t adcval = ADC_Read(0);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	d0 df       	rcall	.-96     	; 0x272 <_Z8ADC_Readh>
	double span= (double)adcval*(5.0/1024.0);
     2d2:	bc 01       	movw	r22, r24
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	b2 d6       	rcall	.+3428   	; 0x103e <__floatunsisf>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 ea       	ldi	r20, 0xA0	; 160
     2e0:	5b e3       	ldi	r21, 0x3B	; 59
     2e2:	3b d7       	rcall	.+3702   	; 0x115a <__mulsf3>
     2e4:	06 2f       	mov	r16, r22
     2e6:	17 2f       	mov	r17, r23
     2e8:	d8 2f       	mov	r29, r24
     2ea:	c9 2f       	mov	r28, r25
	double widerst = ((double)span*2700.0)/((double)(5-(double)span));
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 ec       	ldi	r19, 0xC0	; 192
     2f0:	48 e2       	ldi	r20, 0x28	; 40
     2f2:	55 e4       	ldi	r21, 0x45	; 69
     2f4:	32 d7       	rcall	.+3684   	; 0x115a <__mulsf3>
     2f6:	6b 01       	movw	r12, r22
     2f8:	7c 01       	movw	r14, r24
     2fa:	20 2f       	mov	r18, r16
     2fc:	31 2f       	mov	r19, r17
     2fe:	4d 2f       	mov	r20, r29
     300:	5c 2f       	mov	r21, r28
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 ea       	ldi	r24, 0xA0	; 160
     308:	90 e4       	ldi	r25, 0x40	; 64
     30a:	cc d5       	rcall	.+2968   	; 0xea4 <__subsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	2c d6       	rcall	.+3160   	; 0xf6e <__divsf3>
	tempera = (100.0/1387.0)*widerst+(50+tempoffset-(100.0/1387.0)*2417.0);
     316:	25 e2       	ldi	r18, 0x25	; 37
     318:	38 ea       	ldi	r19, 0xA8	; 168
     31a:	43 e9       	ldi	r20, 0x93	; 147
     31c:	5d e3       	ldi	r21, 0x3D	; 61
     31e:	1d d7       	rcall	.+3642   	; 0x115a <__mulsf3>
     320:	6b 01       	movw	r12, r22
     322:	7c 01       	movw	r14, r24
     324:	60 91 63 00 	lds	r22, 0x0063
     328:	77 27       	eor	r23, r23
     32a:	67 fd       	sbrc	r22, 7
     32c:	70 95       	com	r23
     32e:	6e 5c       	subi	r22, 0xCE	; 206
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	88 27       	eor	r24, r24
     334:	77 fd       	sbrc	r23, 7
     336:	80 95       	com	r24
     338:	98 2f       	mov	r25, r24
     33a:	83 d6       	rcall	.+3334   	; 0x1042 <__floatsisf>
     33c:	21 ed       	ldi	r18, 0xD1	; 209
     33e:	32 e4       	ldi	r19, 0x42	; 66
     340:	4e e2       	ldi	r20, 0x2E	; 46
     342:	53 e4       	ldi	r21, 0x43	; 67
     344:	af d5       	rcall	.+2910   	; 0xea4 <__subsf3>
     346:	9b 01       	movw	r18, r22
     348:	ac 01       	movw	r20, r24
     34a:	c7 01       	movw	r24, r14
     34c:	b6 01       	movw	r22, r12
     34e:	ab d5       	rcall	.+2902   	; 0xea6 <__addsf3>
     350:	60 93 37 01 	sts	0x0137, r22
     354:	70 93 38 01 	sts	0x0138, r23
     358:	80 93 39 01 	sts	0x0139, r24
     35c:	90 93 3a 01 	sts	0x013A, r25
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	08 95       	ret

00000372 <_Z4zeitv>:

void zeit(){
	sektemp=Sekunden;
     372:	80 91 42 01 	lds	r24, 0x0142
     376:	80 93 3b 01 	sts	0x013B, r24
	if (Sekunden >= 60){
     37a:	8c 33       	cpi	r24, 0x3C	; 60
     37c:	50 f1       	brcs	.+84     	; 0x3d2 <_Z4zeitv+0x60>
		//Temperatur bestimmen
		temperatur();
     37e:	9d df       	rcall	.-198    	; 0x2ba <_Z10temperaturv>
		
		Sekunden = 0;
     380:	10 92 42 01 	sts	0x0142, r1
		Minuten++;
     384:	80 91 41 01 	lds	r24, 0x0141
     388:	8f 5f       	subi	r24, 0xFF	; 255
		if(Minuten >= 60){
     38a:	8c 33       	cpi	r24, 0x3C	; 60
     38c:	18 f4       	brcc	.+6      	; 0x394 <_Z4zeitv+0x22>
	if (Sekunden >= 60){
		//Temperatur bestimmen
		temperatur();
		
		Sekunden = 0;
		Minuten++;
     38e:	80 93 41 01 	sts	0x0141, r24
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <_Z4zeitv+0x30>
		if(Minuten >= 60){
			Minuten = 0;
     394:	10 92 41 01 	sts	0x0141, r1
			Stunden++;
     398:	80 91 40 01 	lds	r24, 0x0140
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 93 40 01 	sts	0x0140, r24
		}
		if(Stunden >= 24){
     3a2:	80 91 40 01 	lds	r24, 0x0140
     3a6:	88 31       	cpi	r24, 0x18	; 24
     3a8:	a0 f0       	brcs	.+40     	; 0x3d2 <_Z4zeitv+0x60>
			Stunden = 0;
     3aa:	10 92 40 01 	sts	0x0140, r1
			WochenTag++;
     3ae:	80 91 3f 01 	lds	r24, 0x013F
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 3f 01 	sts	0x013F, r24
			Tag++;
     3b8:	90 91 62 00 	lds	r25, 0x0062
     3bc:	9f 5f       	subi	r25, 0xFF	; 255
     3be:	90 93 62 00 	sts	0x0062, r25
			if (WochenTag>=7)
     3c2:	87 30       	cpi	r24, 0x07	; 7
     3c4:	10 f0       	brcs	.+4      	; 0x3ca <_Z4zeitv+0x58>
			{
				WochenTag=0;
     3c6:	10 92 3f 01 	sts	0x013F, r1
			{
				if (Tag==28)
				{
				}
			}*/
			Sekunden += sekoffset; //Ausgleich der VerlustSekunden
     3ca:	80 91 36 01 	lds	r24, 0x0136
     3ce:	80 93 42 01 	sts	0x0142, r24
		}
	}
	
	if(Wan==0)
     3d2:	80 91 3c 01 	lds	r24, 0x013C
     3d6:	81 11       	cpse	r24, r1
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <_Z4zeitv+0x6a>
	{
		Wecker();
     3da:	58 df       	rcall	.-336    	; 0x28c <_Z6Weckerv>
     3dc:	08 95       	ret

000003de <_Z4wtagh>:
		lcd_data(0b01000011); //C
	}
}

void wtag(uint8_t numm){
	switch (numm)
     3de:	83 30       	cpi	r24, 0x03	; 3
     3e0:	b9 f0       	breq	.+46     	; 0x410 <_Z4wtagh+0x32>
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <_Z4wtagh+0xe>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	61 f0       	breq	.+24     	; 0x400 <_Z4wtagh+0x22>
     3e8:	78 f4       	brcc	.+30     	; 0x408 <_Z4wtagh+0x2a>
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <_Z4wtagh+0x1a>
     3ec:	85 30       	cpi	r24, 0x05	; 5
     3ee:	c1 f0       	breq	.+48     	; 0x420 <_Z4wtagh+0x42>
     3f0:	98 f0       	brcs	.+38     	; 0x418 <_Z4wtagh+0x3a>
     3f2:	86 30       	cpi	r24, 0x06	; 6
     3f4:	e1 f4       	brne	.+56     	; 0x42e <_Z4wtagh+0x50>
     3f6:	18 c0       	rjmp	.+48     	; 0x428 <_Z4wtagh+0x4a>
	{
		case 0:
		lcd_string("So ");
     3f8:	84 e6       	ldi	r24, 0x64	; 100
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	2c df       	rcall	.-424    	; 0x256 <_Z10lcd_stringPKc>
		break;
     3fe:	08 95       	ret
		
		case 1:
		lcd_string("Mo ");
     400:	88 e6       	ldi	r24, 0x68	; 104
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	28 df       	rcall	.-432    	; 0x256 <_Z10lcd_stringPKc>
		break;
     406:	08 95       	ret
		
		case 2:
		lcd_string("Di ");
     408:	8c e6       	ldi	r24, 0x6C	; 108
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	24 df       	rcall	.-440    	; 0x256 <_Z10lcd_stringPKc>
		break;
     40e:	08 95       	ret
		
		case 3:
		lcd_string("Mi ");
     410:	80 e7       	ldi	r24, 0x70	; 112
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	20 df       	rcall	.-448    	; 0x256 <_Z10lcd_stringPKc>
		break;
     416:	08 95       	ret
		
		case 4:
		lcd_string("Do ");
     418:	84 e7       	ldi	r24, 0x74	; 116
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	1c df       	rcall	.-456    	; 0x256 <_Z10lcd_stringPKc>
		break;
     41e:	08 95       	ret
		
		case 5:
		lcd_string("Fr ");
     420:	88 e7       	ldi	r24, 0x78	; 120
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	18 df       	rcall	.-464    	; 0x256 <_Z10lcd_stringPKc>
		break;
     426:	08 95       	ret
		
		case 6:
		lcd_string("Sa ");
     428:	8c e7       	ldi	r24, 0x7C	; 124
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	14 df       	rcall	.-472    	; 0x256 <_Z10lcd_stringPKc>
     42e:	08 95       	ret

00000430 <_Z11Kalenderaush>:
			break;
	}
}

void Kalenderaus(uint8_t pos){
	switch (pos)
     430:	88 23       	and	r24, r24
     432:	19 f0       	breq	.+6      	; 0x43a <_Z11Kalenderaush+0xa>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	79 f5       	brne	.+94     	; 0x496 <__stack+0x37>
     438:	2b c0       	rjmp	.+86     	; 0x490 <__stack+0x31>
	{
		case 0:
			//alles
			//Wochentag noch nach der alten Methode
			wtag(WochenTag);
     43a:	80 91 3f 01 	lds	r24, 0x013F
     43e:	cf df       	rcall	.-98     	; 0x3de <_Z4wtagh>
			
			//Kalender als normale Tage, an sich nicht implementiert
			itoa(Tag,Buffer,10);
     440:	4a e0       	ldi	r20, 0x0A	; 10
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	62 e2       	ldi	r22, 0x22	; 34
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	80 91 62 00 	lds	r24, 0x0062
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 d7       	rcall	.+3600   	; 0x1260 <itoa>
			lcd_string(Buffer);
     450:	82 e2       	ldi	r24, 0x22	; 34
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	00 df       	rcall	.-512    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(".");
     456:	80 e8       	ldi	r24, 0x80	; 128
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fd de       	rcall	.-518    	; 0x256 <_Z10lcd_stringPKc>
			itoa(Monat,Buffer,10);
     45c:	4a e0       	ldi	r20, 0x0A	; 10
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	62 e2       	ldi	r22, 0x22	; 34
     462:	71 e0       	ldi	r23, 0x01	; 1
     464:	80 91 61 00 	lds	r24, 0x0061
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fa d6       	rcall	.+3572   	; 0x1260 <itoa>
			lcd_string(Buffer);
     46c:	82 e2       	ldi	r24, 0x22	; 34
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	f2 de       	rcall	.-540    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(".");
     472:	80 e8       	ldi	r24, 0x80	; 128
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	ef de       	rcall	.-546    	; 0x256 <_Z10lcd_stringPKc>
			itoa(Jahr,Buffer,10);
     478:	4a e0       	ldi	r20, 0x0A	; 10
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	62 e2       	ldi	r22, 0x22	; 34
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	80 91 60 00 	lds	r24, 0x0060
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	ec d6       	rcall	.+3544   	; 0x1260 <itoa>
			lcd_string(Buffer);
     488:	82 e2       	ldi	r24, 0x22	; 34
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	e4 de       	rcall	.-568    	; 0x256 <_Z10lcd_stringPKc>
			
			break;
     48e:	08 95       	ret
		
		case 1:
			//Nur der Wochentag
			wtag(WochenTag);
     490:	80 91 3f 01 	lds	r24, 0x013F
     494:	a4 df       	rcall	.-184    	; 0x3de <_Z4wtagh>
     496:	08 95       	ret

00000498 <_Z7zeitaush>:
	}
	
}

void zeitaus(uint8_t pos){
	switch (pos)
     498:	88 23       	and	r24, r24
     49a:	21 f0       	breq	.+8      	; 0x4a4 <_Z7zeitaush+0xc>
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	09 f0       	breq	.+2      	; 0x4a2 <_Z7zeitaush+0xa>
     4a0:	42 c0       	rjmp	.+132    	; 0x526 <_Z7zeitaush+0x8e>
     4a2:	1a c0       	rjmp	.+52     	; 0x4d8 <_Z7zeitaush+0x40>
	{
		case 0:
			itoa( Stunden, Buffer, 10 );
     4a4:	4a e0       	ldi	r20, 0x0A	; 10
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	62 e2       	ldi	r22, 0x22	; 34
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	80 91 40 01 	lds	r24, 0x0140
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	d6 d6       	rcall	.+3500   	; 0x1260 <itoa>
			lcd_string(Buffer);
     4b4:	82 e2       	ldi	r24, 0x22	; 34
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	ce de       	rcall	.-612    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(":");
     4ba:	87 ec       	ldi	r24, 0xC7	; 199
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	cb de       	rcall	.-618    	; 0x256 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     4c0:	4a e0       	ldi	r20, 0x0A	; 10
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	62 e2       	ldi	r22, 0x22	; 34
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	80 91 41 01 	lds	r24, 0x0141
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	c8 d6       	rcall	.+3472   	; 0x1260 <itoa>
			lcd_string(Buffer);
     4d0:	82 e2       	ldi	r24, 0x22	; 34
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c0 de       	rcall	.-640    	; 0x256 <_Z10lcd_stringPKc>
			
			break;
     4d6:	08 95       	ret
		
		case 1:
			itoa( Stunden, Buffer, 10 );
     4d8:	4a e0       	ldi	r20, 0x0A	; 10
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	62 e2       	ldi	r22, 0x22	; 34
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	80 91 40 01 	lds	r24, 0x0140
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	bc d6       	rcall	.+3448   	; 0x1260 <itoa>
			lcd_string(Buffer);
     4e8:	82 e2       	ldi	r24, 0x22	; 34
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	b4 de       	rcall	.-664    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(":");
     4ee:	87 ec       	ldi	r24, 0xC7	; 199
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	b1 de       	rcall	.-670    	; 0x256 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     4f4:	4a e0       	ldi	r20, 0x0A	; 10
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	62 e2       	ldi	r22, 0x22	; 34
     4fa:	71 e0       	ldi	r23, 0x01	; 1
     4fc:	80 91 41 01 	lds	r24, 0x0141
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	ae d6       	rcall	.+3420   	; 0x1260 <itoa>
			lcd_string(Buffer);
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	a6 de       	rcall	.-692    	; 0x256 <_Z10lcd_stringPKc>
			lcd_string(":");
     50a:	87 ec       	ldi	r24, 0xC7	; 199
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a3 de       	rcall	.-698    	; 0x256 <_Z10lcd_stringPKc>
			itoa(Sekunden, Buffer,10);
     510:	4a e0       	ldi	r20, 0x0A	; 10
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	62 e2       	ldi	r22, 0x22	; 34
     516:	71 e0       	ldi	r23, 0x01	; 1
     518:	80 91 42 01 	lds	r24, 0x0142
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a0 d6       	rcall	.+3392   	; 0x1260 <itoa>
			lcd_string(Buffer);
     520:	82 e2       	ldi	r24, 0x22	; 34
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	98 de       	rcall	.-720    	; 0x256 <_Z10lcd_stringPKc>
     526:	08 95       	ret

00000528 <_Z3aushh>:
		default:
		break;
	}
}

void aus(uint8_t zeile, uint8_t pos){
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	c6 2f       	mov	r28, r22
	
	switch (zeile)
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	21 f0       	breq	.+8      	; 0x53c <_Z3aushh+0x14>
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	09 f0       	breq	.+2      	; 0x53a <_Z3aushh+0x12>
     538:	6d c0       	rjmp	.+218    	; 0x614 <_Z3aushh+0xec>
     53a:	54 c0       	rjmp	.+168    	; 0x5e4 <_Z3aushh+0xbc>
	{
		case 1:
			lcd_clear();
     53c:	3a de       	rcall	.-908    	; 0x1b2 <_Z9lcd_clearv>
			lcd_home();
     53e:	70 de       	rcall	.-800    	; 0x220 <_Z8lcd_homev>
			switch (pos)
     540:	c3 30       	cpi	r28, 0x03	; 3
     542:	f9 f0       	breq	.+62     	; 0x582 <_Z3aushh+0x5a>
     544:	20 f4       	brcc	.+8      	; 0x54e <_Z3aushh+0x26>
     546:	c1 30       	cpi	r28, 0x01	; 1
     548:	89 f0       	breq	.+34     	; 0x56c <_Z3aushh+0x44>
     54a:	c0 f4       	brcc	.+48     	; 0x57c <_Z3aushh+0x54>
     54c:	07 c0       	rjmp	.+14     	; 0x55c <_Z3aushh+0x34>
     54e:	c5 30       	cpi	r28, 0x05	; 5
     550:	39 f1       	breq	.+78     	; 0x5a0 <_Z3aushh+0x78>
     552:	e0 f0       	brcs	.+56     	; 0x58c <_Z3aushh+0x64>
     554:	c6 30       	cpi	r28, 0x06	; 6
     556:	09 f0       	breq	.+2      	; 0x55a <_Z3aushh+0x32>
     558:	5d c0       	rjmp	.+186    	; 0x614 <_Z3aushh+0xec>
     55a:	3f c0       	rjmp	.+126    	; 0x5da <_Z3aushh+0xb2>
			{
				case 0:
					//Alles ohne Sekunden
					Kalenderaus(0);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	68 df       	rcall	.-304    	; 0x430 <_Z11Kalenderaush>
					lcd_string(" ");
     560:	82 ea       	ldi	r24, 0xA2	; 162
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	78 de       	rcall	.-784    	; 0x256 <_Z10lcd_stringPKc>
					zeitaus(0);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	97 df       	rcall	.-210    	; 0x498 <_Z7zeitaush>
					
					break;
     56a:	54 c0       	rjmp	.+168    	; 0x614 <_Z3aushh+0xec>
					
				case 1:
					//Alles
					Kalenderaus(0);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	60 df       	rcall	.-320    	; 0x430 <_Z11Kalenderaush>
					lcd_string(" ");
     570:	82 ea       	ldi	r24, 0xA2	; 162
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	70 de       	rcall	.-800    	; 0x256 <_Z10lcd_stringPKc>
					zeitaus(1);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	8f df       	rcall	.-226    	; 0x498 <_Z7zeitaush>
					
					break;
     57a:	4c c0       	rjmp	.+152    	; 0x614 <_Z3aushh+0xec>
				case 2:
					//Nur Kalender
					Kalenderaus(0);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	58 df       	rcall	.-336    	; 0x430 <_Z11Kalenderaush>
					
					break;
     580:	49 c0       	rjmp	.+146    	; 0x614 <_Z3aushh+0xec>
				case 3:
					//Nur Zeit mit Sekunden mit WDAY
					Kalenderaus(1);
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	55 df       	rcall	.-342    	; 0x430 <_Z11Kalenderaush>
					zeitaus(1);
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	87 df       	rcall	.-242    	; 0x498 <_Z7zeitaush>
					
					break;
     58a:	44 c0       	rjmp	.+136    	; 0x614 <_Z3aushh+0xec>
					
				case 4:
					lcd_string("Guten Tag");
     58c:	82 e8       	ldi	r24, 0x82	; 130
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	62 de       	rcall	.-828    	; 0x256 <_Z10lcd_stringPKc>
					lcd_setcursor(0,2);
     592:	62 e0       	ldi	r22, 0x02	; 2
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	4b de       	rcall	.-874    	; 0x22e <_Z13lcd_setcursorhh>
					lcd_string("Wecker start");
     598:	8c e8       	ldi	r24, 0x8C	; 140
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	5c de       	rcall	.-840    	; 0x256 <_Z10lcd_stringPKc>
					
					break;
     59e:	3a c0       	rjmp	.+116    	; 0x614 <_Z3aushh+0xec>
				
				case 5:
					//Wecker
					lcd_string("Weckzeit: ");
     5a0:	89 e9       	ldi	r24, 0x99	; 153
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	58 de       	rcall	.-848    	; 0x256 <_Z10lcd_stringPKc>
					itoa(WStunden,Buffer,10);
     5a6:	4a e0       	ldi	r20, 0x0A	; 10
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	62 e2       	ldi	r22, 0x22	; 34
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	80 91 3e 01 	lds	r24, 0x013E
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	55 d6       	rcall	.+3242   	; 0x1260 <itoa>
					lcd_string(Buffer);
     5b6:	82 e2       	ldi	r24, 0x22	; 34
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	4d de       	rcall	.-870    	; 0x256 <_Z10lcd_stringPKc>
					lcd_string(":");
     5bc:	87 ec       	ldi	r24, 0xC7	; 199
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	4a de       	rcall	.-876    	; 0x256 <_Z10lcd_stringPKc>
					itoa(WMinuten,Buffer,10);
     5c2:	4a e0       	ldi	r20, 0x0A	; 10
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	62 e2       	ldi	r22, 0x22	; 34
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	80 91 3d 01 	lds	r24, 0x013D
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	47 d6       	rcall	.+3214   	; 0x1260 <itoa>
					lcd_string(Buffer);
     5d2:	82 e2       	ldi	r24, 0x22	; 34
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	3f de       	rcall	.-898    	; 0x256 <_Z10lcd_stringPKc>
					
					break;
     5d8:	1d c0       	rjmp	.+58     	; 0x614 <_Z3aushh+0xec>
					
				case 6:
					//Zeit ohne Sekunden mit WDAY
					Kalenderaus(1);
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	29 df       	rcall	.-430    	; 0x430 <_Z11Kalenderaush>
					zeitaus(0);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	5b df       	rcall	.-330    	; 0x498 <_Z7zeitaush>
					
					break;
     5e2:	18 c0       	rjmp	.+48     	; 0x614 <_Z3aushh+0xec>
			}
			break;
			
		case 2:
			lcd_setcursor(0,2);
     5e4:	62 e0       	ldi	r22, 0x02	; 2
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	22 de       	rcall	.-956    	; 0x22e <_Z13lcd_setcursorhh>
				switch (pos)
     5ea:	c1 30       	cpi	r28, 0x01	; 1
     5ec:	99 f4       	brne	.+38     	; 0x614 <_Z3aushh+0xec>
					
						break;
						
					case 1:
						//Temperatur
						dtostrf(tempera,2,2,Buffer);
     5ee:	60 91 37 01 	lds	r22, 0x0137
     5f2:	70 91 38 01 	lds	r23, 0x0138
     5f6:	80 91 39 01 	lds	r24, 0x0139
     5fa:	90 91 3a 01 	lds	r25, 0x013A
     5fe:	02 e2       	ldi	r16, 0x22	; 34
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	22 e0       	ldi	r18, 0x02	; 2
     604:	42 e0       	ldi	r20, 0x02	; 2
     606:	0c d6       	rcall	.+3096   	; 0x1220 <dtostrf>
						lcd_string(Buffer);
     608:	c8 01       	movw	r24, r16
     60a:	25 de       	rcall	.-950    	; 0x256 <_Z10lcd_stringPKc>
						lcd_data(0b11011111); //°
     60c:	8f ed       	ldi	r24, 0xDF	; 223
     60e:	b5 dd       	rcall	.-1174   	; 0x17a <_Z8lcd_datah>
						lcd_data(0b01000011); //C
     610:	83 e4       	ldi	r24, 0x43	; 67
     612:	b3 dd       	rcall	.-1178   	; 0x17a <_Z8lcd_datah>
						
						break;
				}
			break;
	}
}
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <_Z8erhoehenPhhhPKc>:
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	e9 01       	movw	r28, r18
     622:	82 99       	sbic	0x10, 2	; 16
     624:	25 c0       	rjmp	.+74     	; 0x670 <_Z8erhoehenPhhhPKc+0x54>
     626:	ef ef       	ldi	r30, 0xFF	; 255
     628:	f3 eb       	ldi	r31, 0xB3	; 179
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <_Z8erhoehenPhhhPKc+0xe>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <_Z8erhoehenPhhhPKc+0x14>
     630:	00 00       	nop
     632:	ef ef       	ldi	r30, 0xFF	; 255
     634:	f3 e2       	ldi	r31, 0x23	; 35
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <_Z8erhoehenPhhhPKc+0x1a>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <_Z8erhoehenPhhhPKc+0x20>
     63c:	00 00       	nop
	if(debounce(&PIND,2))
     63e:	82 99       	sbic	0x10, 2	; 16
     640:	17 c0       	rjmp	.+46     	; 0x670 <_Z8erhoehenPhhhPKc+0x54>
	{
		*var +=1 ;
     642:	fc 01       	movw	r30, r24
     644:	20 81       	ld	r18, Z
     646:	2f 5f       	subi	r18, 0xFF	; 255
		if(*var>=obergrenze){
     648:	26 17       	cp	r18, r22
     64a:	10 f4       	brcc	.+4      	; 0x650 <_Z8erhoehenPhhhPKc+0x34>
//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
	if(debounce(&PIND,2))
	{
		*var +=1 ;
     64c:	20 83       	st	Z, r18
     64e:	02 c0       	rjmp	.+4      	; 0x654 <_Z8erhoehenPhhhPKc+0x38>
		if(*var>=obergrenze){
			*var=0;
     650:	fc 01       	movw	r30, r24
     652:	10 82       	st	Z, r1
		}
		aus(1,pos);
     654:	64 2f       	mov	r22, r20
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	67 df       	rcall	.-306    	; 0x528 <_Z3aushh>
		aus(2,0);
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	64 df       	rcall	.-312    	; 0x528 <_Z3aushh>
		while( *data != '\0' )
     660:	88 81       	ld	r24, Y
     662:	88 23       	and	r24, r24
     664:	29 f0       	breq	.+10     	; 0x670 <_Z8erhoehenPhhhPKc+0x54>
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     666:	21 96       	adiw	r28, 0x01	; 1
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
		lcd_data( *data++ );
     668:	88 dd       	rcall	.-1264   	; 0x17a <_Z8lcd_datah>
		if(*var>=obergrenze){
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
     66a:	89 91       	ld	r24, Y+
     66c:	81 11       	cpse	r24, r1
     66e:	fc cf       	rjmp	.-8      	; 0x668 <_Z8erhoehenPhhhPKc+0x4c>
		lcd_data( *data++ );
		
	}
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <_Z5einsth>:


//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	uint8_t temp=0;
	//abfrage wass eingestellt werden soll
	switch (posit)
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	09 f4       	brne	.+2      	; 0x682 <_Z5einsth+0xc>
     680:	b3 c0       	rjmp	.+358    	; 0x7e8 <_Z5einsth+0x172>
     682:	30 f4       	brcc	.+12     	; 0x690 <_Z5einsth+0x1a>
     684:	88 23       	and	r24, r24
     686:	59 f0       	breq	.+22     	; 0x69e <_Z5einsth+0x28>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	09 f0       	breq	.+2      	; 0x68e <_Z5einsth+0x18>
     68c:	9d c1       	rjmp	.+826    	; 0x9c8 <_Z5einsth+0x352>
     68e:	63 c0       	rjmp	.+198    	; 0x756 <_Z5einsth+0xe0>
     690:	83 30       	cpi	r24, 0x03	; 3
     692:	09 f4       	brne	.+2      	; 0x696 <_Z5einsth+0x20>
     694:	f8 c0       	rjmp	.+496    	; 0x886 <_Z5einsth+0x210>
     696:	84 30       	cpi	r24, 0x04	; 4
     698:	09 f0       	breq	.+2      	; 0x69c <_Z5einsth+0x26>
     69a:	96 c1       	rjmp	.+812    	; 0x9c8 <_Z5einsth+0x352>
     69c:	43 c1       	rjmp	.+646    	; 0x924 <_Z5einsth+0x2ae>
	{
	case 0:
		//Einstellen Zeit
		//alles einstellen bis auf Sekunden
		//diese werden auf 0 gesetzt
		aus(1,6);
     69e:	66 e0       	ldi	r22, 0x06	; 6
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	42 df       	rcall	.-380    	; 0x528 <_Z3aushh>
		aus(2,0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	3f df       	rcall	.-386    	; 0x528 <_Z3aushh>
		lcd_string(NAME(Stunden));
     6aa:	8c ed       	ldi	r24, 0xDC	; 220
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	d3 dd       	rcall	.-1114   	; 0x256 <_Z10lcd_stringPKc>

//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
	uint8_t temp=0;
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	83 99       	sbic	0x10, 3	; 16
     6b4:	28 c0       	rjmp	.+80     	; 0x706 <_Z5einsth+0x90>
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	93 eb       	ldi	r25, 0xB3	; 179
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <_Z5einsth+0x44>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <_Z5einsth+0x4a>
     6c0:	00 00       	nop
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	93 e2       	ldi	r25, 0x23	; 35
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <_Z5einsth+0x50>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <_Z5einsth+0x56>
     6cc:	00 00       	nop
		aus(1,6);
		aus(2,0);
		lcd_string(NAME(Stunden));
		while(temp<3)
		{
			if(debounce(&PIND,3))
     6ce:	83 99       	sbic	0x10, 3	; 16
     6d0:	1a c0       	rjmp	.+52     	; 0x706 <_Z5einsth+0x90>
			{
				temp++;
     6d2:	cf 5f       	subi	r28, 0xFF	; 255
				lcd_clear();
     6d4:	6e dd       	rcall	.-1316   	; 0x1b2 <_Z9lcd_clearv>
				aus(1,6);
     6d6:	66 e0       	ldi	r22, 0x06	; 6
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	26 df       	rcall	.-436    	; 0x528 <_Z3aushh>
				aus(2,0);
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	23 df       	rcall	.-442    	; 0x528 <_Z3aushh>
				switch (temp)
     6e2:	c1 30       	cpi	r28, 0x01	; 1
     6e4:	41 f0       	breq	.+16     	; 0x6f6 <_Z5einsth+0x80>
     6e6:	18 f0       	brcs	.+6      	; 0x6ee <_Z5einsth+0x78>
     6e8:	c2 30       	cpi	r28, 0x02	; 2
     6ea:	69 f4       	brne	.+26     	; 0x706 <_Z5einsth+0x90>
     6ec:	08 c0       	rjmp	.+16     	; 0x6fe <_Z5einsth+0x88>
				{
					case 0:
						lcd_string(NAME(Stunden));
     6ee:	8c ed       	ldi	r24, 0xDC	; 220
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	b1 dd       	rcall	.-1182   	; 0x256 <_Z10lcd_stringPKc>
     6f4:	0e c0       	rjmp	.+28     	; 0x712 <_Z5einsth+0x9c>
						break;
					case 1:
						lcd_string(NAME(Minuten));
     6f6:	85 ee       	ldi	r24, 0xE5	; 229
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	ad dd       	rcall	.-1190   	; 0x256 <_Z10lcd_stringPKc>
     6fc:	13 c0       	rjmp	.+38     	; 0x724 <_Z5einsth+0xae>
						break;
					case 2:
						lcd_string(NAME(WochenTag));
     6fe:	84 ea       	ldi	r24, 0xA4	; 164
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	a9 dd       	rcall	.-1198   	; 0x256 <_Z10lcd_stringPKc>
     704:	18 c0       	rjmp	.+48     	; 0x736 <_Z5einsth+0xc0>
				zeit();
				//ausgabe(0);
				//Es muss eine richtge Ausgabe speziell fuer dieses Einstellung geschrieben werden
				//besonders wichtig ist, dass die alte Ausgaba ersetzt werden muss
			}*/
			switch (temp)
     706:	c1 30       	cpi	r28, 0x01	; 1
     708:	69 f0       	breq	.+26     	; 0x724 <_Z5einsth+0xae>
     70a:	18 f0       	brcs	.+6      	; 0x712 <_Z5einsth+0x9c>
     70c:	c2 30       	cpi	r28, 0x02	; 2
     70e:	e1 f4       	brne	.+56     	; 0x748 <_Z5einsth+0xd2>
     710:	12 c0       	rjmp	.+36     	; 0x736 <_Z5einsth+0xc0>
			{
			case 0:
				erhoehen(&Stunden,60,6,NAME(Stunden));
     712:	2c ed       	ldi	r18, 0xDC	; 220
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	46 e0       	ldi	r20, 0x06	; 6
     718:	6c e3       	ldi	r22, 0x3C	; 60
     71a:	80 e4       	ldi	r24, 0x40	; 64
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	7e df       	rcall	.-260    	; 0x61c <_Z8erhoehenPhhhPKc>
				break;
     720:	c0 e0       	ldi	r28, 0x00	; 0
     722:	c7 cf       	rjmp	.-114    	; 0x6b2 <_Z5einsth+0x3c>
			case 1:
				erhoehen(&Minuten,60,6,NAME(Minuten));
     724:	25 ee       	ldi	r18, 0xE5	; 229
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	46 e0       	ldi	r20, 0x06	; 6
     72a:	6c e3       	ldi	r22, 0x3C	; 60
     72c:	81 e4       	ldi	r24, 0x41	; 65
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	75 df       	rcall	.-278    	; 0x61c <_Z8erhoehenPhhhPKc>
				break;
     732:	c1 e0       	ldi	r28, 0x01	; 1
     734:	be cf       	rjmp	.-132    	; 0x6b2 <_Z5einsth+0x3c>
			case 2:
				//nur jetzt WochenTag
				erhoehen(&WochenTag,7,6,NAME(WochenTag));
     736:	24 ea       	ldi	r18, 0xA4	; 164
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	46 e0       	ldi	r20, 0x06	; 6
     73c:	67 e0       	ldi	r22, 0x07	; 7
     73e:	8f e3       	ldi	r24, 0x3F	; 63
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	6c df       	rcall	.-296    	; 0x61c <_Z8erhoehenPhhhPKc>
				break;
     744:	c2 e0       	ldi	r28, 0x02	; 2
     746:	b5 cf       	rjmp	.-150    	; 0x6b2 <_Z5einsth+0x3c>
		//alles einstellen bis auf Sekunden
		//diese werden auf 0 gesetzt
		aus(1,6);
		aus(2,0);
		lcd_string(NAME(Stunden));
		while(temp<3)
     748:	c3 30       	cpi	r28, 0x03	; 3
     74a:	08 f4       	brcc	.+2      	; 0x74e <_Z5einsth+0xd8>
     74c:	b2 cf       	rjmp	.-156    	; 0x6b2 <_Z5einsth+0x3c>
				break;
			default:
				break;
			}
		}
		Sekunden=0;
     74e:	10 92 42 01 	sts	0x0142, r1
		return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	46 c1       	rjmp	.+652    	; 0x9e2 <_Z5einsth+0x36c>
		break;
	case 1:
		//Einstellen der Tage
		temp = 0;
		aus(1,0);
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	e6 de       	rcall	.-564    	; 0x528 <_Z3aushh>
		aus(2,0);
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	e3 de       	rcall	.-570    	; 0x528 <_Z3aushh>
		lcd_string(NAME(Tag));
     762:	88 e8       	ldi	r24, 0x88	; 136
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	77 dd       	rcall	.-1298   	; 0x256 <_Z10lcd_stringPKc>
		Sekunden=0;
		return 0;
		break;
	case 1:
		//Einstellen der Tage
		temp = 0;
     768:	c0 e0       	ldi	r28, 0x00	; 0
     76a:	83 99       	sbic	0x10, 3	; 16
     76c:	15 c0       	rjmp	.+42     	; 0x798 <_Z5einsth+0x122>
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	93 eb       	ldi	r25, 0xB3	; 179
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <_Z5einsth+0xfc>
     776:	00 c0       	rjmp	.+0      	; 0x778 <_Z5einsth+0x102>
     778:	00 00       	nop
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	93 e2       	ldi	r25, 0x23	; 35
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <_Z5einsth+0x108>
     782:	00 c0       	rjmp	.+0      	; 0x784 <_Z5einsth+0x10e>
     784:	00 00       	nop
		aus(1,0);
		aus(2,0);
		lcd_string(NAME(Tag));
		while(temp< 3)
		{
			if(debounce(&PIND,3))
     786:	83 99       	sbic	0x10, 3	; 16
     788:	07 c0       	rjmp	.+14     	; 0x798 <_Z5einsth+0x122>
			{
				temp++;
     78a:	cf 5f       	subi	r28, 0xFF	; 255
				aus(1,0);
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	cb de       	rcall	.-618    	; 0x528 <_Z3aushh>
				aus(2,0);
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	c8 de       	rcall	.-624    	; 0x528 <_Z3aushh>
			}
			if(Sekunden!=sektemp){
     798:	90 91 42 01 	lds	r25, 0x0142
     79c:	80 91 3b 01 	lds	r24, 0x013B
     7a0:	98 13       	cpse	r25, r24
				zeit();
     7a2:	e7 dd       	rcall	.-1074   	; 0x372 <_Z4zeitv>
			}
			switch (temp){
     7a4:	c1 30       	cpi	r28, 0x01	; 1
     7a6:	61 f0       	breq	.+24     	; 0x7c0 <_Z5einsth+0x14a>
     7a8:	18 f0       	brcs	.+6      	; 0x7b0 <_Z5einsth+0x13a>
     7aa:	c2 30       	cpi	r28, 0x02	; 2
     7ac:	c9 f4       	brne	.+50     	; 0x7e0 <_Z5einsth+0x16a>
     7ae:	10 c0       	rjmp	.+32     	; 0x7d0 <_Z5einsth+0x15a>
			case 0:
				erhoehen(&Tag,30,0,NAME(Tag));
     7b0:	28 e8       	ldi	r18, 0x88	; 136
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	6e e1       	ldi	r22, 0x1E	; 30
     7b8:	82 e6       	ldi	r24, 0x62	; 98
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2f df       	rcall	.-418    	; 0x61c <_Z8erhoehenPhhhPKc>
				break;
     7be:	d5 cf       	rjmp	.-86     	; 0x76a <_Z5einsth+0xf4>
			case 1:
				erhoehen(&Monat,12,0,NAME(Monat));
     7c0:	2e ea       	ldi	r18, 0xAE	; 174
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	6c e0       	ldi	r22, 0x0C	; 12
     7c8:	81 e6       	ldi	r24, 0x61	; 97
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	27 df       	rcall	.-434    	; 0x61c <_Z8erhoehenPhhhPKc>
				break;
     7ce:	cd cf       	rjmp	.-102    	; 0x76a <_Z5einsth+0xf4>
			case 2:
				erhoehen(&Jahr,30,0,NAME(Jahr));
     7d0:	24 eb       	ldi	r18, 0xB4	; 180
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	6e e1       	ldi	r22, 0x1E	; 30
     7d8:	80 e6       	ldi	r24, 0x60	; 96
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	1f df       	rcall	.-450    	; 0x61c <_Z8erhoehenPhhhPKc>
				break;
     7de:	c5 cf       	rjmp	.-118    	; 0x76a <_Z5einsth+0xf4>
		//Einstellen der Tage
		temp = 0;
		aus(1,0);
		aus(2,0);
		lcd_string(NAME(Tag));
		while(temp< 3)
     7e0:	c3 30       	cpi	r28, 0x03	; 3
     7e2:	18 f2       	brcs	.-122    	; 0x76a <_Z5einsth+0xf4>
				break;
			default:
				break;
			}
		}
		return 0;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	fd c0       	rjmp	.+506    	; 0x9e2 <_Z5einsth+0x36c>
		break;
	case 2:
		//Einstellen Sekundenoffset
		//default =0
		lcd_clear();
     7e8:	e4 dc       	rcall	.-1592   	; 0x1b2 <_Z9lcd_clearv>
		lcd_home();
     7ea:	1a dd       	rcall	.-1484   	; 0x220 <_Z8lcd_homev>
		lcd_string("Sekundenoffset:");
     7ec:	89 eb       	ldi	r24, 0xB9	; 185
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	32 dd       	rcall	.-1436   	; 0x256 <_Z10lcd_stringPKc>
		aus(2,0);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	98 de       	rcall	.-720    	; 0x528 <_Z3aushh>
		itoa(sekoffset,Buffer,10);
     7f8:	80 91 36 01 	lds	r24, 0x0136
     7fc:	4a e0       	ldi	r20, 0x0A	; 10
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	62 e2       	ldi	r22, 0x22	; 34
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	99 27       	eor	r25, r25
     806:	87 fd       	sbrc	r24, 7
     808:	90 95       	com	r25
     80a:	2a d5       	rcall	.+2644   	; 0x1260 <itoa>
		lcd_string(Buffer);
     80c:	82 e2       	ldi	r24, 0x22	; 34
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	22 dd       	rcall	.-1468   	; 0x256 <_Z10lcd_stringPKc>
		if(Sekunden!=sektemp){
     812:	90 91 42 01 	lds	r25, 0x0142
     816:	80 91 3b 01 	lds	r24, 0x013B
     81a:	98 13       	cpse	r25, r24
			zeit();
     81c:	aa dd       	rcall	.-1196   	; 0x372 <_Z4zeitv>
     81e:	82 99       	sbic	0x10, 2	; 16
     820:	d5 c0       	rjmp	.+426    	; 0x9cc <_Z5einsth+0x356>
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	93 eb       	ldi	r25, 0xB3	; 179
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <_Z5einsth+0x1b0>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <_Z5einsth+0x1b6>
     82c:	00 00       	nop
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	93 e2       	ldi	r25, 0x23	; 35
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <_Z5einsth+0x1bc>
     836:	00 c0       	rjmp	.+0      	; 0x838 <_Z5einsth+0x1c2>
     838:	00 00       	nop
		}
		if(debounce(&PIND,2))
     83a:	82 99       	sbic	0x10, 2	; 16
     83c:	c9 c0       	rjmp	.+402    	; 0x9d0 <_Z5einsth+0x35a>
		{
			sekoffset++;
     83e:	80 91 36 01 	lds	r24, 0x0136
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	80 93 36 01 	sts	0x0136, r24
			lcd_clear();
     848:	b4 dc       	rcall	.-1688   	; 0x1b2 <_Z9lcd_clearv>
			lcd_home();
     84a:	ea dc       	rcall	.-1580   	; 0x220 <_Z8lcd_homev>
			lcd_string("Sekundenoffset:");
     84c:	89 eb       	ldi	r24, 0xB9	; 185
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	02 dd       	rcall	.-1532   	; 0x256 <_Z10lcd_stringPKc>
			aus(2,0);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	68 de       	rcall	.-816    	; 0x528 <_Z3aushh>
			itoa(sekoffset,Buffer,10);
     858:	80 91 36 01 	lds	r24, 0x0136
     85c:	4a e0       	ldi	r20, 0x0A	; 10
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	62 e2       	ldi	r22, 0x22	; 34
     862:	71 e0       	ldi	r23, 0x01	; 1
     864:	99 27       	eor	r25, r25
     866:	87 fd       	sbrc	r24, 7
     868:	90 95       	com	r25
     86a:	fa d4       	rcall	.+2548   	; 0x1260 <itoa>
			lcd_string(Buffer);
     86c:	82 e2       	ldi	r24, 0x22	; 34
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	f2 dc       	rcall	.-1564   	; 0x256 <_Z10lcd_stringPKc>
			
			if (sekoffset>=5)
     872:	80 91 36 01 	lds	r24, 0x0136
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	0c f4       	brge	.+2      	; 0x87c <_Z5einsth+0x206>
     87a:	ac c0       	rjmp	.+344    	; 0x9d4 <_Z5einsth+0x35e>
			{
				sekoffset=-5;
     87c:	8b ef       	ldi	r24, 0xFB	; 251
     87e:	80 93 36 01 	sts	0x0136, r24
			}
				
		}
		
		return 0;
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	ae c0       	rjmp	.+348    	; 0x9e2 <_Z5einsth+0x36c>
		break;
	case 3:
		//Einstellen Temperaturoffset
		//default = 0;
		lcd_clear();
     886:	95 dc       	rcall	.-1750   	; 0x1b2 <_Z9lcd_clearv>
		lcd_home();
     888:	cb dc       	rcall	.-1642   	; 0x220 <_Z8lcd_homev>
		lcd_string("Temperaturoffset:");
     88a:	89 ec       	ldi	r24, 0xC9	; 201
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	e3 dc       	rcall	.-1594   	; 0x256 <_Z10lcd_stringPKc>
		aus(2,0);
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	49 de       	rcall	.-878    	; 0x528 <_Z3aushh>
		itoa(tempoffset,Buffer,10);
     896:	80 91 63 00 	lds	r24, 0x0063
     89a:	4a e0       	ldi	r20, 0x0A	; 10
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	62 e2       	ldi	r22, 0x22	; 34
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	99 27       	eor	r25, r25
     8a4:	87 fd       	sbrc	r24, 7
     8a6:	90 95       	com	r25
     8a8:	db d4       	rcall	.+2486   	; 0x1260 <itoa>
		lcd_string(Buffer);
     8aa:	82 e2       	ldi	r24, 0x22	; 34
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	d3 dc       	rcall	.-1626   	; 0x256 <_Z10lcd_stringPKc>
		
		if(Sekunden!=sektemp){
     8b0:	90 91 42 01 	lds	r25, 0x0142
     8b4:	80 91 3b 01 	lds	r24, 0x013B
     8b8:	98 13       	cpse	r25, r24
			zeit();
     8ba:	5b dd       	rcall	.-1354   	; 0x372 <_Z4zeitv>
     8bc:	82 99       	sbic	0x10, 2	; 16
     8be:	8c c0       	rjmp	.+280    	; 0x9d8 <_Z5einsth+0x362>
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	93 eb       	ldi	r25, 0xB3	; 179
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <_Z5einsth+0x24e>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <_Z5einsth+0x254>
     8ca:	00 00       	nop
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	93 e2       	ldi	r25, 0x23	; 35
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <_Z5einsth+0x25a>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <_Z5einsth+0x260>
     8d6:	00 00       	nop
		}
		if(debounce(&PIND,2))
     8d8:	82 99       	sbic	0x10, 2	; 16
     8da:	80 c0       	rjmp	.+256    	; 0x9dc <_Z5einsth+0x366>
		{
			tempoffset++;
     8dc:	80 91 63 00 	lds	r24, 0x0063
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 63 00 	sts	0x0063, r24
			lcd_clear();
     8e6:	65 dc       	rcall	.-1846   	; 0x1b2 <_Z9lcd_clearv>
			lcd_home();
     8e8:	9b dc       	rcall	.-1738   	; 0x220 <_Z8lcd_homev>
			lcd_string("Temperaturoffset:");
     8ea:	89 ec       	ldi	r24, 0xC9	; 201
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	b3 dc       	rcall	.-1690   	; 0x256 <_Z10lcd_stringPKc>
			aus(2,0);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	19 de       	rcall	.-974    	; 0x528 <_Z3aushh>
			itoa(tempoffset,Buffer,10);
     8f6:	80 91 63 00 	lds	r24, 0x0063
     8fa:	4a e0       	ldi	r20, 0x0A	; 10
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	62 e2       	ldi	r22, 0x22	; 34
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	99 27       	eor	r25, r25
     904:	87 fd       	sbrc	r24, 7
     906:	90 95       	com	r25
     908:	ab d4       	rcall	.+2390   	; 0x1260 <itoa>
			lcd_string(Buffer);
     90a:	82 e2       	ldi	r24, 0x22	; 34
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	a3 dc       	rcall	.-1722   	; 0x256 <_Z10lcd_stringPKc>
			
			if (tempoffset>=10)
     910:	80 91 63 00 	lds	r24, 0x0063
     914:	8a 30       	cpi	r24, 0x0A	; 10
     916:	0c f4       	brge	.+2      	; 0x91a <_Z5einsth+0x2a4>
     918:	63 c0       	rjmp	.+198    	; 0x9e0 <_Z5einsth+0x36a>
			{
				tempoffset=-10;
     91a:	86 ef       	ldi	r24, 0xF6	; 246
     91c:	80 93 63 00 	sts	0x0063, r24
			}
			
		}
		
		return 0;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	5f c0       	rjmp	.+190    	; 0x9e2 <_Z5einsth+0x36c>
		break;
	case 4: //Wecker einstellen
		temp = 0;
		aus(1,5);
     924:	65 e0       	ldi	r22, 0x05	; 5
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	ff dd       	rcall	.-1026   	; 0x528 <_Z3aushh>
		aus(2,0);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	fc dd       	rcall	.-1032   	; 0x528 <_Z3aushh>
		lcd_string(NAME(WStunden));
     930:	8b ed       	ldi	r24, 0xDB	; 219
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 dc       	rcall	.-1760   	; 0x256 <_Z10lcd_stringPKc>
		}
		
		return 0;
		break;
	case 4: //Wecker einstellen
		temp = 0;
     936:	c0 e0       	ldi	r28, 0x00	; 0
				case 0:
					erhoehen(&WStunden,24,5,NAME(WStunden));
					break;
				case 1:
					erhoehen(&WMinuten,60,5,NAME(WMinuten));
					break;
     938:	11 e0       	ldi	r17, 0x01	; 1
			}
			switch (temp)
			{
				case 0:
					erhoehen(&WStunden,24,5,NAME(WStunden));
					break;
     93a:	d0 e0       	ldi	r29, 0x00	; 0
		aus(1,5);
		aus(2,0);
		lcd_string(NAME(WStunden));
		while (temp<2)
		{
			if (Sekunden!=sektemp)
     93c:	20 91 42 01 	lds	r18, 0x0142
     940:	90 91 3b 01 	lds	r25, 0x013B
     944:	29 13       	cpse	r18, r25
			{
				zeit();
     946:	15 dd       	rcall	.-1494   	; 0x372 <_Z4zeitv>
     948:	83 99       	sbic	0x10, 3	; 16
     94a:	22 c0       	rjmp	.+68     	; 0x990 <_Z5einsth+0x31a>
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	93 eb       	ldi	r25, 0xB3	; 179
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <_Z5einsth+0x2da>
     954:	00 c0       	rjmp	.+0      	; 0x956 <_Z5einsth+0x2e0>
     956:	00 00       	nop
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	93 e2       	ldi	r25, 0x23	; 35
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <_Z5einsth+0x2e6>
     960:	00 c0       	rjmp	.+0      	; 0x962 <_Z5einsth+0x2ec>
     962:	00 00       	nop
			}
			if(debounce(&PIND,3))
     964:	83 99       	sbic	0x10, 3	; 16
     966:	14 c0       	rjmp	.+40     	; 0x990 <_Z5einsth+0x31a>
			{
				temp++;
     968:	cf 5f       	subi	r28, 0xFF	; 255
				aus(1,5);
     96a:	65 e0       	ldi	r22, 0x05	; 5
     96c:	81 2f       	mov	r24, r17
     96e:	dc dd       	rcall	.-1096   	; 0x528 <_Z3aushh>
				aus(2,0);
     970:	6d 2f       	mov	r22, r29
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	d9 dd       	rcall	.-1102   	; 0x528 <_Z3aushh>
				switch (temp)
     976:	cc 23       	and	r28, r28
     978:	19 f0       	breq	.+6      	; 0x980 <_Z5einsth+0x30a>
     97a:	c1 30       	cpi	r28, 0x01	; 1
     97c:	49 f4       	brne	.+18     	; 0x990 <_Z5einsth+0x31a>
     97e:	04 c0       	rjmp	.+8      	; 0x988 <_Z5einsth+0x312>
				{
					case 0:
						lcd_string(NAME(WStunden));
     980:	8b ed       	ldi	r24, 0xDB	; 219
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	68 dc       	rcall	.-1840   	; 0x256 <_Z10lcd_stringPKc>
     986:	09 c0       	rjmp	.+18     	; 0x99a <_Z5einsth+0x324>
						break;
					case 1:
						lcd_string(NAME(WMinuten));
     988:	84 ee       	ldi	r24, 0xE4	; 228
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	64 dc       	rcall	.-1848   	; 0x256 <_Z10lcd_stringPKc>
     98e:	0e c0       	rjmp	.+28     	; 0x9ac <_Z5einsth+0x336>
						break;
					default:
						break;
				}
			}
			switch (temp)
     990:	cc 23       	and	r28, r28
     992:	19 f0       	breq	.+6      	; 0x99a <_Z5einsth+0x324>
     994:	c1 30       	cpi	r28, 0x01	; 1
     996:	99 f4       	brne	.+38     	; 0x9be <_Z5einsth+0x348>
     998:	09 c0       	rjmp	.+18     	; 0x9ac <_Z5einsth+0x336>
			{
				case 0:
					erhoehen(&WStunden,24,5,NAME(WStunden));
     99a:	2b ed       	ldi	r18, 0xDB	; 219
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	45 e0       	ldi	r20, 0x05	; 5
     9a0:	68 e1       	ldi	r22, 0x18	; 24
     9a2:	8e e3       	ldi	r24, 0x3E	; 62
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	3a de       	rcall	.-908    	; 0x61c <_Z8erhoehenPhhhPKc>
					break;
     9a8:	cd 2f       	mov	r28, r29
     9aa:	c8 cf       	rjmp	.-112    	; 0x93c <_Z5einsth+0x2c6>
				case 1:
					erhoehen(&WMinuten,60,5,NAME(WMinuten));
     9ac:	24 ee       	ldi	r18, 0xE4	; 228
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	45 e0       	ldi	r20, 0x05	; 5
     9b2:	6c e3       	ldi	r22, 0x3C	; 60
     9b4:	8d e3       	ldi	r24, 0x3D	; 61
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	31 de       	rcall	.-926    	; 0x61c <_Z8erhoehenPhhhPKc>
					break;
     9ba:	c1 2f       	mov	r28, r17
     9bc:	bf cf       	rjmp	.-130    	; 0x93c <_Z5einsth+0x2c6>
	case 4: //Wecker einstellen
		temp = 0;
		aus(1,5);
		aus(2,0);
		lcd_string(NAME(WStunden));
		while (temp<2)
     9be:	c2 30       	cpi	r28, 0x02	; 2
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <_Z5einsth+0x34e>
     9c2:	bc cf       	rjmp	.-136    	; 0x93c <_Z5einsth+0x2c6>
					erhoehen(&WMinuten,60,5,NAME(WMinuten));
					break;
			}
			
		}
		return 0;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <_Z5einsth+0x36c>
		break;
//	case //alle einstellungen der Wecker
//		return 0;
//		break;
	default:
		return 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <_Z5einsth+0x36c>
				sekoffset=-5;
			}
				
		}
		
		return 0;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <_Z5einsth+0x36c>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <_Z5einsth+0x36c>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <_Z5einsth+0x36c>
				tempoffset=-10;
			}
			
		}
		
		return 0;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <_Z5einsth+0x36c>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <_Z5einsth+0x36c>
     9e0:	80 e0       	ldi	r24, 0x00	; 0
//		break;
	default:
		return 1;
		break;
	}
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	08 95       	ret

000009ea <_Z10zeitsetzenv>:

#ifndef EINSTELLUNGEN_H_
#define EINSTELLUNGEN_H_

void zeitsetzen(){
	Minuten = 34;
     9ea:	82 e2       	ldi	r24, 0x22	; 34
     9ec:	80 93 41 01 	sts	0x0141, r24
	Stunden	= 5;
     9f0:	85 e0       	ldi	r24, 0x05	; 5
     9f2:	80 93 40 01 	sts	0x0140, r24
	Sekunden = 0;
     9f6:	10 92 42 01 	sts	0x0142, r1
	WochenTag=6;
     9fa:	96 e0       	ldi	r25, 0x06	; 6
     9fc:	90 93 3f 01 	sts	0x013F, r25
	WStunden=5;
     a00:	80 93 3e 01 	sts	0x013E, r24
	WMinuten=35;
     a04:	83 e2       	ldi	r24, 0x23	; 35
     a06:	80 93 3d 01 	sts	0x013D, r24
//	einsweck();
//	einstzeit();
	einst(4);
     a0a:	84 e0       	ldi	r24, 0x04	; 4
     a0c:	34 de       	rcall	.-920    	; 0x676 <_Z5einsth>
//	einst(1); //Noch keinen Kalender, da er in den Einstellungen zu komplex ist
	einst(0);
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	32 de       	rcall	.-924    	; 0x676 <_Z5einsth>
	sekoffset=1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 36 01 	sts	0x0136, r24
     a18:	08 95       	ret

00000a1a <_Z4menuv>:


#ifndef MENUE_H_
#define MENUE_H_

uint8_t menu(){
     a1a:	cf 93       	push	r28
	uint8_t posit = 0;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
						temperatur();
						return 1;
					}
				}
				temperatur();
				posit++;
     a1e:	c6 e0       	ldi	r28, 0x06	; 6

uint8_t menu(){
	uint8_t posit = 0;
	while (true)
	{
		switch (posit)
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	09 f4       	brne	.+2      	; 0xa26 <_Z4menuv+0xc>
     a24:	d9 c0       	rjmp	.+434    	; 0xbd8 <_Z4menuv+0x1be>
     a26:	30 f4       	brcc	.+12     	; 0xa34 <_Z4menuv+0x1a>
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	09 f4       	brne	.+2      	; 0xa2e <_Z4menuv+0x14>
     a2c:	51 c0       	rjmp	.+162    	; 0xad0 <_Z4menuv+0xb6>
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	39 f4       	brne	.+14     	; 0xa40 <_Z4menuv+0x26>
     a32:	90 c0       	rjmp	.+288    	; 0xb54 <_Z4menuv+0x13a>
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	09 f4       	brne	.+2      	; 0xa3a <_Z4menuv+0x20>
     a38:	17 c1       	rjmp	.+558    	; 0xc68 <_Z4menuv+0x24e>
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	09 f4       	brne	.+2      	; 0xa40 <_Z4menuv+0x26>
     a3e:	64 c1       	rjmp	.+712    	; 0xd08 <_Z4menuv+0x2ee>
		{
			case 0:
				//Weckzeit anzeigen und einstellen mit PD2
				lcd_clear();
     a40:	b8 db       	rcall	.-2192   	; 0x1b2 <_Z9lcd_clearv>
				aus(1,5);
     a42:	65 e0       	ldi	r22, 0x05	; 5
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	70 dd       	rcall	.-1312   	; 0x528 <_Z3aushh>
				aus(2,0);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	6d dd       	rcall	.-1318   	; 0x528 <_Z3aushh>
				lcd_string("Werktags");
     a4e:	8d ee       	ldi	r24, 0xED	; 237
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	01 dc       	rcall	.-2046   	; 0x256 <_Z10lcd_stringPKc>
				posit = posit + 1;
				while(!debounce(&PIND,PD3))
     a54:	2b c0       	rjmp	.+86     	; 0xaac <_Z4menuv+0x92>
				{
					//Zeitabfrage mit einbauen
					if(Sekunden!=sektemp){
     a56:	90 91 42 01 	lds	r25, 0x0142
     a5a:	80 91 3b 01 	lds	r24, 0x013B
     a5e:	98 13       	cpse	r25, r24
						zeit();
     a60:	88 dc       	rcall	.-1776   	; 0x372 <_Z4zeitv>
     a62:	82 99       	sbic	0x10, 2	; 16
     a64:	13 c0       	rjmp	.+38     	; 0xa8c <_Z4menuv+0x72>
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	93 eb       	ldi	r25, 0xB3	; 179
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <_Z4menuv+0x50>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <_Z4menuv+0x56>
     a70:	00 00       	nop
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	93 e2       	ldi	r25, 0x23	; 35
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <_Z4menuv+0x5c>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <_Z4menuv+0x62>
     a7c:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
     a7e:	82 99       	sbic	0x10, 2	; 16
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <_Z4menuv+0x72>
					{
						einst(4);
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	f8 dd       	rcall	.-1040   	; 0x676 <_Z5einsth>
						lcd_string("Werktags");
     a86:	8d ee       	ldi	r24, 0xED	; 237
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	e5 db       	rcall	.-2102   	; 0x256 <_Z10lcd_stringPKc>
     a8c:	84 99       	sbic	0x10, 4	; 16
     a8e:	0e c0       	rjmp	.+28     	; 0xaac <_Z4menuv+0x92>
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	93 eb       	ldi	r25, 0xB3	; 179
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <_Z4menuv+0x7a>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <_Z4menuv+0x80>
     a9a:	00 00       	nop
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	93 e2       	ldi	r25, 0x23	; 35
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <_Z4menuv+0x86>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <_Z4menuv+0x8c>
     aa6:	00 00       	nop
					}
					if (debounce(&PIND,PD4))
     aa8:	84 9b       	sbis	0x10, 4	; 16
     aaa:	81 c1       	rjmp	.+770    	; 0xdae <_Z4menuv+0x394>
     aac:	83 99       	sbic	0x10, 3	; 16
     aae:	d3 cf       	rjmp	.-90     	; 0xa56 <_Z4menuv+0x3c>
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	93 eb       	ldi	r25, 0xB3	; 179
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <_Z4menuv+0x9a>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <_Z4menuv+0xa0>
     aba:	00 00       	nop
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	93 e2       	ldi	r25, 0x23	; 35
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <_Z4menuv+0xa6>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <_Z4menuv+0xac>
     ac6:	00 00       	nop
				lcd_clear();
				aus(1,5);
				aus(2,0);
				lcd_string("Werktags");
				posit = posit + 1;
				while(!debounce(&PIND,PD3))
     ac8:	83 99       	sbic	0x10, 3	; 16
     aca:	c5 cf       	rjmp	.-118    	; 0xa56 <_Z4menuv+0x3c>
				//Weckzeit anzeigen und einstellen mit PD2
				lcd_clear();
				aus(1,5);
				aus(2,0);
				lcd_string("Werktags");
				posit = posit + 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	a8 cf       	rjmp	.-176    	; 0xa20 <_Z4menuv+0x6>
				break;
			
			case 1:
				//Weckzeit anzeigen und einstellen am Wochenende 
				//Jetzt noch nicht vollsteandig implmentiert
				lcd_clear();
     ad0:	70 db       	rcall	.-2336   	; 0x1b2 <_Z9lcd_clearv>
				aus(1,5);
     ad2:	65 e0       	ldi	r22, 0x05	; 5
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	28 dd       	rcall	.-1456   	; 0x528 <_Z3aushh>
				aus(2,0);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	25 dd       	rcall	.-1462   	; 0x528 <_Z3aushh>
				lcd_string("Wohenende nein");
     ade:	86 ef       	ldi	r24, 0xF6	; 246
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	b9 db       	rcall	.-2190   	; 0x256 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     ae4:	25 c0       	rjmp	.+74     	; 0xb30 <_Z4menuv+0x116>
				{
					if(Sekunden!=sektemp){
     ae6:	90 91 42 01 	lds	r25, 0x0142
     aea:	80 91 3b 01 	lds	r24, 0x013B
     aee:	98 13       	cpse	r25, r24
						zeit();
     af0:	40 dc       	rcall	.-1920   	; 0x372 <_Z4zeitv>
     af2:	82 99       	sbic	0x10, 2	; 16
     af4:	0d c0       	rjmp	.+26     	; 0xb10 <_Z4menuv+0xf6>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	93 eb       	ldi	r25, 0xB3	; 179
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <_Z4menuv+0xe0>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <_Z4menuv+0xe6>
     b00:	00 00       	nop
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	93 e2       	ldi	r25, 0x23	; 35
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <_Z4menuv+0xec>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <_Z4menuv+0xf2>
     b0c:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( !(*port & (1 << pin)) )
     b0e:	80 b3       	in	r24, 0x10	; 16

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     b10:	84 99       	sbic	0x10, 4	; 16
     b12:	0e c0       	rjmp	.+28     	; 0xb30 <_Z4menuv+0x116>
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	93 eb       	ldi	r25, 0xB3	; 179
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <_Z4menuv+0xfe>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <_Z4menuv+0x104>
     b1e:	00 00       	nop
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	93 e2       	ldi	r25, 0x23	; 35
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <_Z4menuv+0x10a>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <_Z4menuv+0x110>
     b2a:	00 00       	nop
					if (debounce(&PIND,PD2))
					{
						//Einstellungen hinzu
						//lcd_string("Wohenende nein");
					}
					if (debounce(&PIND,PD4))
     b2c:	84 9b       	sbis	0x10, 4	; 16
     b2e:	3f c1       	rjmp	.+638    	; 0xdae <_Z4menuv+0x394>
     b30:	83 99       	sbic	0x10, 3	; 16
     b32:	d9 cf       	rjmp	.-78     	; 0xae6 <_Z4menuv+0xcc>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	93 eb       	ldi	r25, 0xB3	; 179
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <_Z4menuv+0x11e>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <_Z4menuv+0x124>
     b3e:	00 00       	nop
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	93 e2       	ldi	r25, 0x23	; 35
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <_Z4menuv+0x12a>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <_Z4menuv+0x130>
     b4a:	00 00       	nop
				//Jetzt noch nicht vollsteandig implmentiert
				lcd_clear();
				aus(1,5);
				aus(2,0);
				lcd_string("Wohenende nein");
				while (!debounce(&PIND,PD3))
     b4c:	83 99       	sbic	0x10, 3	; 16
     b4e:	cb cf       	rjmp	.-106    	; 0xae6 <_Z4menuv+0xcc>
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	66 cf       	rjmp	.-308    	; 0xa20 <_Z4menuv+0x6>
				break;
			
			case 2:
				//Kallender einstellen
				//Jetzt noch nicht implementiert
				lcd_clear();
     b54:	2e db       	rcall	.-2468   	; 0x1b2 <_Z9lcd_clearv>
				aus(1,2);
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	e6 dc       	rcall	.-1588   	; 0x528 <_Z3aushh>
				aus(2,0);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	e3 dc       	rcall	.-1594   	; 0x528 <_Z3aushh>
				lcd_string("Kellender nein");
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	77 db       	rcall	.-2322   	; 0x256 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     b68:	25 c0       	rjmp	.+74     	; 0xbb4 <_Z4menuv+0x19a>
				{
					if(Sekunden!=sektemp){
     b6a:	90 91 42 01 	lds	r25, 0x0142
     b6e:	80 91 3b 01 	lds	r24, 0x013B
     b72:	98 13       	cpse	r25, r24
						zeit();
     b74:	fe db       	rcall	.-2052   	; 0x372 <_Z4zeitv>
     b76:	82 99       	sbic	0x10, 2	; 16
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <_Z4menuv+0x17a>
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	93 eb       	ldi	r25, 0xB3	; 179
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <_Z4menuv+0x164>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <_Z4menuv+0x16a>
     b84:	00 00       	nop
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	93 e2       	ldi	r25, 0x23	; 35
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <_Z4menuv+0x170>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <_Z4menuv+0x176>
     b90:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( !(*port & (1 << pin)) )
     b92:	80 b3       	in	r24, 0x10	; 16

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     b94:	84 99       	sbic	0x10, 4	; 16
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <_Z4menuv+0x19a>
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	93 eb       	ldi	r25, 0xB3	; 179
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <_Z4menuv+0x182>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <_Z4menuv+0x188>
     ba2:	00 00       	nop
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	93 e2       	ldi	r25, 0x23	; 35
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <_Z4menuv+0x18e>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <_Z4menuv+0x194>
     bae:	00 00       	nop
					if (debounce(&PIND,PD2))
					{
						//lcd_string("Kellender nein");
						//Einstellungen hinzu
					}
					if (debounce(&PIND,PD4))
     bb0:	84 9b       	sbis	0x10, 4	; 16
     bb2:	fd c0       	rjmp	.+506    	; 0xdae <_Z4menuv+0x394>
     bb4:	83 99       	sbic	0x10, 3	; 16
     bb6:	d9 cf       	rjmp	.-78     	; 0xb6a <_Z4menuv+0x150>
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	93 eb       	ldi	r25, 0xB3	; 179
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <_Z4menuv+0x1a2>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <_Z4menuv+0x1a8>
     bc2:	00 00       	nop
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	93 e2       	ldi	r25, 0x23	; 35
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <_Z4menuv+0x1ae>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <_Z4menuv+0x1b4>
     bce:	00 00       	nop
				//Jetzt noch nicht implementiert
				lcd_clear();
				aus(1,2);
				aus(2,0);
				lcd_string("Kellender nein");
				while (!debounce(&PIND,PD3))
     bd0:	83 99       	sbic	0x10, 3	; 16
     bd2:	cb cf       	rjmp	.-106    	; 0xb6a <_Z4menuv+0x150>
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	24 cf       	rjmp	.-440    	; 0xa20 <_Z4menuv+0x6>
				break;
			
			case 3:
				//Zeit einstellen ohnen Sekunden
				lcd_clear();
     bd8:	ec da       	rcall	.-2600   	; 0x1b2 <_Z9lcd_clearv>
				aus(1,3);
     bda:	63 e0       	ldi	r22, 0x03	; 3
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	a4 dc       	rcall	.-1720   	; 0x528 <_Z3aushh>
				aus(2,0);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	a1 dc       	rcall	.-1726   	; 0x528 <_Z3aushh>
				lcd_string("Zeit");
     be6:	84 e1       	ldi	r24, 0x14	; 20
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	35 db       	rcall	.-2454   	; 0x256 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     bec:	2b c0       	rjmp	.+86     	; 0xc44 <_Z4menuv+0x22a>
				{
					if(Sekunden!=sektemp){
     bee:	90 91 42 01 	lds	r25, 0x0142
     bf2:	80 91 3b 01 	lds	r24, 0x013B
     bf6:	98 13       	cpse	r25, r24
						zeit();
     bf8:	bc db       	rcall	.-2184   	; 0x372 <_Z4zeitv>
     bfa:	82 99       	sbic	0x10, 2	; 16
     bfc:	13 c0       	rjmp	.+38     	; 0xc24 <_Z4menuv+0x20a>
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	93 eb       	ldi	r25, 0xB3	; 179
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <_Z4menuv+0x1e8>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <_Z4menuv+0x1ee>
     c08:	00 00       	nop
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	93 e2       	ldi	r25, 0x23	; 35
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <_Z4menuv+0x1f4>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <_Z4menuv+0x1fa>
     c14:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
     c16:	82 99       	sbic	0x10, 2	; 16
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <_Z4menuv+0x20a>
					{
						einst(0);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	2c dd       	rcall	.-1448   	; 0x676 <_Z5einsth>
						lcd_string("Zeit");
     c1e:	84 e1       	ldi	r24, 0x14	; 20
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	19 db       	rcall	.-2510   	; 0x256 <_Z10lcd_stringPKc>
     c24:	84 99       	sbic	0x10, 4	; 16
     c26:	0e c0       	rjmp	.+28     	; 0xc44 <_Z4menuv+0x22a>
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	93 eb       	ldi	r25, 0xB3	; 179
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <_Z4menuv+0x212>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <_Z4menuv+0x218>
     c32:	00 00       	nop
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	93 e2       	ldi	r25, 0x23	; 35
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <_Z4menuv+0x21e>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <_Z4menuv+0x224>
     c3e:	00 00       	nop
					}
					if (debounce(&PIND,PD4))
     c40:	84 9b       	sbis	0x10, 4	; 16
     c42:	b5 c0       	rjmp	.+362    	; 0xdae <_Z4menuv+0x394>
     c44:	83 99       	sbic	0x10, 3	; 16
     c46:	d3 cf       	rjmp	.-90     	; 0xbee <_Z4menuv+0x1d4>
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	93 eb       	ldi	r25, 0xB3	; 179
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <_Z4menuv+0x232>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <_Z4menuv+0x238>
     c52:	00 00       	nop
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	93 e2       	ldi	r25, 0x23	; 35
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <_Z4menuv+0x23e>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <_Z4menuv+0x244>
     c5e:	00 00       	nop
				//Zeit einstellen ohnen Sekunden
				lcd_clear();
				aus(1,3);
				aus(2,0);
				lcd_string("Zeit");
				while (!debounce(&PIND,PD3))
     c60:	83 99       	sbic	0x10, 3	; 16
     c62:	c5 cf       	rjmp	.-118    	; 0xbee <_Z4menuv+0x1d4>
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	dc ce       	rjmp	.-584    	; 0xa20 <_Z4menuv+0x6>
				break;
				
			case 4:
				//Sekundenoffset einstellen
				lcd_clear();
     c68:	a4 da       	rcall	.-2744   	; 0x1b2 <_Z9lcd_clearv>
				lcd_home();
     c6a:	da da       	rcall	.-2636   	; 0x220 <_Z8lcd_homev>
				lcd_string("Sekundenoffset:");
     c6c:	89 eb       	ldi	r24, 0xB9	; 185
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	f2 da       	rcall	.-2588   	; 0x256 <_Z10lcd_stringPKc>
				aus(2,0);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	58 dc       	rcall	.-1872   	; 0x528 <_Z3aushh>
				itoa(sekoffset,Buffer,10);
     c78:	80 91 36 01 	lds	r24, 0x0136
     c7c:	4a e0       	ldi	r20, 0x0A	; 10
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	62 e2       	ldi	r22, 0x22	; 34
     c82:	71 e0       	ldi	r23, 0x01	; 1
     c84:	99 27       	eor	r25, r25
     c86:	87 fd       	sbrc	r24, 7
     c88:	90 95       	com	r25
     c8a:	ea d2       	rcall	.+1492   	; 0x1260 <itoa>
				lcd_string(Buffer);
     c8c:	82 e2       	ldi	r24, 0x22	; 34
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	e2 da       	rcall	.-2620   	; 0x256 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     c92:	28 c0       	rjmp	.+80     	; 0xce4 <_Z4menuv+0x2ca>
				{
					if(Sekunden!=sektemp){
     c94:	90 91 42 01 	lds	r25, 0x0142
     c98:	80 91 3b 01 	lds	r24, 0x013B
     c9c:	98 13       	cpse	r25, r24
						zeit();
     c9e:	69 db       	rcall	.-2350   	; 0x372 <_Z4zeitv>
     ca0:	82 99       	sbic	0x10, 2	; 16
     ca2:	10 c0       	rjmp	.+32     	; 0xcc4 <_Z4menuv+0x2aa>
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	93 eb       	ldi	r25, 0xB3	; 179
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <_Z4menuv+0x28e>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <_Z4menuv+0x294>
     cae:	00 00       	nop
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	93 e2       	ldi	r25, 0x23	; 35
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <_Z4menuv+0x29a>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <_Z4menuv+0x2a0>
     cba:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
     cbc:	82 99       	sbic	0x10, 2	; 16
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <_Z4menuv+0x2aa>
					{
						einst(2);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	d9 dc       	rcall	.-1614   	; 0x676 <_Z5einsth>
     cc4:	84 99       	sbic	0x10, 4	; 16
     cc6:	0e c0       	rjmp	.+28     	; 0xce4 <_Z4menuv+0x2ca>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	93 eb       	ldi	r25, 0xB3	; 179
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <_Z4menuv+0x2b2>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <_Z4menuv+0x2b8>
     cd2:	00 00       	nop
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	93 e2       	ldi	r25, 0x23	; 35
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <_Z4menuv+0x2be>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <_Z4menuv+0x2c4>
     cde:	00 00       	nop
					}
					if (debounce(&PIND,PD4))
     ce0:	84 9b       	sbis	0x10, 4	; 16
     ce2:	65 c0       	rjmp	.+202    	; 0xdae <_Z4menuv+0x394>
     ce4:	83 99       	sbic	0x10, 3	; 16
     ce6:	d6 cf       	rjmp	.-84     	; 0xc94 <_Z4menuv+0x27a>
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	93 eb       	ldi	r25, 0xB3	; 179
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <_Z4menuv+0x2d2>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <_Z4menuv+0x2d8>
     cf2:	00 00       	nop
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	93 e2       	ldi	r25, 0x23	; 35
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <_Z4menuv+0x2de>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <_Z4menuv+0x2e4>
     cfe:	00 00       	nop
				lcd_home();
				lcd_string("Sekundenoffset:");
				aus(2,0);
				itoa(sekoffset,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
     d00:	83 99       	sbic	0x10, 3	; 16
     d02:	c8 cf       	rjmp	.-112    	; 0xc94 <_Z4menuv+0x27a>
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	8c ce       	rjmp	.-744    	; 0xa20 <_Z4menuv+0x6>
				break;
				
			case 5:
				//Temperaturoffset einstellen
				lcd_clear();
     d08:	54 da       	rcall	.-2904   	; 0x1b2 <_Z9lcd_clearv>
				lcd_home();
     d0a:	8a da       	rcall	.-2796   	; 0x220 <_Z8lcd_homev>
				lcd_string("Temperaturoffset:");
     d0c:	89 ec       	ldi	r24, 0xC9	; 201
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a2 da       	rcall	.-2748   	; 0x256 <_Z10lcd_stringPKc>
				aus(2,0);
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	08 dc       	rcall	.-2032   	; 0x528 <_Z3aushh>
				itoa(tempoffset,Buffer,10);
     d18:	80 91 63 00 	lds	r24, 0x0063
     d1c:	4a e0       	ldi	r20, 0x0A	; 10
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	62 e2       	ldi	r22, 0x22	; 34
     d22:	71 e0       	ldi	r23, 0x01	; 1
     d24:	99 27       	eor	r25, r25
     d26:	87 fd       	sbrc	r24, 7
     d28:	90 95       	com	r25
     d2a:	9a d2       	rcall	.+1332   	; 0x1260 <itoa>
				lcd_string(Buffer);
     d2c:	82 e2       	ldi	r24, 0x22	; 34
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	92 da       	rcall	.-2780   	; 0x256 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     d32:	2a c0       	rjmp	.+84     	; 0xd88 <_Z4menuv+0x36e>
				{
					if(Sekunden!=sektemp){
     d34:	90 91 42 01 	lds	r25, 0x0142
     d38:	80 91 3b 01 	lds	r24, 0x013B
     d3c:	98 13       	cpse	r25, r24
						zeit();
     d3e:	19 db       	rcall	.-2510   	; 0x372 <_Z4zeitv>
     d40:	82 99       	sbic	0x10, 2	; 16
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <_Z4menuv+0x34a>
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	93 eb       	ldi	r25, 0xB3	; 179
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <_Z4menuv+0x32e>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <_Z4menuv+0x334>
     d4e:	00 00       	nop
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	93 e2       	ldi	r25, 0x23	; 35
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <_Z4menuv+0x33a>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <_Z4menuv+0x340>
     d5a:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
     d5c:	82 99       	sbic	0x10, 2	; 16
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <_Z4menuv+0x34a>
					{
						einst(3);
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	89 dc       	rcall	.-1774   	; 0x676 <_Z5einsth>
     d64:	84 99       	sbic	0x10, 4	; 16
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <_Z4menuv+0x36e>
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	93 eb       	ldi	r25, 0xB3	; 179
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <_Z4menuv+0x352>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <_Z4menuv+0x358>
     d72:	00 00       	nop
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	93 e2       	ldi	r25, 0x23	; 35
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <_Z4menuv+0x35e>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <_Z4menuv+0x364>
     d7e:	00 00       	nop
					}
					if (debounce(&PIND,PD4))
     d80:	84 99       	sbic	0x10, 4	; 16
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <_Z4menuv+0x36e>
					{
						temperatur();
     d84:	9a da       	rcall	.-2764   	; 0x2ba <_Z10temperaturv>
						return 1;
     d86:	13 c0       	rjmp	.+38     	; 0xdae <_Z4menuv+0x394>
     d88:	83 99       	sbic	0x10, 3	; 16
     d8a:	d4 cf       	rjmp	.-88     	; 0xd34 <_Z4menuv+0x31a>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	93 eb       	ldi	r25, 0xB3	; 179
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <_Z4menuv+0x376>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <_Z4menuv+0x37c>
     d96:	00 00       	nop
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	93 e2       	ldi	r25, 0x23	; 35
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <_Z4menuv+0x382>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <_Z4menuv+0x388>
     da2:	00 00       	nop
				lcd_home();
				lcd_string("Temperaturoffset:");
				aus(2,0);
				itoa(tempoffset,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
     da4:	83 99       	sbic	0x10, 3	; 16
     da6:	c6 cf       	rjmp	.-116    	; 0xd34 <_Z4menuv+0x31a>
					{
						temperatur();
						return 1;
					}
				}
				temperatur();
     da8:	88 da       	rcall	.-2800   	; 0x2ba <_Z10temperaturv>
				posit++;
     daa:	8c 2f       	mov	r24, r28
				break;
     dac:	39 ce       	rjmp	.-910    	; 0xa20 <_Z4menuv+0x6>
				posit=0;
				break;
		}
	}
return 0;
}
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <_Z4initv>:
}

void init(){
	//LCD einstellen und erste Ausgabe
	lcd_init();
     db4:	05 da       	rcall	.-3062   	; 0x1c0 <_Z8lcd_initv>
	aus(1,4);
     db6:	64 e0       	ldi	r22, 0x04	; 4
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	b6 db       	rcall	.-2196   	; 0x528 <_Z3aushh>
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	8f ed       	ldi	r24, 0xDF	; 223
     dc0:	90 e1       	ldi	r25, 0x10	; 16
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <_Z4initv+0xe>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <_Z4initv+0x18>
     dcc:	00 00       	nop
	//lcd_string("Wecker");
	//lcd_setcursor( 0, 2 );
	//lcd_string("Start!");
	_delay_ms(1500);
	lcd_clear();
     dce:	f1 d9       	rcall	.-3102   	; 0x1b2 <_Z9lcd_clearv>
	//SPCR = (1<<SPE) | (1<<MSTR) | (1<<DORD);
	//SPSR = (1<<SPI2X);
	//SPDR = 0;
	
	//ADC
	ADMUX = (1<<REFS0);
     dd0:	80 e4       	ldi	r24, 0x40	; 64
     dd2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);
     dd8:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);
     dda:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
     ddc:	36 99       	sbic	0x06, 6	; 6
     dde:	fe cf       	rjmp	.-4      	; 0xddc <_Z4initv+0x28>
	}
	(void) ADCW;
     de0:	84 b1       	in	r24, 0x04	; 4
     de2:	95 b1       	in	r25, 0x05	; 5
	
	//Eingänge
	PORTD |= (1<<PD2) | (1<<PD3) | (1<<PD4);
     de4:	82 b3       	in	r24, 0x12	; 18
     de6:	8c 61       	ori	r24, 0x1C	; 28
     de8:	82 bb       	out	0x12, r24	; 18
	
	//Ausgänge
	DDRC = (1<<PC5);
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	84 bb       	out	0x14, r24	; 20
	
	//erste zeiteinstellung
	zeitsetzen();
     dee:	fd dd       	rcall	.-1030   	; 0x9ea <_Z10zeitsetzenv>
	
	//Timer 1 Einstelungen
	TCNT1H = 0b11110001;
     df0:	81 ef       	ldi	r24, 0xF1	; 241
     df2:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
     df4:	80 ef       	ldi	r24, 0xF0	; 240
     df6:	8c bd       	out	0x2c, r24	; 44
	TIMSK = (1<<TOIE1);
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	89 bf       	out	0x39, r24	; 57
	TCCR1B = (1<<CS10) | (1<<CS12);
     dfc:	85 e0       	ldi	r24, 0x05	; 5
     dfe:	8e bd       	out	0x2e, r24	; 46
	
	//Interupts aktivieren
	sei();
     e00:	78 94       	sei
	
	//Wecker einschalten
	Wan=0;
     e02:	10 92 3c 01 	sts	0x013C, r1
     e06:	08 95       	ret

00000e08 <__vector_8>:
#include "einstellungen.h"
#include "zeit.h"
#include "menue.h"
#include "ausgabe.h"

ISR(TIMER1_OVF_vect){
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	8f 93       	push	r24
	TCNT1H = 0b11110001;
     e14:	81 ef       	ldi	r24, 0xF1	; 241
     e16:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
     e18:	80 ef       	ldi	r24, 0xF0	; 240
     e1a:	8c bd       	out	0x2c, r24	; 44
	Sekunden++;
     e1c:	80 91 42 01 	lds	r24, 0x0142
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 42 01 	sts	0x0142, r24
}
     e26:	8f 91       	pop	r24
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <main>:

int main(void)
{
	init();
     e32:	c0 df       	rcall	.-128    	; 0xdb4 <_Z4initv>
	
	while(1)
	{
		if (Sekunden!=sektemp)
     e34:	90 91 42 01 	lds	r25, 0x0142
     e38:	80 91 3b 01 	lds	r24, 0x013B
     e3c:	98 17       	cp	r25, r24
     e3e:	39 f0       	breq	.+14     	; 0xe4e <main+0x1c>
		{
			zeit();
     e40:	98 da       	rcall	.-2768   	; 0x372 <_Z4zeitv>
			aus(1,3);
     e42:	63 e0       	ldi	r22, 0x03	; 3
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	70 db       	rcall	.-2336   	; 0x528 <_Z3aushh>
			aus(2,1);
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	6d db       	rcall	.-2342   	; 0x528 <_Z3aushh>
     e4e:	82 99       	sbic	0x10, 2	; 16
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <main+0x42>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	93 eb       	ldi	r25, 0xB3	; 179
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <main+0x24>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x2a>
     e5c:	00 00       	nop
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	93 e2       	ldi	r25, 0x23	; 35
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <main+0x30>
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <main+0x36>
     e68:	00 00       	nop
		}
		if(debounce(&PIND,2))
     e6a:	82 99       	sbic	0x10, 2	; 16
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <main+0x42>
		{
			Wan=0;
     e6e:	10 92 3c 01 	sts	0x013C, r1
			PORTC &= ~(1<<PC5);
     e72:	ad 98       	cbi	0x15, 5	; 21
     e74:	84 99       	sbic	0x10, 4	; 16
     e76:	de cf       	rjmp	.-68     	; 0xe34 <main+0x2>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	93 eb       	ldi	r25, 0xB3	; 179
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <main+0x4a>
     e80:	00 c0       	rjmp	.+0      	; 0xe82 <main+0x50>
     e82:	00 00       	nop
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	93 e2       	ldi	r25, 0x23	; 35
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <main+0x56>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <main+0x5c>
     e8e:	00 00       	nop
		}
		if (debounce(&PIND,PD4))
     e90:	84 99       	sbic	0x10, 4	; 16
     e92:	d0 cf       	rjmp	.-96     	; 0xe34 <main+0x2>
		{
			menu();
     e94:	c2 dd       	rcall	.-1148   	; 0xa1a <_Z4menuv>
			aus(1,3);
     e96:	63 e0       	ldi	r22, 0x03	; 3
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	46 db       	rcall	.-2420   	; 0x528 <_Z3aushh>
			aus(2,1);
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	43 db       	rcall	.-2426   	; 0x528 <_Z3aushh>
     ea2:	c8 cf       	rjmp	.-112    	; 0xe34 <main+0x2>

00000ea4 <__subsf3>:
     ea4:	50 58       	subi	r21, 0x80	; 128

00000ea6 <__addsf3>:
     ea6:	bb 27       	eor	r27, r27
     ea8:	aa 27       	eor	r26, r26
     eaa:	0e d0       	rcall	.+28     	; 0xec8 <__addsf3x>
     eac:	1c c1       	rjmp	.+568    	; 0x10e6 <__fp_round>
     eae:	0d d1       	rcall	.+538    	; 0x10ca <__fp_pscA>
     eb0:	30 f0       	brcs	.+12     	; 0xebe <__addsf3+0x18>
     eb2:	12 d1       	rcall	.+548    	; 0x10d8 <__fp_pscB>
     eb4:	20 f0       	brcs	.+8      	; 0xebe <__addsf3+0x18>
     eb6:	31 f4       	brne	.+12     	; 0xec4 <__addsf3+0x1e>
     eb8:	9f 3f       	cpi	r25, 0xFF	; 255
     eba:	11 f4       	brne	.+4      	; 0xec0 <__addsf3+0x1a>
     ebc:	1e f4       	brtc	.+6      	; 0xec4 <__addsf3+0x1e>
     ebe:	02 c1       	rjmp	.+516    	; 0x10c4 <__fp_nan>
     ec0:	0e f4       	brtc	.+2      	; 0xec4 <__addsf3+0x1e>
     ec2:	e0 95       	com	r30
     ec4:	e7 fb       	bst	r30, 7
     ec6:	f8 c0       	rjmp	.+496    	; 0x10b8 <__fp_inf>

00000ec8 <__addsf3x>:
     ec8:	e9 2f       	mov	r30, r25
     eca:	1e d1       	rcall	.+572    	; 0x1108 <__fp_split3>
     ecc:	80 f3       	brcs	.-32     	; 0xeae <__addsf3+0x8>
     ece:	ba 17       	cp	r27, r26
     ed0:	62 07       	cpc	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	95 07       	cpc	r25, r21
     ed8:	18 f0       	brcs	.+6      	; 0xee0 <__addsf3x+0x18>
     eda:	71 f4       	brne	.+28     	; 0xef8 <__addsf3x+0x30>
     edc:	9e f5       	brtc	.+102    	; 0xf44 <__addsf3x+0x7c>
     ede:	36 c1       	rjmp	.+620    	; 0x114c <__fp_zero>
     ee0:	0e f4       	brtc	.+2      	; 0xee4 <__addsf3x+0x1c>
     ee2:	e0 95       	com	r30
     ee4:	0b 2e       	mov	r0, r27
     ee6:	ba 2f       	mov	r27, r26
     ee8:	a0 2d       	mov	r26, r0
     eea:	0b 01       	movw	r0, r22
     eec:	b9 01       	movw	r22, r18
     eee:	90 01       	movw	r18, r0
     ef0:	0c 01       	movw	r0, r24
     ef2:	ca 01       	movw	r24, r20
     ef4:	a0 01       	movw	r20, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	ff 27       	eor	r31, r31
     efa:	59 1b       	sub	r21, r25
     efc:	99 f0       	breq	.+38     	; 0xf24 <__addsf3x+0x5c>
     efe:	59 3f       	cpi	r21, 0xF9	; 249
     f00:	50 f4       	brcc	.+20     	; 0xf16 <__addsf3x+0x4e>
     f02:	50 3e       	cpi	r21, 0xE0	; 224
     f04:	68 f1       	brcs	.+90     	; 0xf60 <__addsf3x+0x98>
     f06:	1a 16       	cp	r1, r26
     f08:	f0 40       	sbci	r31, 0x00	; 0
     f0a:	a2 2f       	mov	r26, r18
     f0c:	23 2f       	mov	r18, r19
     f0e:	34 2f       	mov	r19, r20
     f10:	44 27       	eor	r20, r20
     f12:	58 5f       	subi	r21, 0xF8	; 248
     f14:	f3 cf       	rjmp	.-26     	; 0xefc <__addsf3x+0x34>
     f16:	46 95       	lsr	r20
     f18:	37 95       	ror	r19
     f1a:	27 95       	ror	r18
     f1c:	a7 95       	ror	r26
     f1e:	f0 40       	sbci	r31, 0x00	; 0
     f20:	53 95       	inc	r21
     f22:	c9 f7       	brne	.-14     	; 0xf16 <__addsf3x+0x4e>
     f24:	7e f4       	brtc	.+30     	; 0xf44 <__addsf3x+0x7c>
     f26:	1f 16       	cp	r1, r31
     f28:	ba 0b       	sbc	r27, r26
     f2a:	62 0b       	sbc	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	ba f0       	brmi	.+46     	; 0xf60 <__addsf3x+0x98>
     f32:	91 50       	subi	r25, 0x01	; 1
     f34:	a1 f0       	breq	.+40     	; 0xf5e <__addsf3x+0x96>
     f36:	ff 0f       	add	r31, r31
     f38:	bb 1f       	adc	r27, r27
     f3a:	66 1f       	adc	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	c2 f7       	brpl	.-16     	; 0xf32 <__addsf3x+0x6a>
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <__addsf3x+0x98>
     f44:	ba 0f       	add	r27, r26
     f46:	62 1f       	adc	r22, r18
     f48:	73 1f       	adc	r23, r19
     f4a:	84 1f       	adc	r24, r20
     f4c:	48 f4       	brcc	.+18     	; 0xf60 <__addsf3x+0x98>
     f4e:	87 95       	ror	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f7 95       	ror	r31
     f58:	9e 3f       	cpi	r25, 0xFE	; 254
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <__addsf3x+0x96>
     f5c:	b3 cf       	rjmp	.-154    	; 0xec4 <__addsf3+0x1e>
     f5e:	93 95       	inc	r25
     f60:	88 0f       	add	r24, r24
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__addsf3x+0x9e>
     f64:	99 27       	eor	r25, r25
     f66:	ee 0f       	add	r30, r30
     f68:	97 95       	ror	r25
     f6a:	87 95       	ror	r24
     f6c:	08 95       	ret

00000f6e <__divsf3>:
     f6e:	0c d0       	rcall	.+24     	; 0xf88 <__divsf3x>
     f70:	ba c0       	rjmp	.+372    	; 0x10e6 <__fp_round>
     f72:	b2 d0       	rcall	.+356    	; 0x10d8 <__fp_pscB>
     f74:	40 f0       	brcs	.+16     	; 0xf86 <__divsf3+0x18>
     f76:	a9 d0       	rcall	.+338    	; 0x10ca <__fp_pscA>
     f78:	30 f0       	brcs	.+12     	; 0xf86 <__divsf3+0x18>
     f7a:	21 f4       	brne	.+8      	; 0xf84 <__divsf3+0x16>
     f7c:	5f 3f       	cpi	r21, 0xFF	; 255
     f7e:	19 f0       	breq	.+6      	; 0xf86 <__divsf3+0x18>
     f80:	9b c0       	rjmp	.+310    	; 0x10b8 <__fp_inf>
     f82:	51 11       	cpse	r21, r1
     f84:	e4 c0       	rjmp	.+456    	; 0x114e <__fp_szero>
     f86:	9e c0       	rjmp	.+316    	; 0x10c4 <__fp_nan>

00000f88 <__divsf3x>:
     f88:	bf d0       	rcall	.+382    	; 0x1108 <__fp_split3>
     f8a:	98 f3       	brcs	.-26     	; 0xf72 <__divsf3+0x4>

00000f8c <__divsf3_pse>:
     f8c:	99 23       	and	r25, r25
     f8e:	c9 f3       	breq	.-14     	; 0xf82 <__divsf3+0x14>
     f90:	55 23       	and	r21, r21
     f92:	b1 f3       	breq	.-20     	; 0xf80 <__divsf3+0x12>
     f94:	95 1b       	sub	r25, r21
     f96:	55 0b       	sbc	r21, r21
     f98:	bb 27       	eor	r27, r27
     f9a:	aa 27       	eor	r26, r26
     f9c:	62 17       	cp	r22, r18
     f9e:	73 07       	cpc	r23, r19
     fa0:	84 07       	cpc	r24, r20
     fa2:	38 f0       	brcs	.+14     	; 0xfb2 <__divsf3_pse+0x26>
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	44 1f       	adc	r20, r20
     fae:	aa 1f       	adc	r26, r26
     fb0:	a9 f3       	breq	.-22     	; 0xf9c <__divsf3_pse+0x10>
     fb2:	33 d0       	rcall	.+102    	; 0x101a <__divsf3_pse+0x8e>
     fb4:	0e 2e       	mov	r0, r30
     fb6:	3a f0       	brmi	.+14     	; 0xfc6 <__divsf3_pse+0x3a>
     fb8:	e0 e8       	ldi	r30, 0x80	; 128
     fba:	30 d0       	rcall	.+96     	; 0x101c <__divsf3_pse+0x90>
     fbc:	91 50       	subi	r25, 0x01	; 1
     fbe:	50 40       	sbci	r21, 0x00	; 0
     fc0:	e6 95       	lsr	r30
     fc2:	00 1c       	adc	r0, r0
     fc4:	ca f7       	brpl	.-14     	; 0xfb8 <__divsf3_pse+0x2c>
     fc6:	29 d0       	rcall	.+82     	; 0x101a <__divsf3_pse+0x8e>
     fc8:	fe 2f       	mov	r31, r30
     fca:	27 d0       	rcall	.+78     	; 0x101a <__divsf3_pse+0x8e>
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	bb 1f       	adc	r27, r27
     fd4:	26 17       	cp	r18, r22
     fd6:	37 07       	cpc	r19, r23
     fd8:	48 07       	cpc	r20, r24
     fda:	ab 07       	cpc	r26, r27
     fdc:	b0 e8       	ldi	r27, 0x80	; 128
     fde:	09 f0       	breq	.+2      	; 0xfe2 <__divsf3_pse+0x56>
     fe0:	bb 0b       	sbc	r27, r27
     fe2:	80 2d       	mov	r24, r0
     fe4:	bf 01       	movw	r22, r30
     fe6:	ff 27       	eor	r31, r31
     fe8:	93 58       	subi	r25, 0x83	; 131
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	2a f0       	brmi	.+10     	; 0xff8 <__divsf3_pse+0x6c>
     fee:	9e 3f       	cpi	r25, 0xFE	; 254
     ff0:	51 05       	cpc	r21, r1
     ff2:	68 f0       	brcs	.+26     	; 0x100e <__divsf3_pse+0x82>
     ff4:	61 c0       	rjmp	.+194    	; 0x10b8 <__fp_inf>
     ff6:	ab c0       	rjmp	.+342    	; 0x114e <__fp_szero>
     ff8:	5f 3f       	cpi	r21, 0xFF	; 255
     ffa:	ec f3       	brlt	.-6      	; 0xff6 <__divsf3_pse+0x6a>
     ffc:	98 3e       	cpi	r25, 0xE8	; 232
     ffe:	dc f3       	brlt	.-10     	; 0xff6 <__divsf3_pse+0x6a>
    1000:	86 95       	lsr	r24
    1002:	77 95       	ror	r23
    1004:	67 95       	ror	r22
    1006:	b7 95       	ror	r27
    1008:	f7 95       	ror	r31
    100a:	9f 5f       	subi	r25, 0xFF	; 255
    100c:	c9 f7       	brne	.-14     	; 0x1000 <__divsf3_pse+0x74>
    100e:	88 0f       	add	r24, r24
    1010:	91 1d       	adc	r25, r1
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	97 f9       	bld	r25, 7
    1018:	08 95       	ret
    101a:	e1 e0       	ldi	r30, 0x01	; 1
    101c:	66 0f       	add	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	88 1f       	adc	r24, r24
    1022:	bb 1f       	adc	r27, r27
    1024:	62 17       	cp	r22, r18
    1026:	73 07       	cpc	r23, r19
    1028:	84 07       	cpc	r24, r20
    102a:	ba 07       	cpc	r27, r26
    102c:	20 f0       	brcs	.+8      	; 0x1036 <__divsf3_pse+0xaa>
    102e:	62 1b       	sub	r22, r18
    1030:	73 0b       	sbc	r23, r19
    1032:	84 0b       	sbc	r24, r20
    1034:	ba 0b       	sbc	r27, r26
    1036:	ee 1f       	adc	r30, r30
    1038:	88 f7       	brcc	.-30     	; 0x101c <__divsf3_pse+0x90>
    103a:	e0 95       	com	r30
    103c:	08 95       	ret

0000103e <__floatunsisf>:
    103e:	e8 94       	clt
    1040:	09 c0       	rjmp	.+18     	; 0x1054 <__floatsisf+0x12>

00001042 <__floatsisf>:
    1042:	97 fb       	bst	r25, 7
    1044:	3e f4       	brtc	.+14     	; 0x1054 <__floatsisf+0x12>
    1046:	90 95       	com	r25
    1048:	80 95       	com	r24
    104a:	70 95       	com	r23
    104c:	61 95       	neg	r22
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	99 23       	and	r25, r25
    1056:	a9 f0       	breq	.+42     	; 0x1082 <__floatsisf+0x40>
    1058:	f9 2f       	mov	r31, r25
    105a:	96 e9       	ldi	r25, 0x96	; 150
    105c:	bb 27       	eor	r27, r27
    105e:	93 95       	inc	r25
    1060:	f6 95       	lsr	r31
    1062:	87 95       	ror	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	b7 95       	ror	r27
    106a:	f1 11       	cpse	r31, r1
    106c:	f8 cf       	rjmp	.-16     	; 0x105e <__floatsisf+0x1c>
    106e:	fa f4       	brpl	.+62     	; 0x10ae <__floatsisf+0x6c>
    1070:	bb 0f       	add	r27, r27
    1072:	11 f4       	brne	.+4      	; 0x1078 <__floatsisf+0x36>
    1074:	60 ff       	sbrs	r22, 0
    1076:	1b c0       	rjmp	.+54     	; 0x10ae <__floatsisf+0x6c>
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	16 c0       	rjmp	.+44     	; 0x10ae <__floatsisf+0x6c>
    1082:	88 23       	and	r24, r24
    1084:	11 f0       	breq	.+4      	; 0x108a <__floatsisf+0x48>
    1086:	96 e9       	ldi	r25, 0x96	; 150
    1088:	11 c0       	rjmp	.+34     	; 0x10ac <__floatsisf+0x6a>
    108a:	77 23       	and	r23, r23
    108c:	21 f0       	breq	.+8      	; 0x1096 <__floatsisf+0x54>
    108e:	9e e8       	ldi	r25, 0x8E	; 142
    1090:	87 2f       	mov	r24, r23
    1092:	76 2f       	mov	r23, r22
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <__floatsisf+0x5e>
    1096:	66 23       	and	r22, r22
    1098:	71 f0       	breq	.+28     	; 0x10b6 <__floatsisf+0x74>
    109a:	96 e8       	ldi	r25, 0x86	; 134
    109c:	86 2f       	mov	r24, r22
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	2a f0       	brmi	.+10     	; 0x10ae <__floatsisf+0x6c>
    10a4:	9a 95       	dec	r25
    10a6:	66 0f       	add	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	da f7       	brpl	.-10     	; 0x10a4 <__floatsisf+0x62>
    10ae:	88 0f       	add	r24, r24
    10b0:	96 95       	lsr	r25
    10b2:	87 95       	ror	r24
    10b4:	97 f9       	bld	r25, 7
    10b6:	08 95       	ret

000010b8 <__fp_inf>:
    10b8:	97 f9       	bld	r25, 7
    10ba:	9f 67       	ori	r25, 0x7F	; 127
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <__fp_nan>:
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	80 ec       	ldi	r24, 0xC0	; 192
    10c8:	08 95       	ret

000010ca <__fp_pscA>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	09 06       	cpc	r0, r25
    10d6:	08 95       	ret

000010d8 <__fp_pscB>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	05 06       	cpc	r0, r21
    10e4:	08 95       	ret

000010e6 <__fp_round>:
    10e6:	09 2e       	mov	r0, r25
    10e8:	03 94       	inc	r0
    10ea:	00 0c       	add	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0xc>
    10ee:	88 23       	and	r24, r24
    10f0:	52 f0       	brmi	.+20     	; 0x1106 <__fp_round+0x20>
    10f2:	bb 0f       	add	r27, r27
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <__fp_round+0x20>
    10f6:	bf 2b       	or	r27, r31
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0x18>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__fp_round+0x20>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__fp_split3>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	90 58       	subi	r25, 0x80	; 128
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	59 f0       	breq	.+22     	; 0x1128 <__fp_splitA+0x10>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	71 f0       	breq	.+28     	; 0x1132 <__fp_splitA+0x1a>
    1116:	47 95       	ror	r20

00001118 <__fp_splitA>:
    1118:	88 0f       	add	r24, r24
    111a:	97 fb       	bst	r25, 7
    111c:	99 1f       	adc	r25, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_splitA+0x20>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	79 f0       	breq	.+30     	; 0x1142 <__fp_splitA+0x2a>
    1124:	87 95       	ror	r24
    1126:	08 95       	ret
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	55 1f       	adc	r21, r21
    1130:	f2 cf       	rjmp	.-28     	; 0x1116 <__fp_split3+0xe>
    1132:	46 95       	lsr	r20
    1134:	f1 df       	rcall	.-30     	; 0x1118 <__fp_splitA>
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <__fp_splitA+0x30>
    1138:	16 16       	cp	r1, r22
    113a:	17 06       	cpc	r1, r23
    113c:	18 06       	cpc	r1, r24
    113e:	99 1f       	adc	r25, r25
    1140:	f1 cf       	rjmp	.-30     	; 0x1124 <__fp_splitA+0xc>
    1142:	86 95       	lsr	r24
    1144:	71 05       	cpc	r23, r1
    1146:	61 05       	cpc	r22, r1
    1148:	08 94       	sec
    114a:	08 95       	ret

0000114c <__fp_zero>:
    114c:	e8 94       	clt

0000114e <__fp_szero>:
    114e:	bb 27       	eor	r27, r27
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	cb 01       	movw	r24, r22
    1156:	97 f9       	bld	r25, 7
    1158:	08 95       	ret

0000115a <__mulsf3>:
    115a:	0b d0       	rcall	.+22     	; 0x1172 <__mulsf3x>
    115c:	c4 cf       	rjmp	.-120    	; 0x10e6 <__fp_round>
    115e:	b5 df       	rcall	.-150    	; 0x10ca <__fp_pscA>
    1160:	28 f0       	brcs	.+10     	; 0x116c <__mulsf3+0x12>
    1162:	ba df       	rcall	.-140    	; 0x10d8 <__fp_pscB>
    1164:	18 f0       	brcs	.+6      	; 0x116c <__mulsf3+0x12>
    1166:	95 23       	and	r25, r21
    1168:	09 f0       	breq	.+2      	; 0x116c <__mulsf3+0x12>
    116a:	a6 cf       	rjmp	.-180    	; 0x10b8 <__fp_inf>
    116c:	ab cf       	rjmp	.-170    	; 0x10c4 <__fp_nan>
    116e:	11 24       	eor	r1, r1
    1170:	ee cf       	rjmp	.-36     	; 0x114e <__fp_szero>

00001172 <__mulsf3x>:
    1172:	ca df       	rcall	.-108    	; 0x1108 <__fp_split3>
    1174:	a0 f3       	brcs	.-24     	; 0x115e <__mulsf3+0x4>

00001176 <__mulsf3_pse>:
    1176:	95 9f       	mul	r25, r21
    1178:	d1 f3       	breq	.-12     	; 0x116e <__mulsf3+0x14>
    117a:	95 0f       	add	r25, r21
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	55 1f       	adc	r21, r21
    1180:	62 9f       	mul	r22, r18
    1182:	f0 01       	movw	r30, r0
    1184:	72 9f       	mul	r23, r18
    1186:	bb 27       	eor	r27, r27
    1188:	f0 0d       	add	r31, r0
    118a:	b1 1d       	adc	r27, r1
    118c:	63 9f       	mul	r22, r19
    118e:	aa 27       	eor	r26, r26
    1190:	f0 0d       	add	r31, r0
    1192:	b1 1d       	adc	r27, r1
    1194:	aa 1f       	adc	r26, r26
    1196:	64 9f       	mul	r22, r20
    1198:	66 27       	eor	r22, r22
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	66 1f       	adc	r22, r22
    11a0:	82 9f       	mul	r24, r18
    11a2:	22 27       	eor	r18, r18
    11a4:	b0 0d       	add	r27, r0
    11a6:	a1 1d       	adc	r26, r1
    11a8:	62 1f       	adc	r22, r18
    11aa:	73 9f       	mul	r23, r19
    11ac:	b0 0d       	add	r27, r0
    11ae:	a1 1d       	adc	r26, r1
    11b0:	62 1f       	adc	r22, r18
    11b2:	83 9f       	mul	r24, r19
    11b4:	a0 0d       	add	r26, r0
    11b6:	61 1d       	adc	r22, r1
    11b8:	22 1f       	adc	r18, r18
    11ba:	74 9f       	mul	r23, r20
    11bc:	33 27       	eor	r19, r19
    11be:	a0 0d       	add	r26, r0
    11c0:	61 1d       	adc	r22, r1
    11c2:	23 1f       	adc	r18, r19
    11c4:	84 9f       	mul	r24, r20
    11c6:	60 0d       	add	r22, r0
    11c8:	21 1d       	adc	r18, r1
    11ca:	82 2f       	mov	r24, r18
    11cc:	76 2f       	mov	r23, r22
    11ce:	6a 2f       	mov	r22, r26
    11d0:	11 24       	eor	r1, r1
    11d2:	9f 57       	subi	r25, 0x7F	; 127
    11d4:	50 40       	sbci	r21, 0x00	; 0
    11d6:	8a f0       	brmi	.+34     	; 0x11fa <__mulsf3_pse+0x84>
    11d8:	e1 f0       	breq	.+56     	; 0x1212 <__mulsf3_pse+0x9c>
    11da:	88 23       	and	r24, r24
    11dc:	4a f0       	brmi	.+18     	; 0x11f0 <__mulsf3_pse+0x7a>
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	bb 1f       	adc	r27, r27
    11e4:	66 1f       	adc	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	91 50       	subi	r25, 0x01	; 1
    11ec:	50 40       	sbci	r21, 0x00	; 0
    11ee:	a9 f7       	brne	.-22     	; 0x11da <__mulsf3_pse+0x64>
    11f0:	9e 3f       	cpi	r25, 0xFE	; 254
    11f2:	51 05       	cpc	r21, r1
    11f4:	70 f0       	brcs	.+28     	; 0x1212 <__mulsf3_pse+0x9c>
    11f6:	60 cf       	rjmp	.-320    	; 0x10b8 <__fp_inf>
    11f8:	aa cf       	rjmp	.-172    	; 0x114e <__fp_szero>
    11fa:	5f 3f       	cpi	r21, 0xFF	; 255
    11fc:	ec f3       	brlt	.-6      	; 0x11f8 <__mulsf3_pse+0x82>
    11fe:	98 3e       	cpi	r25, 0xE8	; 232
    1200:	dc f3       	brlt	.-10     	; 0x11f8 <__mulsf3_pse+0x82>
    1202:	86 95       	lsr	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	f7 95       	ror	r31
    120c:	e7 95       	ror	r30
    120e:	9f 5f       	subi	r25, 0xFF	; 255
    1210:	c1 f7       	brne	.-16     	; 0x1202 <__mulsf3_pse+0x8c>
    1212:	fe 2b       	or	r31, r30
    1214:	88 0f       	add	r24, r24
    1216:	91 1d       	adc	r25, r1
    1218:	96 95       	lsr	r25
    121a:	87 95       	ror	r24
    121c:	97 f9       	bld	r25, 7
    121e:	08 95       	ret

00001220 <dtostrf>:
    1220:	ef 92       	push	r14
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	c0 2f       	mov	r28, r16
    122a:	47 ff       	sbrs	r20, 7
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <dtostrf+0x12>
    122e:	34 e1       	ldi	r19, 0x14	; 20
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <dtostrf+0x14>
    1232:	34 e0       	ldi	r19, 0x04	; 4
    1234:	e4 2f       	mov	r30, r20
    1236:	ff 27       	eor	r31, r31
    1238:	e7 fd       	sbrc	r30, 7
    123a:	f0 95       	com	r31
    123c:	f7 ff       	sbrs	r31, 7
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <dtostrf+0x26>
    1240:	f1 95       	neg	r31
    1242:	e1 95       	neg	r30
    1244:	f1 09       	sbc	r31, r1
    1246:	e3 2e       	mov	r14, r19
    1248:	02 2f       	mov	r16, r18
    124a:	2e 2f       	mov	r18, r30
    124c:	4c 2f       	mov	r20, r28
    124e:	51 2f       	mov	r21, r17
    1250:	26 d0       	rcall	.+76     	; 0x129e <dtoa_prf>
    1252:	8c 2f       	mov	r24, r28
    1254:	91 2f       	mov	r25, r17
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ef 90       	pop	r14
    125e:	08 95       	ret

00001260 <itoa>:
    1260:	fb 01       	movw	r30, r22
    1262:	9f 01       	movw	r18, r30
    1264:	e8 94       	clt
    1266:	42 30       	cpi	r20, 0x02	; 2
    1268:	bc f0       	brlt	.+46     	; 0x1298 <itoa+0x38>
    126a:	45 32       	cpi	r20, 0x25	; 37
    126c:	ac f4       	brge	.+42     	; 0x1298 <itoa+0x38>
    126e:	4a 30       	cpi	r20, 0x0A	; 10
    1270:	29 f4       	brne	.+10     	; 0x127c <itoa+0x1c>
    1272:	97 fb       	bst	r25, 7
    1274:	1e f4       	brtc	.+6      	; 0x127c <itoa+0x1c>
    1276:	90 95       	com	r25
    1278:	81 95       	neg	r24
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	64 2f       	mov	r22, r20
    127e:	77 27       	eor	r23, r23
    1280:	72 d2       	rcall	.+1252   	; 0x1766 <__udivmodhi4>
    1282:	80 5d       	subi	r24, 0xD0	; 208
    1284:	8a 33       	cpi	r24, 0x3A	; 58
    1286:	0c f0       	brlt	.+2      	; 0x128a <itoa+0x2a>
    1288:	89 5d       	subi	r24, 0xD9	; 217
    128a:	81 93       	st	Z+, r24
    128c:	cb 01       	movw	r24, r22
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	a9 f7       	brne	.-22     	; 0x127c <itoa+0x1c>
    1292:	16 f4       	brtc	.+4      	; 0x1298 <itoa+0x38>
    1294:	5d e2       	ldi	r21, 0x2D	; 45
    1296:	51 93       	st	Z+, r21
    1298:	10 82       	st	Z, r1
    129a:	c9 01       	movw	r24, r18
    129c:	54 c2       	rjmp	.+1192   	; 0x1746 <strrev>

0000129e <dtoa_prf>:
    129e:	6f 92       	push	r6
    12a0:	7f 92       	push	r7
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	29 97       	sbiw	r28, 0x09	; 9
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	6a 01       	movw	r12, r20
    12ca:	b2 2e       	mov	r11, r18
    12cc:	10 2f       	mov	r17, r16
    12ce:	0c 33       	cpi	r16, 0x3C	; 60
    12d0:	18 f4       	brcc	.+6      	; 0x12d8 <dtoa_prf+0x3a>
    12d2:	f0 2e       	mov	r15, r16
    12d4:	f3 94       	inc	r15
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <dtoa_prf+0x3e>
    12d8:	5c e3       	ldi	r21, 0x3C	; 60
    12da:	f5 2e       	mov	r15, r21
    12dc:	0f 2d       	mov	r16, r15
    12de:	27 e0       	ldi	r18, 0x07	; 7
    12e0:	ae 01       	movw	r20, r28
    12e2:	4f 5f       	subi	r20, 0xFF	; 255
    12e4:	5f 4f       	sbci	r21, 0xFF	; 255
    12e6:	57 d1       	rcall	.+686    	; 0x1596 <__ftoa_engine>
    12e8:	79 81       	ldd	r23, Y+1	; 0x01
    12ea:	27 2f       	mov	r18, r23
    12ec:	29 70       	andi	r18, 0x09	; 9
    12ee:	21 30       	cpi	r18, 0x01	; 1
    12f0:	31 f0       	breq	.+12     	; 0x12fe <dtoa_prf+0x60>
    12f2:	e1 fc       	sbrc	r14, 1
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <dtoa_prf+0x64>
    12f6:	e0 fe       	sbrs	r14, 0
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <dtoa_prf+0x68>
    12fa:	60 e2       	ldi	r22, 0x20	; 32
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <dtoa_prf+0x6a>
    12fe:	6d e2       	ldi	r22, 0x2D	; 45
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <dtoa_prf+0x6a>
    1302:	6b e2       	ldi	r22, 0x2B	; 43
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <dtoa_prf+0x6a>
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	73 ff       	sbrs	r23, 3
    130a:	3d c0       	rjmp	.+122    	; 0x1386 <dtoa_prf+0xe8>
    130c:	66 23       	and	r22, r22
    130e:	11 f0       	breq	.+4      	; 0x1314 <dtoa_prf+0x76>
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <dtoa_prf+0x78>
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	8b 15       	cp	r24, r11
    1318:	10 f4       	brcc	.+4      	; 0x131e <dtoa_prf+0x80>
    131a:	b8 1a       	sub	r11, r24
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <dtoa_prf+0x82>
    131e:	b1 2c       	mov	r11, r1
    1320:	e4 fc       	sbrc	r14, 4
    1322:	0b c0       	rjmp	.+22     	; 0x133a <dtoa_prf+0x9c>
    1324:	8b 2d       	mov	r24, r11
    1326:	f6 01       	movw	r30, r12
    1328:	90 e2       	ldi	r25, 0x20	; 32
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <dtoa_prf+0x92>
    132c:	91 93       	st	Z+, r25
    132e:	81 50       	subi	r24, 0x01	; 1
    1330:	81 11       	cpse	r24, r1
    1332:	fc cf       	rjmp	.-8      	; 0x132c <dtoa_prf+0x8e>
    1334:	cb 0c       	add	r12, r11
    1336:	d1 1c       	adc	r13, r1
    1338:	b1 2c       	mov	r11, r1
    133a:	66 23       	and	r22, r22
    133c:	19 f0       	breq	.+6      	; 0x1344 <dtoa_prf+0xa6>
    133e:	d6 01       	movw	r26, r12
    1340:	6d 93       	st	X+, r22
    1342:	6d 01       	movw	r12, r26
    1344:	e2 fe       	sbrs	r14, 2
    1346:	0a c0       	rjmp	.+20     	; 0x135c <dtoa_prf+0xbe>
    1348:	8e e4       	ldi	r24, 0x4E	; 78
    134a:	f6 01       	movw	r30, r12
    134c:	80 83       	st	Z, r24
    134e:	91 e4       	ldi	r25, 0x41	; 65
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	82 83       	std	Z+2, r24	; 0x02
    1354:	f3 e0       	ldi	r31, 0x03	; 3
    1356:	cf 0e       	add	r12, r31
    1358:	d1 1c       	adc	r13, r1
    135a:	0c c0       	rjmp	.+24     	; 0x1374 <dtoa_prf+0xd6>
    135c:	8e e6       	ldi	r24, 0x6E	; 110
    135e:	d6 01       	movw	r26, r12
    1360:	8c 93       	st	X, r24
    1362:	91 e6       	ldi	r25, 0x61	; 97
    1364:	11 96       	adiw	r26, 0x01	; 1
    1366:	9c 93       	st	X, r25
    1368:	11 97       	sbiw	r26, 0x01	; 1
    136a:	12 96       	adiw	r26, 0x02	; 2
    136c:	8c 93       	st	X, r24
    136e:	b3 e0       	ldi	r27, 0x03	; 3
    1370:	cb 0e       	add	r12, r27
    1372:	d1 1c       	adc	r13, r1
    1374:	8b 2d       	mov	r24, r11
    1376:	f6 01       	movw	r30, r12
    1378:	90 e2       	ldi	r25, 0x20	; 32
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <dtoa_prf+0xe2>
    137c:	91 93       	st	Z+, r25
    137e:	81 50       	subi	r24, 0x01	; 1
    1380:	81 11       	cpse	r24, r1
    1382:	fc cf       	rjmp	.-8      	; 0x137c <dtoa_prf+0xde>
    1384:	40 c0       	rjmp	.+128    	; 0x1406 <dtoa_prf+0x168>
    1386:	72 ff       	sbrs	r23, 2
    1388:	45 c0       	rjmp	.+138    	; 0x1414 <dtoa_prf+0x176>
    138a:	66 23       	and	r22, r22
    138c:	11 f0       	breq	.+4      	; 0x1392 <dtoa_prf+0xf4>
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <dtoa_prf+0xf6>
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	8b 15       	cp	r24, r11
    1396:	10 f4       	brcc	.+4      	; 0x139c <dtoa_prf+0xfe>
    1398:	b8 1a       	sub	r11, r24
    139a:	01 c0       	rjmp	.+2      	; 0x139e <dtoa_prf+0x100>
    139c:	b1 2c       	mov	r11, r1
    139e:	e4 fc       	sbrc	r14, 4
    13a0:	0b c0       	rjmp	.+22     	; 0x13b8 <dtoa_prf+0x11a>
    13a2:	8b 2d       	mov	r24, r11
    13a4:	f6 01       	movw	r30, r12
    13a6:	90 e2       	ldi	r25, 0x20	; 32
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <dtoa_prf+0x110>
    13aa:	91 93       	st	Z+, r25
    13ac:	81 50       	subi	r24, 0x01	; 1
    13ae:	81 11       	cpse	r24, r1
    13b0:	fc cf       	rjmp	.-8      	; 0x13aa <dtoa_prf+0x10c>
    13b2:	cb 0c       	add	r12, r11
    13b4:	d1 1c       	adc	r13, r1
    13b6:	b1 2c       	mov	r11, r1
    13b8:	66 23       	and	r22, r22
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <dtoa_prf+0x124>
    13bc:	f6 01       	movw	r30, r12
    13be:	61 93       	st	Z+, r22
    13c0:	6f 01       	movw	r12, r30
    13c2:	e2 fe       	sbrs	r14, 2
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <dtoa_prf+0x144>
    13c6:	89 e4       	ldi	r24, 0x49	; 73
    13c8:	d6 01       	movw	r26, r12
    13ca:	8c 93       	st	X, r24
    13cc:	8e e4       	ldi	r24, 0x4E	; 78
    13ce:	11 96       	adiw	r26, 0x01	; 1
    13d0:	8c 93       	st	X, r24
    13d2:	11 97       	sbiw	r26, 0x01	; 1
    13d4:	86 e4       	ldi	r24, 0x46	; 70
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	8c 93       	st	X, r24
    13da:	b3 e0       	ldi	r27, 0x03	; 3
    13dc:	cb 0e       	add	r12, r27
    13de:	d1 1c       	adc	r13, r1
    13e0:	0a c0       	rjmp	.+20     	; 0x13f6 <dtoa_prf+0x158>
    13e2:	89 e6       	ldi	r24, 0x69	; 105
    13e4:	f6 01       	movw	r30, r12
    13e6:	80 83       	st	Z, r24
    13e8:	8e e6       	ldi	r24, 0x6E	; 110
    13ea:	81 83       	std	Z+1, r24	; 0x01
    13ec:	86 e6       	ldi	r24, 0x66	; 102
    13ee:	82 83       	std	Z+2, r24	; 0x02
    13f0:	f3 e0       	ldi	r31, 0x03	; 3
    13f2:	cf 0e       	add	r12, r31
    13f4:	d1 1c       	adc	r13, r1
    13f6:	8b 2d       	mov	r24, r11
    13f8:	f6 01       	movw	r30, r12
    13fa:	90 e2       	ldi	r25, 0x20	; 32
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <dtoa_prf+0x164>
    13fe:	91 93       	st	Z+, r25
    1400:	81 50       	subi	r24, 0x01	; 1
    1402:	81 11       	cpse	r24, r1
    1404:	fc cf       	rjmp	.-8      	; 0x13fe <dtoa_prf+0x160>
    1406:	f6 01       	movw	r30, r12
    1408:	eb 0d       	add	r30, r11
    140a:	f1 1d       	adc	r31, r1
    140c:	10 82       	st	Z, r1
    140e:	2e ef       	ldi	r18, 0xFE	; 254
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	ac c0       	rjmp	.+344    	; 0x156c <dtoa_prf+0x2ce>
    1414:	a1 e0       	ldi	r26, 0x01	; 1
    1416:	61 11       	cpse	r22, r1
    1418:	01 c0       	rjmp	.+2      	; 0x141c <dtoa_prf+0x17e>
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	4a 2f       	mov	r20, r26
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	18 16       	cp	r1, r24
    1422:	19 06       	cpc	r1, r25
    1424:	24 f4       	brge	.+8      	; 0x142e <dtoa_prf+0x190>
    1426:	9c 01       	movw	r18, r24
    1428:	2f 5f       	subi	r18, 0xFF	; 255
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <dtoa_prf+0x194>
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	24 0f       	add	r18, r20
    1434:	35 1f       	adc	r19, r21
    1436:	11 23       	and	r17, r17
    1438:	29 f0       	breq	.+10     	; 0x1444 <dtoa_prf+0x1a6>
    143a:	41 2f       	mov	r20, r17
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	4f 5f       	subi	r20, 0xFF	; 255
    1440:	5f 4f       	sbci	r21, 0xFF	; 255
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <dtoa_prf+0x1aa>
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	42 0f       	add	r20, r18
    144a:	53 1f       	adc	r21, r19
    144c:	2b 2d       	mov	r18, r11
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	42 17       	cp	r20, r18
    1452:	53 07       	cpc	r21, r19
    1454:	14 f4       	brge	.+4      	; 0x145a <dtoa_prf+0x1bc>
    1456:	b4 1a       	sub	r11, r20
    1458:	01 c0       	rjmp	.+2      	; 0x145c <dtoa_prf+0x1be>
    145a:	b1 2c       	mov	r11, r1
    145c:	3e 2d       	mov	r19, r14
    145e:	30 71       	andi	r19, 0x10	; 16
    1460:	e4 fc       	sbrc	r14, 4
    1462:	0d c0       	rjmp	.+26     	; 0x147e <dtoa_prf+0x1e0>
    1464:	e3 fc       	sbrc	r14, 3
    1466:	0b c0       	rjmp	.+22     	; 0x147e <dtoa_prf+0x1e0>
    1468:	2b 2d       	mov	r18, r11
    146a:	f6 01       	movw	r30, r12
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <dtoa_prf+0x1d6>
    1470:	41 93       	st	Z+, r20
    1472:	21 50       	subi	r18, 0x01	; 1
    1474:	21 11       	cpse	r18, r1
    1476:	fc cf       	rjmp	.-8      	; 0x1470 <dtoa_prf+0x1d2>
    1478:	cb 0c       	add	r12, r11
    147a:	d1 1c       	adc	r13, r1
    147c:	b1 2c       	mov	r11, r1
    147e:	aa 23       	and	r26, r26
    1480:	19 f0       	breq	.+6      	; 0x1488 <dtoa_prf+0x1ea>
    1482:	d6 01       	movw	r26, r12
    1484:	6d 93       	st	X+, r22
    1486:	6d 01       	movw	r12, r26
    1488:	31 11       	cpse	r19, r1
    148a:	0b c0       	rjmp	.+22     	; 0x14a2 <dtoa_prf+0x204>
    148c:	2b 2d       	mov	r18, r11
    148e:	f6 01       	movw	r30, r12
    1490:	30 e3       	ldi	r19, 0x30	; 48
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <dtoa_prf+0x1fa>
    1494:	31 93       	st	Z+, r19
    1496:	21 50       	subi	r18, 0x01	; 1
    1498:	21 11       	cpse	r18, r1
    149a:	fc cf       	rjmp	.-8      	; 0x1494 <dtoa_prf+0x1f6>
    149c:	cb 0c       	add	r12, r11
    149e:	d1 1c       	adc	r13, r1
    14a0:	b1 2c       	mov	r11, r1
    14a2:	f8 0e       	add	r15, r24
    14a4:	0a 81       	ldd	r16, Y+2	; 0x02
    14a6:	40 e1       	ldi	r20, 0x10	; 16
    14a8:	a4 2e       	mov	r10, r20
    14aa:	a7 22       	and	r10, r23
    14ac:	74 ff       	sbrs	r23, 4
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <dtoa_prf+0x218>
    14b0:	01 33       	cpi	r16, 0x31	; 49
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <dtoa_prf+0x218>
    14b4:	fa 94       	dec	r15
    14b6:	1f 14       	cp	r1, r15
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <dtoa_prf+0x226>
    14ba:	2f 2d       	mov	r18, r15
    14bc:	29 30       	cpi	r18, 0x09	; 9
    14be:	18 f0       	brcs	.+6      	; 0x14c6 <dtoa_prf+0x228>
    14c0:	28 e0       	ldi	r18, 0x08	; 8
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <dtoa_prf+0x228>
    14c4:	21 e0       	ldi	r18, 0x01	; 1
    14c6:	ac 01       	movw	r20, r24
    14c8:	97 ff       	sbrs	r25, 7
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <dtoa_prf+0x232>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	3e e2       	ldi	r19, 0x2E	; 46
    14d6:	93 2e       	mov	r9, r19
    14d8:	fc 01       	movw	r30, r24
    14da:	e2 1b       	sub	r30, r18
    14dc:	f1 09       	sbc	r31, r1
    14de:	9f 01       	movw	r18, r30
    14e0:	dc 01       	movw	r26, r24
    14e2:	a4 1b       	sub	r26, r20
    14e4:	b5 0b       	sbc	r27, r21
    14e6:	fe 01       	movw	r30, r28
    14e8:	31 96       	adiw	r30, 0x01	; 1
    14ea:	ea 0f       	add	r30, r26
    14ec:	fb 1f       	adc	r31, r27
    14ee:	a1 2f       	mov	r26, r17
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	66 24       	eor	r6, r6
    14f4:	77 24       	eor	r7, r7
    14f6:	6a 1a       	sub	r6, r26
    14f8:	7b 0a       	sbc	r7, r27
    14fa:	4f 3f       	cpi	r20, 0xFF	; 255
    14fc:	1f ef       	ldi	r17, 0xFF	; 255
    14fe:	51 07       	cpc	r21, r17
    1500:	19 f4       	brne	.+6      	; 0x1508 <dtoa_prf+0x26a>
    1502:	d6 01       	movw	r26, r12
    1504:	9d 92       	st	X+, r9
    1506:	6d 01       	movw	r12, r26
    1508:	84 17       	cp	r24, r20
    150a:	95 07       	cpc	r25, r21
    150c:	54 f0       	brlt	.+20     	; 0x1522 <dtoa_prf+0x284>
    150e:	24 17       	cp	r18, r20
    1510:	35 07       	cpc	r19, r21
    1512:	3c f4       	brge	.+14     	; 0x1522 <dtoa_prf+0x284>
    1514:	7f 01       	movw	r14, r30
    1516:	e6 0e       	add	r14, r22
    1518:	f7 1e       	adc	r15, r23
    151a:	d7 01       	movw	r26, r14
    151c:	11 96       	adiw	r26, 0x01	; 1
    151e:	1c 91       	ld	r17, X
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <dtoa_prf+0x286>
    1522:	10 e3       	ldi	r17, 0x30	; 48
    1524:	41 50       	subi	r20, 0x01	; 1
    1526:	51 09       	sbc	r21, r1
    1528:	6f 5f       	subi	r22, 0xFF	; 255
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	46 15       	cp	r20, r6
    152e:	57 05       	cpc	r21, r7
    1530:	24 f0       	brlt	.+8      	; 0x153a <dtoa_prf+0x29c>
    1532:	d6 01       	movw	r26, r12
    1534:	1d 93       	st	X+, r17
    1536:	6d 01       	movw	r12, r26
    1538:	e0 cf       	rjmp	.-64     	; 0x14fa <dtoa_prf+0x25c>
    153a:	48 17       	cp	r20, r24
    153c:	59 07       	cpc	r21, r25
    153e:	39 f4       	brne	.+14     	; 0x154e <dtoa_prf+0x2b0>
    1540:	06 33       	cpi	r16, 0x36	; 54
    1542:	20 f4       	brcc	.+8      	; 0x154c <dtoa_prf+0x2ae>
    1544:	05 33       	cpi	r16, 0x35	; 53
    1546:	19 f4       	brne	.+6      	; 0x154e <dtoa_prf+0x2b0>
    1548:	a1 10       	cpse	r10, r1
    154a:	01 c0       	rjmp	.+2      	; 0x154e <dtoa_prf+0x2b0>
    154c:	11 e3       	ldi	r17, 0x31	; 49
    154e:	f6 01       	movw	r30, r12
    1550:	11 93       	st	Z+, r17
    1552:	8b 2d       	mov	r24, r11
    1554:	df 01       	movw	r26, r30
    1556:	90 e2       	ldi	r25, 0x20	; 32
    1558:	02 c0       	rjmp	.+4      	; 0x155e <dtoa_prf+0x2c0>
    155a:	9d 93       	st	X+, r25
    155c:	81 50       	subi	r24, 0x01	; 1
    155e:	81 11       	cpse	r24, r1
    1560:	fc cf       	rjmp	.-8      	; 0x155a <dtoa_prf+0x2bc>
    1562:	eb 0d       	add	r30, r11
    1564:	f1 1d       	adc	r31, r1
    1566:	10 82       	st	Z, r1
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	c9 01       	movw	r24, r18
    156e:	29 96       	adiw	r28, 0x09	; 9
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	bf 90       	pop	r11
    158c:	af 90       	pop	r10
    158e:	9f 90       	pop	r9
    1590:	7f 90       	pop	r7
    1592:	6f 90       	pop	r6
    1594:	08 95       	ret

00001596 <__ftoa_engine>:
    1596:	28 30       	cpi	r18, 0x08	; 8
    1598:	08 f0       	brcs	.+2      	; 0x159c <__ftoa_engine+0x6>
    159a:	27 e0       	ldi	r18, 0x07	; 7
    159c:	33 27       	eor	r19, r19
    159e:	da 01       	movw	r26, r20
    15a0:	99 0f       	add	r25, r25
    15a2:	31 1d       	adc	r19, r1
    15a4:	87 fd       	sbrc	r24, 7
    15a6:	91 60       	ori	r25, 0x01	; 1
    15a8:	00 96       	adiw	r24, 0x00	; 0
    15aa:	61 05       	cpc	r22, r1
    15ac:	71 05       	cpc	r23, r1
    15ae:	39 f4       	brne	.+14     	; 0x15be <__ftoa_engine+0x28>
    15b0:	32 60       	ori	r19, 0x02	; 2
    15b2:	2e 5f       	subi	r18, 0xFE	; 254
    15b4:	3d 93       	st	X+, r19
    15b6:	30 e3       	ldi	r19, 0x30	; 48
    15b8:	2a 95       	dec	r18
    15ba:	e1 f7       	brne	.-8      	; 0x15b4 <__ftoa_engine+0x1e>
    15bc:	08 95       	ret
    15be:	9f 3f       	cpi	r25, 0xFF	; 255
    15c0:	30 f0       	brcs	.+12     	; 0x15ce <__ftoa_engine+0x38>
    15c2:	80 38       	cpi	r24, 0x80	; 128
    15c4:	71 05       	cpc	r23, r1
    15c6:	61 05       	cpc	r22, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <__ftoa_engine+0x36>
    15ca:	3c 5f       	subi	r19, 0xFC	; 252
    15cc:	3c 5f       	subi	r19, 0xFC	; 252
    15ce:	3d 93       	st	X+, r19
    15d0:	91 30       	cpi	r25, 0x01	; 1
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__ftoa_engine+0x40>
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	91 1d       	adc	r25, r1
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	1f 93       	push	r17
    15de:	0f 93       	push	r16
    15e0:	ff 92       	push	r15
    15e2:	ef 92       	push	r14
    15e4:	19 2f       	mov	r17, r25
    15e6:	98 7f       	andi	r25, 0xF8	; 248
    15e8:	96 95       	lsr	r25
    15ea:	e9 2f       	mov	r30, r25
    15ec:	96 95       	lsr	r25
    15ee:	96 95       	lsr	r25
    15f0:	e9 0f       	add	r30, r25
    15f2:	ff 27       	eor	r31, r31
    15f4:	e0 58       	subi	r30, 0x80	; 128
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	99 27       	eor	r25, r25
    15fa:	33 27       	eor	r19, r19
    15fc:	ee 24       	eor	r14, r14
    15fe:	ff 24       	eor	r15, r15
    1600:	a7 01       	movw	r20, r14
    1602:	e7 01       	movw	r28, r14
    1604:	05 90       	lpm	r0, Z+
    1606:	08 94       	sec
    1608:	07 94       	ror	r0
    160a:	28 f4       	brcc	.+10     	; 0x1616 <__ftoa_engine+0x80>
    160c:	36 0f       	add	r19, r22
    160e:	e7 1e       	adc	r14, r23
    1610:	f8 1e       	adc	r15, r24
    1612:	49 1f       	adc	r20, r25
    1614:	51 1d       	adc	r21, r1
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	06 94       	lsr	r0
    1620:	a1 f7       	brne	.-24     	; 0x160a <__ftoa_engine+0x74>
    1622:	05 90       	lpm	r0, Z+
    1624:	07 94       	ror	r0
    1626:	28 f4       	brcc	.+10     	; 0x1632 <__ftoa_engine+0x9c>
    1628:	e7 0e       	add	r14, r23
    162a:	f8 1e       	adc	r15, r24
    162c:	49 1f       	adc	r20, r25
    162e:	56 1f       	adc	r21, r22
    1630:	c1 1d       	adc	r28, r1
    1632:	77 0f       	add	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	66 1f       	adc	r22, r22
    163a:	06 94       	lsr	r0
    163c:	a1 f7       	brne	.-24     	; 0x1626 <__ftoa_engine+0x90>
    163e:	05 90       	lpm	r0, Z+
    1640:	07 94       	ror	r0
    1642:	28 f4       	brcc	.+10     	; 0x164e <__ftoa_engine+0xb8>
    1644:	f8 0e       	add	r15, r24
    1646:	49 1f       	adc	r20, r25
    1648:	56 1f       	adc	r21, r22
    164a:	c7 1f       	adc	r28, r23
    164c:	d1 1d       	adc	r29, r1
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	66 1f       	adc	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	06 94       	lsr	r0
    1658:	a1 f7       	brne	.-24     	; 0x1642 <__ftoa_engine+0xac>
    165a:	05 90       	lpm	r0, Z+
    165c:	07 94       	ror	r0
    165e:	20 f4       	brcc	.+8      	; 0x1668 <__ftoa_engine+0xd2>
    1660:	49 0f       	add	r20, r25
    1662:	56 1f       	adc	r21, r22
    1664:	c7 1f       	adc	r28, r23
    1666:	d8 1f       	adc	r29, r24
    1668:	99 0f       	add	r25, r25
    166a:	66 1f       	adc	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	06 94       	lsr	r0
    1672:	a9 f7       	brne	.-22     	; 0x165e <__ftoa_engine+0xc8>
    1674:	84 91       	lpm	r24, Z
    1676:	10 95       	com	r17
    1678:	17 70       	andi	r17, 0x07	; 7
    167a:	41 f0       	breq	.+16     	; 0x168c <__ftoa_engine+0xf6>
    167c:	d6 95       	lsr	r29
    167e:	c7 95       	ror	r28
    1680:	57 95       	ror	r21
    1682:	47 95       	ror	r20
    1684:	f7 94       	ror	r15
    1686:	e7 94       	ror	r14
    1688:	1a 95       	dec	r17
    168a:	c1 f7       	brne	.-16     	; 0x167c <__ftoa_engine+0xe6>
    168c:	e6 e2       	ldi	r30, 0x26	; 38
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	68 94       	set
    1692:	15 90       	lpm	r1, Z+
    1694:	15 91       	lpm	r17, Z+
    1696:	35 91       	lpm	r19, Z+
    1698:	65 91       	lpm	r22, Z+
    169a:	95 91       	lpm	r25, Z+
    169c:	05 90       	lpm	r0, Z+
    169e:	7f e2       	ldi	r23, 0x2F	; 47
    16a0:	73 95       	inc	r23
    16a2:	e1 18       	sub	r14, r1
    16a4:	f1 0a       	sbc	r15, r17
    16a6:	43 0b       	sbc	r20, r19
    16a8:	56 0b       	sbc	r21, r22
    16aa:	c9 0b       	sbc	r28, r25
    16ac:	d0 09       	sbc	r29, r0
    16ae:	c0 f7       	brcc	.-16     	; 0x16a0 <__ftoa_engine+0x10a>
    16b0:	e1 0c       	add	r14, r1
    16b2:	f1 1e       	adc	r15, r17
    16b4:	43 1f       	adc	r20, r19
    16b6:	56 1f       	adc	r21, r22
    16b8:	c9 1f       	adc	r28, r25
    16ba:	d0 1d       	adc	r29, r0
    16bc:	7e f4       	brtc	.+30     	; 0x16dc <__ftoa_engine+0x146>
    16be:	70 33       	cpi	r23, 0x30	; 48
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <__ftoa_engine+0x130>
    16c2:	8a 95       	dec	r24
    16c4:	e6 cf       	rjmp	.-52     	; 0x1692 <__ftoa_engine+0xfc>
    16c6:	e8 94       	clt
    16c8:	01 50       	subi	r16, 0x01	; 1
    16ca:	30 f0       	brcs	.+12     	; 0x16d8 <__ftoa_engine+0x142>
    16cc:	08 0f       	add	r16, r24
    16ce:	0a f4       	brpl	.+2      	; 0x16d2 <__ftoa_engine+0x13c>
    16d0:	00 27       	eor	r16, r16
    16d2:	02 17       	cp	r16, r18
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <__ftoa_engine+0x142>
    16d6:	20 2f       	mov	r18, r16
    16d8:	23 95       	inc	r18
    16da:	02 2f       	mov	r16, r18
    16dc:	7a 33       	cpi	r23, 0x3A	; 58
    16de:	28 f0       	brcs	.+10     	; 0x16ea <__ftoa_engine+0x154>
    16e0:	79 e3       	ldi	r23, 0x39	; 57
    16e2:	7d 93       	st	X+, r23
    16e4:	2a 95       	dec	r18
    16e6:	e9 f7       	brne	.-6      	; 0x16e2 <__ftoa_engine+0x14c>
    16e8:	10 c0       	rjmp	.+32     	; 0x170a <__ftoa_engine+0x174>
    16ea:	7d 93       	st	X+, r23
    16ec:	2a 95       	dec	r18
    16ee:	89 f6       	brne	.-94     	; 0x1692 <__ftoa_engine+0xfc>
    16f0:	06 94       	lsr	r0
    16f2:	97 95       	ror	r25
    16f4:	67 95       	ror	r22
    16f6:	37 95       	ror	r19
    16f8:	17 95       	ror	r17
    16fa:	17 94       	ror	r1
    16fc:	e1 18       	sub	r14, r1
    16fe:	f1 0a       	sbc	r15, r17
    1700:	43 0b       	sbc	r20, r19
    1702:	56 0b       	sbc	r21, r22
    1704:	c9 0b       	sbc	r28, r25
    1706:	d0 09       	sbc	r29, r0
    1708:	98 f0       	brcs	.+38     	; 0x1730 <__ftoa_engine+0x19a>
    170a:	23 95       	inc	r18
    170c:	7e 91       	ld	r23, -X
    170e:	73 95       	inc	r23
    1710:	7a 33       	cpi	r23, 0x3A	; 58
    1712:	08 f0       	brcs	.+2      	; 0x1716 <__ftoa_engine+0x180>
    1714:	70 e3       	ldi	r23, 0x30	; 48
    1716:	7c 93       	st	X, r23
    1718:	20 13       	cpse	r18, r16
    171a:	b8 f7       	brcc	.-18     	; 0x170a <__ftoa_engine+0x174>
    171c:	7e 91       	ld	r23, -X
    171e:	70 61       	ori	r23, 0x10	; 16
    1720:	7d 93       	st	X+, r23
    1722:	30 f0       	brcs	.+12     	; 0x1730 <__ftoa_engine+0x19a>
    1724:	83 95       	inc	r24
    1726:	71 e3       	ldi	r23, 0x31	; 49
    1728:	7d 93       	st	X+, r23
    172a:	70 e3       	ldi	r23, 0x30	; 48
    172c:	2a 95       	dec	r18
    172e:	e1 f7       	brne	.-8      	; 0x1728 <__ftoa_engine+0x192>
    1730:	11 24       	eor	r1, r1
    1732:	ef 90       	pop	r14
    1734:	ff 90       	pop	r15
    1736:	0f 91       	pop	r16
    1738:	1f 91       	pop	r17
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	99 27       	eor	r25, r25
    1740:	87 fd       	sbrc	r24, 7
    1742:	90 95       	com	r25
    1744:	08 95       	ret

00001746 <strrev>:
    1746:	dc 01       	movw	r26, r24
    1748:	fc 01       	movw	r30, r24
    174a:	67 2f       	mov	r22, r23
    174c:	71 91       	ld	r23, Z+
    174e:	77 23       	and	r23, r23
    1750:	e1 f7       	brne	.-8      	; 0x174a <strrev+0x4>
    1752:	32 97       	sbiw	r30, 0x02	; 2
    1754:	04 c0       	rjmp	.+8      	; 0x175e <strrev+0x18>
    1756:	7c 91       	ld	r23, X
    1758:	6d 93       	st	X+, r22
    175a:	70 83       	st	Z, r23
    175c:	62 91       	ld	r22, -Z
    175e:	ae 17       	cp	r26, r30
    1760:	bf 07       	cpc	r27, r31
    1762:	c8 f3       	brcs	.-14     	; 0x1756 <strrev+0x10>
    1764:	08 95       	ret

00001766 <__udivmodhi4>:
    1766:	aa 1b       	sub	r26, r26
    1768:	bb 1b       	sub	r27, r27
    176a:	51 e1       	ldi	r21, 0x11	; 17
    176c:	07 c0       	rjmp	.+14     	; 0x177c <__udivmodhi4_ep>

0000176e <__udivmodhi4_loop>:
    176e:	aa 1f       	adc	r26, r26
    1770:	bb 1f       	adc	r27, r27
    1772:	a6 17       	cp	r26, r22
    1774:	b7 07       	cpc	r27, r23
    1776:	10 f0       	brcs	.+4      	; 0x177c <__udivmodhi4_ep>
    1778:	a6 1b       	sub	r26, r22
    177a:	b7 0b       	sbc	r27, r23

0000177c <__udivmodhi4_ep>:
    177c:	88 1f       	adc	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	5a 95       	dec	r21
    1782:	a9 f7       	brne	.-22     	; 0x176e <__udivmodhi4_loop>
    1784:	80 95       	com	r24
    1786:	90 95       	com	r25
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	08 95       	ret

0000178e <_exit>:
    178e:	f8 94       	cli

00001790 <__stop_program>:
    1790:	ff cf       	rjmp	.-2      	; 0x1790 <__stop_program>
