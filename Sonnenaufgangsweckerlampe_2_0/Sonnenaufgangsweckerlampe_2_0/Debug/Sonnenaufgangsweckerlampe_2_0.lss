
Sonnenaufgangsweckerlampe_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  00001eb6  00001f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080014e  0080014e  00002038  2**0
                  ALLOC
  3 .stab         00002dc0  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008cb  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000056c3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  000056f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004071  00000000  00000000  00005822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000053a  00000000  00000000  00009893  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cc3  00000000  00000000  00009dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000374  00000000  00000000  0000aa90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b7  00000000  00000000  0000ae04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e65  00000000  00000000  0000b3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	97 c0       	rjmp	.+302    	; 0x130 <__ctors_end>
       2:	b1 c0       	rjmp	.+354    	; 0x166 <__bad_interrupt>
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	af c0       	rjmp	.+350    	; 0x166 <__bad_interrupt>
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	ad c0       	rjmp	.+346    	; 0x166 <__bad_interrupt>
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	ab c0       	rjmp	.+342    	; 0x166 <__bad_interrupt>
      10:	91 c9       	rjmp	.-3294   	; 0xfffff334 <__eeprom_end+0xff7ef334>
      12:	63 c9       	rjmp	.-3386   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	a7 c0       	rjmp	.+334    	; 0x166 <__bad_interrupt>
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	a5 c0       	rjmp	.+330    	; 0x166 <__bad_interrupt>
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	a3 c0       	rjmp	.+326    	; 0x166 <__bad_interrupt>
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	a1 c0       	rjmp	.+322    	; 0x166 <__bad_interrupt>
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	ef c2       	rjmp	.+1502   	; 0x606 <_Z3aushh+0x2a>
      28:	f7 c2       	rjmp	.+1518   	; 0x618 <_Z3aushh+0x3c>
      2a:	ff c2       	rjmp	.+1534   	; 0x62a <_Z3aushh+0x4e>
      2c:	02 c3       	rjmp	.+1540   	; 0x632 <_Z3aushh+0x56>
      2e:	07 c3       	rjmp	.+1550   	; 0x63e <_Z3aushh+0x62>
      30:	10 c3       	rjmp	.+1568   	; 0x652 <_Z3aushh+0x76>
      32:	2c c3       	rjmp	.+1624   	; 0x68c <_Z3aushh+0xb0>
      34:	31 c3       	rjmp	.+1634   	; 0x698 <_Z3aushh+0xbc>
      36:	00 40       	sbci	r16, 0x00	; 0
      38:	7a 10       	cpse	r7, r10
      3a:	f3 5a       	subi	r31, 0xA3	; 163
      3c:	00 a0       	ldd	r0, Z+32	; 0x20
      3e:	72 4e       	sbci	r23, 0xE2	; 226
      40:	18 09       	sbc	r17, r8
      42:	00 10       	cpse	r0, r0
      44:	a5 d4       	rcall	.+2378   	; 0x990 <_Z5einsth+0x1ee>
      46:	e8 00       	.word	0x00e8	; ????
      48:	00 e8       	ldi	r16, 0x80	; 128
      4a:	76 48       	sbci	r23, 0x86	; 134
      4c:	17 00       	.word	0x0017	; ????
      4e:	00 e4       	ldi	r16, 0x40	; 64
      50:	0b 54       	subi	r16, 0x4B	; 75
      52:	02 00       	.word	0x0002	; ????
      54:	00 ca       	rjmp	.-3072   	; 0xfffff456 <__eeprom_end+0xff7ef456>
      56:	9a 3b       	cpi	r25, 0xBA	; 186
      58:	00 00       	nop
      5a:	00 e1       	ldi	r16, 0x10	; 16
      5c:	f5 05       	cpc	r31, r5
      5e:	00 00       	nop
      60:	80 96       	adiw	r24, 0x20	; 32
      62:	98 00       	.word	0x0098	; ????
      64:	00 00       	nop
      66:	40 42       	sbci	r20, 0x20	; 32
      68:	0f 00       	.word	0x000f	; ????
      6a:	00 00       	nop
      6c:	a0 86       	std	Z+8, r10	; 0x08
      6e:	01 00       	.word	0x0001	; ????
      70:	00 00       	nop
      72:	10 27       	eor	r17, r16
      74:	00 00       	nop
      76:	00 00       	nop
      78:	e8 03       	fmulsu	r22, r16
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	64 00       	.word	0x0064	; ????
      80:	00 00       	nop
      82:	00 00       	nop
      84:	0a 00       	.word	0x000a	; ????
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	01 00       	.word	0x0001	; ????
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	2c 76       	andi	r18, 0x6C	; 108
      92:	d8 88       	ldd	r13, Y+16	; 0x10
      94:	dc 67       	ori	r29, 0x7C	; 124
      96:	4f 08       	sbc	r4, r15
      98:	23 df       	rcall	.-442    	; 0xfffffee0 <__eeprom_end+0xff7efee0>
      9a:	c1 df       	rcall	.-126    	; 0x1e <__zero_reg__+0x1d>
      9c:	ae 59       	subi	r26, 0x9E	; 158
      9e:	e1 b1       	in	r30, 0x01	; 1
      a0:	b7 96       	adiw	r30, 0x27	; 39
      a2:	e5 e3       	ldi	r30, 0x35	; 53
      a4:	e4 53       	subi	r30, 0x34	; 52
      a6:	c6 3a       	cpi	r28, 0xA6	; 166
      a8:	e6 51       	subi	r30, 0x16	; 22
      aa:	99 76       	andi	r25, 0x69	; 105
      ac:	96 e8       	ldi	r25, 0x86	; 134
      ae:	e6 c2       	rjmp	.+1484   	; 0x67c <_Z3aushh+0xa0>
      b0:	84 26       	eor	r8, r20
      b2:	eb 89       	ldd	r30, Y+19	; 0x13
      b4:	8c 9b       	sbis	0x11, 4	; 17
      b6:	62 ed       	ldi	r22, 0xD2	; 210
      b8:	40 7c       	andi	r20, 0xC0	; 192
      ba:	6f fc       	.word	0xfc6f	; ????
      bc:	ef bc       	out	0x2f, r14	; 47
      be:	9c 9f       	mul	r25, r28
      c0:	40 f2       	brcs	.-112    	; 0x52 <__SREG__+0x13>
      c2:	ba a5       	ldd	r27, Y+42	; 0x2a
      c4:	6f a5       	ldd	r22, Y+47	; 0x2f
      c6:	f4 90       	lpm	r15, Z
      c8:	05 5a       	subi	r16, 0xA5	; 165
      ca:	2a f7       	brpl	.-54     	; 0x96 <__SREG__+0x57>
      cc:	5c 93       	st	X, r21
      ce:	6b 6c       	ori	r22, 0xCB	; 203
      d0:	f9 67       	ori	r31, 0x79	; 121
      d2:	6d c1       	rjmp	.+730    	; 0x3ae <_Z10temperaturv>
      d4:	1b fc       	.word	0xfc1b	; ????
      d6:	e0 e4       	ldi	r30, 0x40	; 64
      d8:	0d 47       	sbci	r16, 0x7D	; 125
      da:	fe f5       	brtc	.+126    	; 0x15a <.do_clear_bss_loop>
      dc:	20 e6       	ldi	r18, 0x60	; 96
      de:	b5 00       	.word	0x00b5	; ????
      e0:	d0 ed       	ldi	r29, 0xD0	; 208
      e2:	90 2e       	mov	r9, r16
      e4:	03 00       	.word	0x0003	; ????
      e6:	94 35       	cpi	r25, 0x54	; 84
      e8:	77 05       	cpc	r23, r7
      ea:	00 80       	ld	r0, Z
      ec:	84 1e       	adc	r8, r20
      ee:	08 00       	.word	0x0008	; ????
      f0:	00 20       	and	r0, r0
      f2:	4e 0a       	sbc	r4, r30
      f4:	00 00       	nop
      f6:	00 c8       	rjmp	.-4096   	; 0xfffff0f8 <__eeprom_end+0xff7ef0f8>
      f8:	0c 33       	cpi	r16, 0x3C	; 60
      fa:	33 33       	cpi	r19, 0x33	; 51
      fc:	33 0f       	add	r19, r19
      fe:	98 6e       	ori	r25, 0xE8	; 232
     100:	12 83       	std	Z+2, r17	; 0x02
     102:	11 41       	sbci	r17, 0x11	; 17
     104:	ef 8d       	ldd	r30, Y+31	; 0x1f
     106:	21 14       	cp	r2, r1
     108:	89 3b       	cpi	r24, 0xB9	; 185
     10a:	e6 55       	subi	r30, 0x56	; 86
     10c:	16 cf       	rjmp	.-468    	; 0xffffff3a <__eeprom_end+0xff7eff3a>
     10e:	fe e6       	ldi	r31, 0x6E	; 110
     110:	db 18       	sub	r13, r11
     112:	d1 84       	ldd	r13, Z+9	; 0x09
     114:	4b 38       	cpi	r20, 0x8B	; 139
     116:	1b f7       	brvc	.-58     	; 0xde <__SREG__+0x9f>
     118:	7c 1d       	adc	r23, r12
     11a:	90 1d       	adc	r25, r0
     11c:	a4 bb       	out	0x14, r26	; 20
     11e:	e4 24       	eor	r14, r4
     120:	20 32       	cpi	r18, 0x20	; 32
     122:	84 72       	andi	r24, 0x24	; 36
     124:	5e 22       	and	r5, r30
     126:	81 00       	.word	0x0081	; ????
     128:	c9 f1       	breq	.+114    	; 0x19c <_Z8lcd_datah+0x12>
     12a:	24 ec       	ldi	r18, 0xC4	; 196
     12c:	a1 e5       	ldi	r26, 0x51	; 81
     12e:	3d 27       	eor	r19, r29

00000130 <__ctors_end>:
     130:	11 24       	eor	r1, r1
     132:	1f be       	out	0x3f, r1	; 63
     134:	cf e5       	ldi	r28, 0x5F	; 95
     136:	d4 e0       	ldi	r29, 0x04	; 4
     138:	de bf       	out	0x3e, r29	; 62
     13a:	cd bf       	out	0x3d, r28	; 61

0000013c <__do_copy_data>:
     13c:	11 e0       	ldi	r17, 0x01	; 1
     13e:	a0 e6       	ldi	r26, 0x60	; 96
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	e6 eb       	ldi	r30, 0xB6	; 182
     144:	fe e1       	ldi	r31, 0x1E	; 30
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x10>
     148:	05 90       	lpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	ae 34       	cpi	r26, 0x4E	; 78
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0xc>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	ae e4       	ldi	r26, 0x4E	; 78
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	aa 37       	cpi	r26, 0x7A	; 122
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	fd d8       	rcall	.-3590   	; 0xfffff35e <__eeprom_end+0xff7ef35e>
     164:	a6 ce       	rjmp	.-692    	; 0xfffffeb2 <__eeprom_end+0xff7efeb2>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <_ZL10lcd_enablev>:

////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls
static void lcd_enable( void )
{
	LCD_PORT |= (1<<LCD_EN);     // Enable auf 1 setzen
     168:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16a:	88 e1       	ldi	r24, 0x18	; 24
     16c:	8a 95       	dec	r24
     16e:	f1 f7       	brne	.-4      	; 0x16c <_ZL10lcd_enablev+0x4>
     170:	00 c0       	rjmp	.+0      	; 0x172 <_ZL10lcd_enablev+0xa>
	_delay_us( LCD_ENABLE_US );  // kurze Pause
	LCD_PORT &= ~(1<<LCD_EN);    // Enable auf 0 setzen
     172:	c5 98       	cbi	0x18, 5	; 24
     174:	08 95       	ret

00000176 <_ZL7lcd_outh>:
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
	data &= 0xF0;                       // obere 4 Bit maskieren
	
	LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske löschen
     176:	98 b3       	in	r25, 0x18	; 24
     178:	90 7f       	andi	r25, 0xF0	; 240
     17a:	98 bb       	out	0x18, r25	; 24
	LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
     17c:	98 b3       	in	r25, 0x18	; 24
     17e:	82 95       	swap	r24
     180:	8f 70       	andi	r24, 0x0F	; 15
     182:	98 2b       	or	r25, r24
     184:	98 bb       	out	0x18, r25	; 24
	lcd_enable();
     186:	f0 df       	rcall	.-32     	; 0x168 <_ZL10lcd_enablev>
     188:	08 95       	ret

0000018a <_Z8lcd_datah>:
}

////////////////////////////////////////////////////////////////////////////////
// Sendet ein Datenbyte an das LCD
void lcd_data( uint8_t data )
{
     18a:	cf 93       	push	r28
     18c:	c8 2f       	mov	r28, r24
	LCD_PORT |= (1<<LCD_RS);    // RS auf 1 setzen
     18e:	c4 9a       	sbi	0x18, 4	; 24
	
	lcd_out( data );            // zuerst die oberen,
     190:	f2 df       	rcall	.-28     	; 0x176 <_ZL7lcd_outh>
	lcd_out( data<<4 );         // dann die unteren 4 Bit senden
     192:	8c 2f       	mov	r24, r28
     194:	82 95       	swap	r24
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	ee df       	rcall	.-36     	; 0x176 <_ZL7lcd_outh>
     19a:	88 e3       	ldi	r24, 0x38	; 56
     19c:	8a 95       	dec	r24
     19e:	f1 f7       	brne	.-4      	; 0x19c <_Z8lcd_datah+0x12>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z8lcd_datah+0x18>
	
	_delay_us( LCD_WRITEDATA_US );
}
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <_Z11lcd_commandh>:

////////////////////////////////////////////////////////////////////////////////
// Sendet einen Befehl an das LCD
void lcd_command( uint8_t data )
{
     1a6:	cf 93       	push	r28
     1a8:	c8 2f       	mov	r28, r24
	LCD_PORT &= ~(1<<LCD_RS);    // RS auf 0 setzen
     1aa:	c4 98       	cbi	0x18, 4	; 24
	
	lcd_out( data );             // zuerst die oberen,
     1ac:	e4 df       	rcall	.-56     	; 0x176 <_ZL7lcd_outh>
	lcd_out( data<<4 );           // dann die unteren 4 Bit senden
     1ae:	8c 2f       	mov	r24, r28
     1b0:	82 95       	swap	r24
     1b2:	80 7f       	andi	r24, 0xF0	; 240
     1b4:	e0 df       	rcall	.-64     	; 0x176 <_ZL7lcd_outh>
     1b6:	83 e3       	ldi	r24, 0x33	; 51
     1b8:	8a 95       	dec	r24
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z11lcd_commandh+0x12>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z11lcd_commandh+0x18>
	
	_delay_us( LCD_COMMAND_US );
}
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <_Z9lcd_clearv>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcd_clear( void )
{
	lcd_command( LCD_CLEAR_DISPLAY );
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	f0 df       	rcall	.-32     	; 0x1a6 <_Z11lcd_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	83 e3       	ldi	r24, 0x33	; 51
     1c8:	97 e0       	ldi	r25, 0x07	; 7
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <_Z9lcd_clearv+0x8>
     1ce:	08 95       	ret

000001d0 <_Z8lcd_initv>:
{
	// verwendete Pins auf Ausgang schalten
	uint8_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
	(1<<LCD_RS) |                // R/S Leitung
	(1<<LCD_EN);                 // Enable Leitung
	LCD_DDR |= pins;
     1d0:	87 b3       	in	r24, 0x17	; 23
     1d2:	8f 63       	ori	r24, 0x3F	; 63
     1d4:	87 bb       	out	0x17, r24	; 23
	
	// initial alle Ausgänge auf Null
	LCD_PORT &= ~pins;
     1d6:	88 b3       	in	r24, 0x18	; 24
     1d8:	80 7c       	andi	r24, 0xC0	; 192
     1da:	88 bb       	out	0x18, r24	; 24
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	95 e3       	ldi	r25, 0x35	; 53
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z8lcd_initv+0x10>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z8lcd_initv+0x16>
     1e6:	00 00       	nop
	
	// warten auf die Bereitschaft des LCD
	_delay_ms( LCD_BOOTUP_MS );
	
	// Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
	lcd_out( LCD_SOFT_RESET );
     1e8:	80 e3       	ldi	r24, 0x30	; 48
     1ea:	c5 df       	rcall	.-118    	; 0x176 <_ZL7lcd_outh>
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	91 e1       	ldi	r25, 0x11	; 17
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_Z8lcd_initv+0x20>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_Z8lcd_initv+0x26>
     1f6:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS1 );
	
	lcd_enable();
     1f8:	b7 df       	rcall	.-146    	; 0x168 <_ZL10lcd_enablev>
     1fa:	89 e9       	ldi	r24, 0x99	; 153
     1fc:	93 e0       	ldi	r25, 0x03	; 3
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z8lcd_initv+0x2e>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_Z8lcd_initv+0x34>
	_delay_ms( LCD_SOFT_RESET_MS2 );
	
	lcd_enable();
     204:	b1 df       	rcall	.-158    	; 0x168 <_ZL10lcd_enablev>
     206:	89 e9       	ldi	r24, 0x99	; 153
     208:	93 e0       	ldi	r25, 0x03	; 3
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <_Z8lcd_initv+0x3a>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z8lcd_initv+0x40>
	_delay_ms( LCD_SOFT_RESET_MS3 );
	
	// 4-bit Modus aktivieren
	lcd_out( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT );
     210:	80 e2       	ldi	r24, 0x20	; 32
     212:	b1 df       	rcall	.-158    	; 0x176 <_ZL7lcd_outh>
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	91 e1       	ldi	r25, 0x11	; 17
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <_Z8lcd_initv+0x48>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <_Z8lcd_initv+0x4e>
     21e:	00 00       	nop
	
	// 4-bit Modus / 2 Zeilen / 5x7
	lcd_command( LCD_SET_FUNCTION |
	LCD_FUNCTION_4BIT |
	LCD_FUNCTION_2LINE |
	LCD_FUNCTION_5X7 );
     220:	88 e2       	ldi	r24, 0x28	; 40
     222:	c1 df       	rcall	.-126    	; 0x1a6 <_Z11lcd_commandh>
	
	// Display ein / Cursor aus / Blinken aus
	lcd_command( LCD_SET_DISPLAY |
	LCD_DISPLAY_ON |
	LCD_CURSOR_OFF |
	LCD_BLINKING_OFF);
     224:	8c e0       	ldi	r24, 0x0C	; 12
     226:	bf df       	rcall	.-130    	; 0x1a6 <_Z11lcd_commandh>
	
	// Cursor inkrement / kein Scrollen
	lcd_command( LCD_SET_ENTRY |
	LCD_ENTRY_INCREASE |
	LCD_ENTRY_NOSHIFT );
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	bd df       	rcall	.-134    	; 0x1a6 <_Z11lcd_commandh>
	
	lcd_clear();
     22c:	ca df       	rcall	.-108    	; 0x1c2 <_Z9lcd_clearv>
     22e:	08 95       	ret

00000230 <_Z8lcd_homev>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
	lcd_command( LCD_CURSOR_HOME );
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	b9 df       	rcall	.-142    	; 0x1a6 <_Z11lcd_commandh>
     234:	83 e3       	ldi	r24, 0x33	; 51
     236:	97 e0       	ldi	r25, 0x07	; 7
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <_Z8lcd_homev+0x8>
     23c:	08 95       	ret

0000023e <_Z13lcd_setcursorhh>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;
	
	switch (y)
     23e:	62 30       	cpi	r22, 0x02	; 2
     240:	59 f0       	breq	.+22     	; 0x258 <_Z13lcd_setcursorhh+0x1a>
     242:	18 f4       	brcc	.+6      	; 0x24a <_Z13lcd_setcursorhh+0xc>
     244:	61 30       	cpi	r22, 0x01	; 1
     246:	71 f4       	brne	.+28     	; 0x264 <_Z13lcd_setcursorhh+0x26>
     248:	05 c0       	rjmp	.+10     	; 0x254 <_Z13lcd_setcursorhh+0x16>
     24a:	63 30       	cpi	r22, 0x03	; 3
     24c:	39 f0       	breq	.+14     	; 0x25c <_Z13lcd_setcursorhh+0x1e>
     24e:	64 30       	cpi	r22, 0x04	; 4
     250:	49 f4       	brne	.+18     	; 0x264 <_Z13lcd_setcursorhh+0x26>
     252:	06 c0       	rjmp	.+12     	; 0x260 <_Z13lcd_setcursorhh+0x22>
	{
		case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
     254:	80 58       	subi	r24, 0x80	; 128
		break;
     256:	05 c0       	rjmp	.+10     	; 0x262 <_Z13lcd_setcursorhh+0x24>
		
		case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
     258:	80 54       	subi	r24, 0x40	; 64
		break;
     25a:	03 c0       	rjmp	.+6      	; 0x262 <_Z13lcd_setcursorhh+0x24>
		
		case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
     25c:	80 57       	subi	r24, 0x70	; 112
		break;
     25e:	01 c0       	rjmp	.+2      	; 0x262 <_Z13lcd_setcursorhh+0x24>
		
		case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
     260:	80 53       	subi	r24, 0x30	; 48
		
		default:
		return;                                   // für den Fall einer falschen Zeile
	}
	
	lcd_command( data );
     262:	a1 df       	rcall	.-190    	; 0x1a6 <_Z11lcd_commandh>
     264:	08 95       	ret

00000266 <_Z10lcd_stringPKc>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
	while( *data != '\0' )
     26c:	88 81       	ld	r24, Y
     26e:	88 23       	and	r24, r24
     270:	29 f0       	breq	.+10     	; 0x27c <_Z10lcd_stringPKc+0x16>
}

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
     272:	21 96       	adiw	r28, 0x01	; 1
{
	while( *data != '\0' )
	lcd_data( *data++ );
     274:	8a df       	rcall	.-236    	; 0x18a <_Z8lcd_datah>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
     276:	89 91       	ld	r24, Y+
     278:	81 11       	cpse	r24, r1
     27a:	fc cf       	rjmp	.-8      	; 0x274 <_Z10lcd_stringPKc+0xe>
	lcd_data( *data++ );
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
     282:	97 b1       	in	r25, 0x07	; 7
     284:	8f 71       	andi	r24, 0x1F	; 31
     286:	90 7e       	andi	r25, 0xE0	; 224
     288:	98 2b       	or	r25, r24
     28a:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);
     28c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
     28e:	36 99       	sbic	0x06, 6	; 6
     290:	fe cf       	rjmp	.-4      	; 0x28e <_Z8ADC_Readh+0xc>
	}
	return ADCW;
     292:	24 b1       	in	r18, 0x04	; 4
     294:	35 b1       	in	r19, 0x05	; 5
}
     296:	82 2f       	mov	r24, r18
     298:	93 2f       	mov	r25, r19
     29a:	08 95       	ret

0000029c <_Z11lichteinaush>:
		}
	}
}

void lichteinaus(uint8_t pos){
	switch (pos)
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	91 f0       	breq	.+36     	; 0x2c4 <_Z11lichteinaush+0x28>
     2a0:	28 f4       	brcc	.+10     	; 0x2ac <_Z11lichteinaush+0x10>
     2a2:	88 23       	and	r24, r24
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <_Z11lichteinaush+0x1c>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	c1 f4       	brne	.+48     	; 0x2da <_Z11lichteinaush+0x3e>
     2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <_Z11lichteinaush+0x24>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	71 f0       	breq	.+28     	; 0x2cc <_Z11lichteinaush+0x30>
     2b0:	58 f0       	brcs	.+22     	; 0x2c8 <_Z11lichteinaush+0x2c>
     2b2:	85 30       	cpi	r24, 0x05	; 5
     2b4:	91 f4       	brne	.+36     	; 0x2da <_Z11lichteinaush+0x3e>
     2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <_Z11lichteinaush+0x38>
	{
		case 0:
			PORTC &= ~((1<<PC5) | (1<<PC4) | (1<<PC3));
     2b8:	85 b3       	in	r24, 0x15	; 21
     2ba:	87 7c       	andi	r24, 0xC7	; 199
     2bc:	85 bb       	out	0x15, r24	; 21
			break;
     2be:	08 95       	ret
			
		case 1:
			PORTC |= (1<<PC5);
     2c0:	ad 9a       	sbi	0x15, 5	; 21
			break;
     2c2:	08 95       	ret
		
		case 2:
			PORTC |= (1<<PC4);
     2c4:	ac 9a       	sbi	0x15, 4	; 21
			break;
     2c6:	08 95       	ret
			
		case 3: 
			PORTC |= (1<<PC3);
     2c8:	ab 9a       	sbi	0x15, 3	; 21
			break;
     2ca:	08 95       	ret
		
		case 4:
			PORTC |= ((1<<PC5) | (1<<PC4) | (1<<PC3));
     2cc:	85 b3       	in	r24, 0x15	; 21
     2ce:	88 63       	ori	r24, 0x38	; 56
     2d0:	85 bb       	out	0x15, r24	; 21
			break;
     2d2:	08 95       	ret
		
		case 5:
			PORTC |= ((1<<PC5) | (1<<PC4));
     2d4:	85 b3       	in	r24, 0x15	; 21
     2d6:	80 63       	ori	r24, 0x30	; 48
     2d8:	85 bb       	out	0x15, r24	; 21
     2da:	08 95       	ret

000002dc <_Z6Weckerv>:

#ifndef ZEIT_H_
#define ZEIT_H_

void Wecker(){
	if (WochenTag!=0 && WochenTag!=6)
     2dc:	80 91 76 01 	lds	r24, 0x0176
     2e0:	88 23       	and	r24, r24
     2e2:	a1 f1       	breq	.+104    	; 0x34c <_Z6Weckerv+0x70>
     2e4:	86 30       	cpi	r24, 0x06	; 6
     2e6:	91 f1       	breq	.+100    	; 0x34c <_Z6Weckerv+0x70>
	{
		if (Stunden==Licht1a[1]){
     2e8:	20 91 77 01 	lds	r18, 0x0177
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	80 91 70 01 	lds	r24, 0x0170
     2f2:	90 91 71 01 	lds	r25, 0x0171
     2f6:	28 17       	cp	r18, r24
     2f8:	39 07       	cpc	r19, r25
     2fa:	79 f4       	brne	.+30     	; 0x31a <_Z6Weckerv+0x3e>
			if (Minuten==Licht1a[0]){
     2fc:	20 91 78 01 	lds	r18, 0x0178
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	80 91 6e 01 	lds	r24, 0x016E
     306:	90 91 6f 01 	lds	r25, 0x016F
     30a:	28 17       	cp	r18, r24
     30c:	39 07       	cpc	r19, r25
     30e:	29 f4       	brne	.+10     	; 0x31a <_Z6Weckerv+0x3e>
				Wan = 1;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 69 01 	sts	0x0169, r24
				lichteinaus(4);
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	c1 df       	rcall	.-126    	; 0x29c <_Z11lichteinaush>
			}
		}
		if (Wan==1 && Stunden==WStunden[0])
     31a:	80 91 69 01 	lds	r24, 0x0169
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	09 f0       	breq	.+2      	; 0x324 <_Z6Weckerv+0x48>
     322:	44 c0       	rjmp	.+136    	; 0x3ac <_Z6Weckerv+0xd0>
     324:	90 91 74 01 	lds	r25, 0x0174
     328:	80 91 77 01 	lds	r24, 0x0177
     32c:	98 13       	cpse	r25, r24
     32e:	3e c0       	rjmp	.+124    	; 0x3ac <_Z6Weckerv+0xd0>
		{
			if (Minuten==WMinuten[0])
     330:	90 91 72 01 	lds	r25, 0x0172
     334:	80 91 78 01 	lds	r24, 0x0178
     338:	98 13       	cpse	r25, r24
     33a:	38 c0       	rjmp	.+112    	; 0x3ac <_Z6Weckerv+0xd0>
			{
				TCNT0 = (255-35);
     33c:	8c ed       	ldi	r24, 0xDC	; 220
     33e:	82 bf       	out	0x32, r24	; 50
				TIMSK |= (1<<TOIE0);
     340:	89 b7       	in	r24, 0x39	; 57
     342:	81 60       	ori	r24, 0x01	; 1
     344:	89 bf       	out	0x39, r24	; 57
				TCCR0 = (1<<CS01) | (1<<CS00);	
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	83 bf       	out	0x33, r24	; 51
     34a:	08 95       	ret
			}
		}
	}
	else
	{
		if (Stunden==Licht1b[1]){
     34c:	20 91 77 01 	lds	r18, 0x0177
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	80 91 6c 01 	lds	r24, 0x016C
     356:	90 91 6d 01 	lds	r25, 0x016D
     35a:	28 17       	cp	r18, r24
     35c:	39 07       	cpc	r19, r25
     35e:	79 f4       	brne	.+30     	; 0x37e <_Z6Weckerv+0xa2>
			if (Minuten==Licht1b[0]){
     360:	20 91 78 01 	lds	r18, 0x0178
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	80 91 6a 01 	lds	r24, 0x016A
     36a:	90 91 6b 01 	lds	r25, 0x016B
     36e:	28 17       	cp	r18, r24
     370:	39 07       	cpc	r19, r25
     372:	29 f4       	brne	.+10     	; 0x37e <_Z6Weckerv+0xa2>
				Wan = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 69 01 	sts	0x0169, r24
				lichteinaus(4);
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	8f df       	rcall	.-226    	; 0x29c <_Z11lichteinaush>
			}
		}
		if (Wan==1 && Stunden==WStunden[1])
     37e:	80 91 69 01 	lds	r24, 0x0169
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	99 f4       	brne	.+38     	; 0x3ac <_Z6Weckerv+0xd0>
     386:	90 91 75 01 	lds	r25, 0x0175
     38a:	80 91 77 01 	lds	r24, 0x0177
     38e:	98 13       	cpse	r25, r24
     390:	0d c0       	rjmp	.+26     	; 0x3ac <_Z6Weckerv+0xd0>
		{
			if (Minuten==WMinuten[1])
     392:	90 91 73 01 	lds	r25, 0x0173
     396:	80 91 78 01 	lds	r24, 0x0178
     39a:	98 13       	cpse	r25, r24
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <_Z6Weckerv+0xd0>
			{
				TCNT0 = (255-35);
     39e:	8c ed       	ldi	r24, 0xDC	; 220
     3a0:	82 bf       	out	0x32, r24	; 50
				TIMSK |= (1<<TOIE0);
     3a2:	89 b7       	in	r24, 0x39	; 57
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	89 bf       	out	0x39, r24	; 57
				TCCR0 = (1<<CS01) | (1<<CS00);	
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	83 bf       	out	0x33, r24	; 51
     3ac:	08 95       	ret

000003ae <_Z10temperaturv>:
			break;
	}
}


void temperatur(){
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29

	ADC_Read(0);
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	60 df       	rcall	.-320    	; 0x282 <_Z8ADC_Readh>
	uint16_t adcval1 = ADC_Read(0);
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	5e df       	rcall	.-324    	; 0x282 <_Z8ADC_Readh>
     3c6:	7c 01       	movw	r14, r24
	uint16_t adcval2 = ADC_Read(0);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	5b df       	rcall	.-330    	; 0x282 <_Z8ADC_Readh>
	uint16_t adcval =(uint16_t) (adcval1+adcval2)/2.0;
     3cc:	8e 0d       	add	r24, r14
     3ce:	9f 1d       	adc	r25, r15
     3d0:	bc 01       	movw	r22, r24
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	c5 d9       	rcall	.-3190   	; 0xfffff762 <__eeprom_end+0xff7ef762>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	5f e3       	ldi	r21, 0x3F	; 63
     3e0:	4e da       	rcall	.-2916   	; 0xfffff87e <__eeprom_end+0xff7ef87e>
     3e2:	93 d9       	rcall	.-3290   	; 0xfffff70a <__eeprom_end+0xff7ef70a>
	float span= (float)adcval*(5.0/1023.0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	bc d9       	rcall	.-3208   	; 0xfffff762 <__eeprom_end+0xff7ef762>
     3ea:	2a e0       	ldi	r18, 0x0A	; 10
     3ec:	38 e2       	ldi	r19, 0x28	; 40
     3ee:	40 ea       	ldi	r20, 0xA0	; 160
     3f0:	5b e3       	ldi	r21, 0x3B	; 59
     3f2:	45 da       	rcall	.-2934   	; 0xfffff87e <__eeprom_end+0xff7ef87e>
     3f4:	06 2f       	mov	r16, r22
     3f6:	17 2f       	mov	r17, r23
     3f8:	d8 2f       	mov	r29, r24
     3fa:	c9 2f       	mov	r28, r25
	float widerst = ((float)span*3300.0)/((float)(5-(float)span));	//Widerstand hat 3,3kOhm
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e4       	ldi	r19, 0x40	; 64
     400:	4e e4       	ldi	r20, 0x4E	; 78
     402:	55 e4       	ldi	r21, 0x45	; 69
     404:	3c da       	rcall	.-2952   	; 0xfffff87e <__eeprom_end+0xff7ef87e>
     406:	6b 01       	movw	r12, r22
     408:	7c 01       	movw	r14, r24
     40a:	20 2f       	mov	r18, r16
     40c:	31 2f       	mov	r19, r17
     40e:	4d 2f       	mov	r20, r29
     410:	5c 2f       	mov	r21, r28
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 ea       	ldi	r24, 0xA0	; 160
     418:	90 e4       	ldi	r25, 0x40	; 64
     41a:	aa d8       	rcall	.-3756   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     41c:	9b 01       	movw	r18, r22
     41e:	ac 01       	movw	r20, r24
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	0a d9       	rcall	.-3564   	; 0xfffff63a <__eeprom_end+0xff7ef63a>
	tempera = (100.0/1387.0)*widerst+(50+tempoffset-(100.0/1387.0)*2417.0)-17.86; //-17,86 gemessen, nicht analytisch bestätigt
     426:	25 e2       	ldi	r18, 0x25	; 37
     428:	38 ea       	ldi	r19, 0xA8	; 168
     42a:	43 e9       	ldi	r20, 0x93	; 147
     42c:	5d e3       	ldi	r21, 0x3D	; 61
     42e:	27 da       	rcall	.-2994   	; 0xfffff87e <__eeprom_end+0xff7ef87e>
     430:	6b 01       	movw	r12, r22
     432:	7c 01       	movw	r14, r24
     434:	60 91 62 00 	lds	r22, 0x0062
     438:	77 27       	eor	r23, r23
     43a:	67 fd       	sbrc	r22, 7
     43c:	70 95       	com	r23
     43e:	6e 5c       	subi	r22, 0xCE	; 206
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	88 27       	eor	r24, r24
     444:	77 fd       	sbrc	r23, 7
     446:	80 95       	com	r24
     448:	98 2f       	mov	r25, r24
     44a:	8d d9       	rcall	.-3302   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     44c:	21 ed       	ldi	r18, 0xD1	; 209
     44e:	32 e4       	ldi	r19, 0x42	; 66
     450:	4e e2       	ldi	r20, 0x2E	; 46
     452:	53 e4       	ldi	r21, 0x43	; 67
     454:	8d d8       	rcall	.-3814   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     456:	9b 01       	movw	r18, r22
     458:	ac 01       	movw	r20, r24
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	89 d8       	rcall	.-3822   	; 0xfffff572 <__eeprom_end+0xff7ef572>
     460:	28 e4       	ldi	r18, 0x48	; 72
     462:	31 ee       	ldi	r19, 0xE1	; 225
     464:	4e e8       	ldi	r20, 0x8E	; 142
     466:	51 e4       	ldi	r21, 0x41	; 65
     468:	83 d8       	rcall	.-3834   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     46a:	60 93 64 01 	sts	0x0164, r22
     46e:	70 93 65 01 	sts	0x0165, r23
     472:	80 93 66 01 	sts	0x0166, r24
     476:	90 93 67 01 	sts	0x0167, r25
//	tempera -= 17.86;
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	08 95       	ret

0000048c <_Z4zeitv>:

void zeit(){
	sektemp=Sekunden;
     48c:	80 91 79 01 	lds	r24, 0x0179
     490:	80 93 68 01 	sts	0x0168, r24
	if (Sekunden >= 60){
     494:	8c 33       	cpi	r24, 0x3C	; 60
     496:	58 f1       	brcs	.+86     	; 0x4ee <_Z4zeitv+0x62>
		//Temperatur bestimmen
		//Da auf der Platine nicht eingebaut, wird es momentn ausgenommen
		temperatur();
     498:	8a df       	rcall	.-236    	; 0x3ae <_Z10temperaturv>
		
		Sekunden = 0;
     49a:	10 92 79 01 	sts	0x0179, r1
		Minuten++;
     49e:	80 91 78 01 	lds	r24, 0x0178
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
		if(Minuten >= 60){
     4a4:	8c 33       	cpi	r24, 0x3C	; 60
     4a6:	18 f4       	brcc	.+6      	; 0x4ae <_Z4zeitv+0x22>
		//Temperatur bestimmen
		//Da auf der Platine nicht eingebaut, wird es momentn ausgenommen
		temperatur();
		
		Sekunden = 0;
		Minuten++;
     4a8:	80 93 78 01 	sts	0x0178, r24
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <_Z4zeitv+0x30>
		if(Minuten >= 60){
			Minuten = 0;
     4ae:	10 92 78 01 	sts	0x0178, r1
			Stunden++;
     4b2:	80 91 77 01 	lds	r24, 0x0177
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	80 93 77 01 	sts	0x0177, r24
		}
		if(Stunden >= 24){
     4bc:	80 91 77 01 	lds	r24, 0x0177
     4c0:	88 31       	cpi	r24, 0x18	; 24
     4c2:	a8 f0       	brcs	.+42     	; 0x4ee <_Z4zeitv+0x62>
			Stunden = 0;
     4c4:	10 92 77 01 	sts	0x0177, r1
			WochenTag++;
     4c8:	80 91 76 01 	lds	r24, 0x0176
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
			if (WochenTag>=7)
     4ce:	87 30       	cpi	r24, 0x07	; 7
     4d0:	18 f4       	brcc	.+6      	; 0x4d8 <_Z4zeitv+0x4c>
			Minuten = 0;
			Stunden++;
		}
		if(Stunden >= 24){
			Stunden = 0;
			WochenTag++;
     4d2:	80 93 76 01 	sts	0x0176, r24
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_Z4zeitv+0x50>
			if (WochenTag>=7)
			{
				WochenTag=0;
     4d8:	10 92 76 01 	sts	0x0176, r1
			}
			if (Wan!=0)
     4dc:	80 91 69 01 	lds	r24, 0x0169
     4e0:	81 11       	cpse	r24, r1
			{
				Wan=0;
     4e2:	10 92 69 01 	sts	0x0169, r1
			}
			Sekunden += sekoffset; //Ausgleich der VerlustSekunden
     4e6:	80 91 63 01 	lds	r24, 0x0163
     4ea:	80 93 79 01 	sts	0x0179, r24
		}
	}
	
	if(Wan==0)
     4ee:	80 91 69 01 	lds	r24, 0x0169
     4f2:	81 11       	cpse	r24, r1
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <_Z4zeitv+0x6c>
	{
		Wecker();
     4f6:	f2 de       	rcall	.-540    	; 0x2dc <_Z6Weckerv>
     4f8:	08 95       	ret

000004fa <_Z4wtagh>:

#ifndef AUSGABE_H_
#define AUSGABE_H_

void wtag(uint8_t numm){
	switch (numm)
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	b9 f0       	breq	.+46     	; 0x52c <_Z4wtagh+0x32>
     4fe:	20 f4       	brcc	.+8      	; 0x508 <_Z4wtagh+0xe>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	61 f0       	breq	.+24     	; 0x51c <_Z4wtagh+0x22>
     504:	78 f4       	brcc	.+30     	; 0x524 <_Z4wtagh+0x2a>
     506:	06 c0       	rjmp	.+12     	; 0x514 <_Z4wtagh+0x1a>
     508:	85 30       	cpi	r24, 0x05	; 5
     50a:	c1 f0       	breq	.+48     	; 0x53c <_Z4wtagh+0x42>
     50c:	98 f0       	brcs	.+38     	; 0x534 <_Z4wtagh+0x3a>
     50e:	86 30       	cpi	r24, 0x06	; 6
     510:	e1 f4       	brne	.+56     	; 0x54a <_Z4wtagh+0x50>
     512:	18 c0       	rjmp	.+48     	; 0x544 <_Z4wtagh+0x4a>
	{
		case 0:
		lcd_string("So ");
     514:	83 e6       	ldi	r24, 0x63	; 99
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	a6 de       	rcall	.-692    	; 0x266 <_Z10lcd_stringPKc>
		break;
     51a:	08 95       	ret
		
		case 1:
		lcd_string("Mo ");
     51c:	87 e6       	ldi	r24, 0x67	; 103
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a2 de       	rcall	.-700    	; 0x266 <_Z10lcd_stringPKc>
		break;
     522:	08 95       	ret
		
		case 2:
		lcd_string("Di ");
     524:	8b e6       	ldi	r24, 0x6B	; 107
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9e de       	rcall	.-708    	; 0x266 <_Z10lcd_stringPKc>
		break;
     52a:	08 95       	ret
		
		case 3:
		lcd_string("Mi ");
     52c:	8f e6       	ldi	r24, 0x6F	; 111
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	9a de       	rcall	.-716    	; 0x266 <_Z10lcd_stringPKc>
		break;
     532:	08 95       	ret
		
		case 4:
		lcd_string("Do ");
     534:	83 e7       	ldi	r24, 0x73	; 115
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	96 de       	rcall	.-724    	; 0x266 <_Z10lcd_stringPKc>
		break;
     53a:	08 95       	ret
		
		case 5:
		lcd_string("Fr ");
     53c:	87 e7       	ldi	r24, 0x77	; 119
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	92 de       	rcall	.-732    	; 0x266 <_Z10lcd_stringPKc>
		break;
     542:	08 95       	ret
		
		case 6:
		lcd_string("Sa ");
     544:	8b e7       	ldi	r24, 0x7B	; 123
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	8e de       	rcall	.-740    	; 0x266 <_Z10lcd_stringPKc>
     54a:	08 95       	ret

0000054c <_Z7zeitaush>:
		}

}

void zeitaus(uint8_t pos){
	switch (pos)
     54c:	88 23       	and	r24, r24
     54e:	21 f0       	breq	.+8      	; 0x558 <_Z7zeitaush+0xc>
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	09 f0       	breq	.+2      	; 0x556 <_Z7zeitaush+0xa>
     554:	42 c0       	rjmp	.+132    	; 0x5da <_Z7zeitaush+0x8e>
     556:	1a c0       	rjmp	.+52     	; 0x58c <_Z7zeitaush+0x40>
	{
		case 0:	//keine Sekunden
			itoa( Stunden, Buffer, 10 );
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	6f e4       	ldi	r22, 0x4F	; 79
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	80 91 77 01 	lds	r24, 0x0177
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e da       	rcall	.-3044   	; 0xfffff984 <__eeprom_end+0xff7ef984>
			lcd_string(Buffer);
     568:	8f e4       	ldi	r24, 0x4F	; 79
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	7c de       	rcall	.-776    	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(":");
     56e:	8d ec       	ldi	r24, 0xCD	; 205
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	79 de       	rcall	.-782    	; 0x266 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     574:	4a e0       	ldi	r20, 0x0A	; 10
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	6f e4       	ldi	r22, 0x4F	; 79
     57a:	71 e0       	ldi	r23, 0x01	; 1
     57c:	80 91 78 01 	lds	r24, 0x0178
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	00 da       	rcall	.-3072   	; 0xfffff984 <__eeprom_end+0xff7ef984>
			lcd_string(Buffer);
     584:	8f e4       	ldi	r24, 0x4F	; 79
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	6e de       	rcall	.-804    	; 0x266 <_Z10lcd_stringPKc>
			
			break;
     58a:	08 95       	ret
		
		case 1:	//mit Sekunden
			itoa( Stunden, Buffer, 10 );
     58c:	4a e0       	ldi	r20, 0x0A	; 10
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	6f e4       	ldi	r22, 0x4F	; 79
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	80 91 77 01 	lds	r24, 0x0177
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	f4 d9       	rcall	.-3096   	; 0xfffff984 <__eeprom_end+0xff7ef984>
			lcd_string(Buffer);
     59c:	8f e4       	ldi	r24, 0x4F	; 79
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	62 de       	rcall	.-828    	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(":");
     5a2:	8d ec       	ldi	r24, 0xCD	; 205
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	5f de       	rcall	.-834    	; 0x266 <_Z10lcd_stringPKc>
			itoa( Minuten, Buffer, 10);
     5a8:	4a e0       	ldi	r20, 0x0A	; 10
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	6f e4       	ldi	r22, 0x4F	; 79
     5ae:	71 e0       	ldi	r23, 0x01	; 1
     5b0:	80 91 78 01 	lds	r24, 0x0178
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	e6 d9       	rcall	.-3124   	; 0xfffff984 <__eeprom_end+0xff7ef984>
			lcd_string(Buffer);
     5b8:	8f e4       	ldi	r24, 0x4F	; 79
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	54 de       	rcall	.-856    	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(":");
     5be:	8d ec       	ldi	r24, 0xCD	; 205
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	51 de       	rcall	.-862    	; 0x266 <_Z10lcd_stringPKc>
			itoa(Sekunden, Buffer,10);
     5c4:	4a e0       	ldi	r20, 0x0A	; 10
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	6f e4       	ldi	r22, 0x4F	; 79
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	80 91 79 01 	lds	r24, 0x0179
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	d8 d9       	rcall	.-3152   	; 0xfffff984 <__eeprom_end+0xff7ef984>
			lcd_string(Buffer);
     5d4:	8f e4       	ldi	r24, 0x4F	; 79
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	46 de       	rcall	.-884    	; 0x266 <_Z10lcd_stringPKc>
     5da:	08 95       	ret

000005dc <_Z3aushh>:
		default:
		break;
	}
}

void aus(uint8_t zeile, uint8_t pos){
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	c6 2f       	mov	r28, r22
	
	switch (zeile)
     5e4:	81 30       	cpi	r24, 0x01	; 1
     5e6:	21 f0       	breq	.+8      	; 0x5f0 <_Z3aushh+0x14>
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	09 f0       	breq	.+2      	; 0x5ee <_Z3aushh+0x12>
     5ec:	9d c0       	rjmp	.+314    	; 0x728 <_Z3aushh+0x14c>
     5ee:	71 c0       	rjmp	.+226    	; 0x6d2 <_Z3aushh+0xf6>
	{
		case 1:
			lcd_clear();
     5f0:	e8 dd       	rcall	.-1072   	; 0x1c2 <_Z9lcd_clearv>
			lcd_home();
     5f2:	1e de       	rcall	.-964    	; 0x230 <_Z8lcd_homev>
			switch (pos)
     5f4:	ec 2f       	mov	r30, r28
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e8 30       	cpi	r30, 0x08	; 8
     5fa:	f1 05       	cpc	r31, r1
     5fc:	08 f0       	brcs	.+2      	; 0x600 <_Z3aushh+0x24>
     5fe:	94 c0       	rjmp	.+296    	; 0x728 <_Z3aushh+0x14c>
     600:	ed 5e       	subi	r30, 0xED	; 237
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	09 94       	ijmp
			{
				case 0:
					//Alles ohne Sekunden
					wtag(WochenTag);
     606:	80 91 76 01 	lds	r24, 0x0176
     60a:	77 df       	rcall	.-274    	; 0x4fa <_Z4wtagh>
					lcd_string(" ");
     60c:	8e e9       	ldi	r24, 0x9E	; 158
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	2a de       	rcall	.-940    	; 0x266 <_Z10lcd_stringPKc>
					zeitaus(0);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	9b df       	rcall	.-202    	; 0x54c <_Z7zeitaush>
					
					break;
     616:	88 c0       	rjmp	.+272    	; 0x728 <_Z3aushh+0x14c>
					
				case 1:
					//Alles
					wtag(WochenTag);
     618:	80 91 76 01 	lds	r24, 0x0176
     61c:	6e df       	rcall	.-292    	; 0x4fa <_Z4wtagh>
					lcd_string(" ");
     61e:	8e e9       	ldi	r24, 0x9E	; 158
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	21 de       	rcall	.-958    	; 0x266 <_Z10lcd_stringPKc>
					zeitaus(1);
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	92 df       	rcall	.-220    	; 0x54c <_Z7zeitaush>
					
					break;
     628:	7f c0       	rjmp	.+254    	; 0x728 <_Z3aushh+0x14c>
				case 2:
					//Nur Kalender
					wtag(WochenTag);
     62a:	80 91 76 01 	lds	r24, 0x0176
     62e:	65 df       	rcall	.-310    	; 0x4fa <_Z4wtagh>
					
					break;
     630:	7b c0       	rjmp	.+246    	; 0x728 <_Z3aushh+0x14c>
				case 3:
					//Nur Zeit mit Sekunden mit WDAY
					wtag(WochenTag);
     632:	80 91 76 01 	lds	r24, 0x0176
     636:	61 df       	rcall	.-318    	; 0x4fa <_Z4wtagh>
					zeitaus(1);
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	88 df       	rcall	.-240    	; 0x54c <_Z7zeitaush>
					
					break;
     63c:	75 c0       	rjmp	.+234    	; 0x728 <_Z3aushh+0x14c>
					
				case 4:
					lcd_string("Guten Tag");
     63e:	8f e7       	ldi	r24, 0x7F	; 127
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	11 de       	rcall	.-990    	; 0x266 <_Z10lcd_stringPKc>
					lcd_setcursor(0,2);
     644:	62 e0       	ldi	r22, 0x02	; 2
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	fa dd       	rcall	.-1036   	; 0x23e <_Z13lcd_setcursorhh>
					lcd_string("Version 2.7");
     64a:	89 e8       	ldi	r24, 0x89	; 137
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0b de       	rcall	.-1002   	; 0x266 <_Z10lcd_stringPKc>
					
					break;
     650:	6b c0       	rjmp	.+214    	; 0x728 <_Z3aushh+0x14c>
				
				case 5:
					//Wecker Werktags
					lcd_string("Weckzeit: ");
     652:	85 e9       	ldi	r24, 0x95	; 149
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	07 de       	rcall	.-1010   	; 0x266 <_Z10lcd_stringPKc>
					itoa(WStunden[0],Buffer,10);
     658:	4a e0       	ldi	r20, 0x0A	; 10
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	6f e4       	ldi	r22, 0x4F	; 79
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	80 91 74 01 	lds	r24, 0x0174
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	8e d9       	rcall	.-3300   	; 0xfffff984 <__eeprom_end+0xff7ef984>
					lcd_string(Buffer);
     668:	8f e4       	ldi	r24, 0x4F	; 79
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	fc dd       	rcall	.-1032   	; 0x266 <_Z10lcd_stringPKc>
					lcd_string(":");
     66e:	8d ec       	ldi	r24, 0xCD	; 205
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	f9 dd       	rcall	.-1038   	; 0x266 <_Z10lcd_stringPKc>
					itoa(WMinuten[0],Buffer,10);
     674:	4a e0       	ldi	r20, 0x0A	; 10
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	6f e4       	ldi	r22, 0x4F	; 79
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	80 91 72 01 	lds	r24, 0x0172
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	80 d9       	rcall	.-3328   	; 0xfffff984 <__eeprom_end+0xff7ef984>
					lcd_string(Buffer);
     684:	8f e4       	ldi	r24, 0x4F	; 79
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	ee dd       	rcall	.-1060   	; 0x266 <_Z10lcd_stringPKc>
					
					break;
     68a:	4e c0       	rjmp	.+156    	; 0x728 <_Z3aushh+0x14c>
					
				case 6:
					//Zeit ohne Sekunden mit WDAY
					wtag(WochenTag);
     68c:	80 91 76 01 	lds	r24, 0x0176
     690:	34 df       	rcall	.-408    	; 0x4fa <_Z4wtagh>
					zeitaus(0);
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	5b df       	rcall	.-330    	; 0x54c <_Z7zeitaush>
					
					break;
     696:	48 c0       	rjmp	.+144    	; 0x728 <_Z3aushh+0x14c>
					
				case 7:
					//Wecker Wochenends
					lcd_string("Weckzeit: ");
     698:	85 e9       	ldi	r24, 0x95	; 149
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	e4 dd       	rcall	.-1080   	; 0x266 <_Z10lcd_stringPKc>
					itoa(WStunden[1],Buffer,10);
     69e:	4a e0       	ldi	r20, 0x0A	; 10
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	6f e4       	ldi	r22, 0x4F	; 79
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	80 91 75 01 	lds	r24, 0x0175
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	6b d9       	rcall	.-3370   	; 0xfffff984 <__eeprom_end+0xff7ef984>
					lcd_string(Buffer);
     6ae:	8f e4       	ldi	r24, 0x4F	; 79
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	d9 dd       	rcall	.-1102   	; 0x266 <_Z10lcd_stringPKc>
					lcd_string(":");
     6b4:	8d ec       	ldi	r24, 0xCD	; 205
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	d6 dd       	rcall	.-1108   	; 0x266 <_Z10lcd_stringPKc>
					itoa(WMinuten[1],Buffer,10);
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	6f e4       	ldi	r22, 0x4F	; 79
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	80 91 73 01 	lds	r24, 0x0173
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	5d d9       	rcall	.-3398   	; 0xfffff984 <__eeprom_end+0xff7ef984>
					lcd_string(Buffer);
     6ca:	8f e4       	ldi	r24, 0x4F	; 79
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	cb dd       	rcall	.-1130   	; 0x266 <_Z10lcd_stringPKc>
					
					break;
     6d0:	2b c0       	rjmp	.+86     	; 0x728 <_Z3aushh+0x14c>
			}
			break;
			
		case 2:
			lcd_setcursor(0,2);
     6d2:	62 e0       	ldi	r22, 0x02	; 2
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	b3 dd       	rcall	.-1178   	; 0x23e <_Z13lcd_setcursorhh>
				switch (pos)
     6d8:	c1 30       	cpi	r28, 0x01	; 1
     6da:	31 f5       	brne	.+76     	; 0x728 <_Z3aushh+0x14c>
					
						break;
						
					case 1:
						//Temperatur
						dtostrf(tempera,2,2,Buffer);
     6dc:	60 91 64 01 	lds	r22, 0x0164
     6e0:	70 91 65 01 	lds	r23, 0x0165
     6e4:	80 91 66 01 	lds	r24, 0x0166
     6e8:	90 91 67 01 	lds	r25, 0x0167
     6ec:	0f e4       	ldi	r16, 0x4F	; 79
     6ee:	11 e0       	ldi	r17, 0x01	; 1
     6f0:	22 e0       	ldi	r18, 0x02	; 2
     6f2:	42 e0       	ldi	r20, 0x02	; 2
     6f4:	27 d9       	rcall	.-3506   	; 0xfffff944 <__eeprom_end+0xff7ef944>
						lcd_string(Buffer);
     6f6:	c8 01       	movw	r24, r16
     6f8:	b6 dd       	rcall	.-1172   	; 0x266 <_Z10lcd_stringPKc>
						lcd_data(0b11011111); //°
     6fa:	8f ed       	ldi	r24, 0xDF	; 223
     6fc:	46 dd       	rcall	.-1396   	; 0x18a <_Z8lcd_datah>
						lcd_data(0b01000011); //C
     6fe:	83 e4       	ldi	r24, 0x43	; 67
     700:	44 dd       	rcall	.-1400   	; 0x18a <_Z8lcd_datah>
						
						//Ausgabe, ob der Wecker bzw das Licht an ist
						if (Wan==1)
     702:	80 91 69 01 	lds	r24, 0x0169
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	39 f4       	brne	.+14     	; 0x718 <_Z3aushh+0x13c>
						{
							lcd_setcursor(12,1);
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	8c e0       	ldi	r24, 0x0C	; 12
     70e:	97 dd       	rcall	.-1234   	; 0x23e <_Z13lcd_setcursorhh>
							lcd_string("We");
     710:	80 ea       	ldi	r24, 0xA0	; 160
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	a8 dd       	rcall	.-1200   	; 0x266 <_Z10lcd_stringPKc>
     716:	08 c0       	rjmp	.+16     	; 0x728 <_Z3aushh+0x14c>
						}
						else if (PORTC & (1<<PC5))
     718:	ad 9b       	sbis	0x15, 5	; 21
     71a:	06 c0       	rjmp	.+12     	; 0x728 <_Z3aushh+0x14c>
						{
							lcd_setcursor(12,1);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	8c e0       	ldi	r24, 0x0C	; 12
     720:	8e dd       	rcall	.-1252   	; 0x23e <_Z13lcd_setcursorhh>
							lcd_string("Li");
     722:	83 ea       	ldi	r24, 0xA3	; 163
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	9f dd       	rcall	.-1218   	; 0x266 <_Z10lcd_stringPKc>
						break;
				}
			break;
		}

}
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	08 95       	ret

00000730 <_Z8erhoehenPhhhPKc>:
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	e9 01       	movw	r28, r18

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     736:	82 99       	sbic	0x10, 2	; 16
     738:	31 c0       	rjmp	.+98     	; 0x79c <_Z8erhoehenPhhhPKc+0x6c>
     73a:	ef ef       	ldi	r30, 0xFF	; 255
     73c:	f3 eb       	ldi	r31, 0xB3	; 179
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <_Z8erhoehenPhhhPKc+0xe>
     742:	00 c0       	rjmp	.+0      	; 0x744 <_Z8erhoehenPhhhPKc+0x14>
     744:	00 00       	nop
     746:	ef ef       	ldi	r30, 0xFF	; 255
     748:	f3 e2       	ldi	r31, 0x23	; 35
     74a:	31 97       	sbiw	r30, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <_Z8erhoehenPhhhPKc+0x1a>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <_Z8erhoehenPhhhPKc+0x20>
     750:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     752:	82 9b       	sbis	0x10, 2	; 16
     754:	23 c0       	rjmp	.+70     	; 0x79c <_Z8erhoehenPhhhPKc+0x6c>
     756:	ef ef       	ldi	r30, 0xFF	; 255
     758:	f3 eb       	ldi	r31, 0xB3	; 179
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <_Z8erhoehenPhhhPKc+0x2a>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <_Z8erhoehenPhhhPKc+0x30>
     760:	00 00       	nop
     762:	ef ef       	ldi	r30, 0xFF	; 255
     764:	f3 e2       	ldi	r31, 0x23	; 35
     766:	31 97       	sbiw	r30, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <_Z8erhoehenPhhhPKc+0x36>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <_Z8erhoehenPhhhPKc+0x3c>
     76c:	00 00       	nop
	if(debounce(&PIND,2))
	{
		*var +=1 ;
     76e:	fc 01       	movw	r30, r24
     770:	20 81       	ld	r18, Z
     772:	2f 5f       	subi	r18, 0xFF	; 255
		if(*var>=obergrenze){
     774:	26 17       	cp	r18, r22
     776:	10 f4       	brcc	.+4      	; 0x77c <_Z8erhoehenPhhhPKc+0x4c>
//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
	if(debounce(&PIND,2))
	{
		*var +=1 ;
     778:	20 83       	st	Z, r18
     77a:	02 c0       	rjmp	.+4      	; 0x780 <_Z8erhoehenPhhhPKc+0x50>
		if(*var>=obergrenze){
			*var=0;
     77c:	fc 01       	movw	r30, r24
     77e:	10 82       	st	Z, r1
		}
		aus(1,pos);
     780:	64 2f       	mov	r22, r20
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	2b df       	rcall	.-426    	; 0x5dc <_Z3aushh>
		aus(2,0);
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	28 df       	rcall	.-432    	; 0x5dc <_Z3aushh>
		while( *data != '\0' )
     78c:	88 81       	ld	r24, Y
     78e:	88 23       	and	r24, r24
     790:	29 f0       	breq	.+10     	; 0x79c <_Z8erhoehenPhhhPKc+0x6c>
	
}

//Funktion um eine Variable, die mit Adreesse uebergeben wird zu erhoehen
//erhoeht wird erst, wenn die richtige Taste gedrueckt wird
void erhoehen(uint8_t *var, uint8_t obergrenze, uint8_t pos, const char *data){
     792:	21 96       	adiw	r28, 0x01	; 1
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
		lcd_data( *data++ );
     794:	fa dc       	rcall	.-1548   	; 0x18a <_Z8lcd_datah>
		if(*var>=obergrenze){
			*var=0;
		}
		aus(1,pos);
		aus(2,0);
		while( *data != '\0' )
     796:	89 91       	ld	r24, Y+
     798:	81 11       	cpse	r24, r1
     79a:	fc cf       	rjmp	.-8      	; 0x794 <_Z8erhoehenPhhhPKc+0x64>
		lcd_data( *data++ );
		
	}
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <_Z5einsth>:


//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
	uint8_t temp=0;
	//abfrage was eingestellt werden soll
	switch (posit)
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	09 f4       	brne	.+2      	; 0x7ae <_Z5einsth+0xc>
     7ac:	9e c0       	rjmp	.+316    	; 0x8ea <_Z5einsth+0x148>
     7ae:	30 f4       	brcc	.+12     	; 0x7bc <_Z5einsth+0x1a>
     7b0:	88 23       	and	r24, r24
     7b2:	69 f0       	breq	.+26     	; 0x7ce <_Z5einsth+0x2c>
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	09 f0       	breq	.+2      	; 0x7ba <_Z5einsth+0x18>
     7b8:	f8 c1       	rjmp	.+1008   	; 0xbaa <_Z5einsth+0x408>
     7ba:	71 c0       	rjmp	.+226    	; 0x89e <_Z5einsth+0xfc>
     7bc:	84 30       	cpi	r24, 0x04	; 4
     7be:	09 f4       	brne	.+2      	; 0x7c2 <_Z5einsth+0x20>
     7c0:	e4 c0       	rjmp	.+456    	; 0x98a <_Z5einsth+0x1e8>
     7c2:	08 f4       	brcc	.+2      	; 0x7c6 <_Z5einsth+0x24>
     7c4:	ba c0       	rjmp	.+372    	; 0x93a <_Z5einsth+0x198>
     7c6:	85 30       	cpi	r24, 0x05	; 5
     7c8:	09 f0       	breq	.+2      	; 0x7cc <_Z5einsth+0x2a>
     7ca:	ef c1       	rjmp	.+990    	; 0xbaa <_Z5einsth+0x408>
     7cc:	66 c1       	rjmp	.+716    	; 0xa9a <_Z5einsth+0x2f8>
	{
	case 0:
		//Einstellen Zeit
		//alles einstellen bis auf Sekunden
		//diese werden auf 0 gesetzt
		aus(1,6);
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	04 df       	rcall	.-504    	; 0x5dc <_Z3aushh>
		aus(2,0);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	01 df       	rcall	.-510    	; 0x5dc <_Z3aushh>
		lcd_string(NAME(Stunden));
     7da:	86 ea       	ldi	r24, 0xA6	; 166
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	43 dd       	rcall	.-1402   	; 0x266 <_Z10lcd_stringPKc>

//return 0 fuer kein Problem
//return 1 fuer falsche Eingabe

uint8_t einst(uint8_t posit){
	uint8_t temp=0;
     7e0:	c0 e0       	ldi	r28, 0x00	; 0

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     7e2:	83 99       	sbic	0x10, 3	; 16
     7e4:	34 c0       	rjmp	.+104    	; 0x84e <_Z5einsth+0xac>
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	93 eb       	ldi	r25, 0xB3	; 179
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <_Z5einsth+0x48>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <_Z5einsth+0x4e>
     7f0:	00 00       	nop
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	93 e2       	ldi	r25, 0x23	; 35
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <_Z5einsth+0x54>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_Z5einsth+0x5a>
     7fc:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     7fe:	83 9b       	sbis	0x10, 3	; 16
     800:	26 c0       	rjmp	.+76     	; 0x84e <_Z5einsth+0xac>
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	93 eb       	ldi	r25, 0xB3	; 179
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <_Z5einsth+0x64>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <_Z5einsth+0x6a>
     80c:	00 00       	nop
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	93 e2       	ldi	r25, 0x23	; 35
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <_Z5einsth+0x70>
     816:	00 c0       	rjmp	.+0      	; 0x818 <_Z5einsth+0x76>
     818:	00 00       	nop
		lcd_string(NAME(Stunden));
		while(temp<3)
		{
			if(debounce(&PIND,3))
			{
				temp++;
     81a:	cf 5f       	subi	r28, 0xFF	; 255
				lcd_clear();
     81c:	d2 dc       	rcall	.-1628   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,6);
     81e:	66 e0       	ldi	r22, 0x06	; 6
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	dc de       	rcall	.-584    	; 0x5dc <_Z3aushh>
				aus(2,0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	d9 de       	rcall	.-590    	; 0x5dc <_Z3aushh>
				switch (temp)
     82a:	c1 30       	cpi	r28, 0x01	; 1
     82c:	41 f0       	breq	.+16     	; 0x83e <_Z5einsth+0x9c>
     82e:	18 f0       	brcs	.+6      	; 0x836 <_Z5einsth+0x94>
     830:	c2 30       	cpi	r28, 0x02	; 2
     832:	69 f4       	brne	.+26     	; 0x84e <_Z5einsth+0xac>
     834:	08 c0       	rjmp	.+16     	; 0x846 <_Z5einsth+0xa4>
				{
					case 0:
						lcd_string(NAME(Stunden));
     836:	86 ea       	ldi	r24, 0xA6	; 166
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	15 dd       	rcall	.-1494   	; 0x266 <_Z10lcd_stringPKc>
     83c:	0e c0       	rjmp	.+28     	; 0x85a <_Z5einsth+0xb8>
						break;
					case 1:
						lcd_string(NAME(Minuten));
     83e:	8e ea       	ldi	r24, 0xAE	; 174
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	11 dd       	rcall	.-1502   	; 0x266 <_Z10lcd_stringPKc>
     844:	13 c0       	rjmp	.+38     	; 0x86c <_Z5einsth+0xca>
						break;
					case 2:
						lcd_string(NAME(WochenTag));
     846:	86 eb       	ldi	r24, 0xB6	; 182
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0d dd       	rcall	.-1510   	; 0x266 <_Z10lcd_stringPKc>
     84c:	18 c0       	rjmp	.+48     	; 0x87e <_Z5einsth+0xdc>
				zeit();
				//ausgabe(0);
				//Es muss eine richtge Ausgabe speziell fuer dieses Einstellung geschrieben werden
				//besonders wichtig ist, dass die alte Ausgaba ersetzt werden muss
			}*/
			switch (temp)
     84e:	c1 30       	cpi	r28, 0x01	; 1
     850:	69 f0       	breq	.+26     	; 0x86c <_Z5einsth+0xca>
     852:	18 f0       	brcs	.+6      	; 0x85a <_Z5einsth+0xb8>
     854:	c2 30       	cpi	r28, 0x02	; 2
     856:	e1 f4       	brne	.+56     	; 0x890 <_Z5einsth+0xee>
     858:	12 c0       	rjmp	.+36     	; 0x87e <_Z5einsth+0xdc>
			{
			case 0:
				erhoehen(&Stunden,60,6,NAME(Stunden));
     85a:	26 ea       	ldi	r18, 0xA6	; 166
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	46 e0       	ldi	r20, 0x06	; 6
     860:	6c e3       	ldi	r22, 0x3C	; 60
     862:	87 e7       	ldi	r24, 0x77	; 119
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	64 df       	rcall	.-312    	; 0x730 <_Z8erhoehenPhhhPKc>
				break;
     868:	c0 e0       	ldi	r28, 0x00	; 0
     86a:	bb cf       	rjmp	.-138    	; 0x7e2 <_Z5einsth+0x40>
			case 1:
				erhoehen(&Minuten,60,6,NAME(Minuten));
     86c:	2e ea       	ldi	r18, 0xAE	; 174
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	46 e0       	ldi	r20, 0x06	; 6
     872:	6c e3       	ldi	r22, 0x3C	; 60
     874:	88 e7       	ldi	r24, 0x78	; 120
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	5b df       	rcall	.-330    	; 0x730 <_Z8erhoehenPhhhPKc>
				break;
     87a:	c1 e0       	ldi	r28, 0x01	; 1
     87c:	b2 cf       	rjmp	.-156    	; 0x7e2 <_Z5einsth+0x40>
			case 2:
				//nur jetzt WochenTag
				erhoehen(&WochenTag,7,6,NAME(WochenTag));
     87e:	26 eb       	ldi	r18, 0xB6	; 182
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	46 e0       	ldi	r20, 0x06	; 6
     884:	67 e0       	ldi	r22, 0x07	; 7
     886:	86 e7       	ldi	r24, 0x76	; 118
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	52 df       	rcall	.-348    	; 0x730 <_Z8erhoehenPhhhPKc>
				break;
     88c:	c2 e0       	ldi	r28, 0x02	; 2
     88e:	a9 cf       	rjmp	.-174    	; 0x7e2 <_Z5einsth+0x40>
		//alles einstellen bis auf Sekunden
		//diese werden auf 0 gesetzt
		aus(1,6);
		aus(2,0);
		lcd_string(NAME(Stunden));
		while(temp<3)
     890:	c3 30       	cpi	r28, 0x03	; 3
     892:	08 f4       	brcc	.+2      	; 0x896 <_Z5einsth+0xf4>
     894:	a6 cf       	rjmp	.-180    	; 0x7e2 <_Z5einsth+0x40>
				break;
			default:
				break;
			}
		}
		Sekunden=0;
     896:	10 92 79 01 	sts	0x0179, r1
		return 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	87 c1       	rjmp	.+782    	; 0xbac <_Z5einsth+0x40a>
	case 1:
		//Einstellen der Lampenstärke
		//default=3
		temp = 0;
		
		if(Sekunden!=sektemp){
     89e:	90 91 79 01 	lds	r25, 0x0179
     8a2:	80 91 68 01 	lds	r24, 0x0168
     8a6:	98 13       	cpse	r25, r24
			zeit();
     8a8:	f1 dd       	rcall	.-1054   	; 0x48c <_Z4zeitv>
		}
		lampenstaerke++;
     8aa:	80 91 61 00 	lds	r24, 0x0061
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
		if (lampenstaerke>3)
     8b0:	84 30       	cpi	r24, 0x04	; 4
     8b2:	18 f4       	brcc	.+6      	; 0x8ba <_Z5einsth+0x118>
		temp = 0;
		
		if(Sekunden!=sektemp){
			zeit();
		}
		lampenstaerke++;
     8b4:	80 93 61 00 	sts	0x0061, r24
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <_Z5einsth+0x11e>
		if (lampenstaerke>3)
		{
			lampenstaerke=1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 61 00 	sts	0x0061, r24
		}
		lcd_clear();
     8c0:	80 dc       	rcall	.-1792   	; 0x1c2 <_Z9lcd_clearv>
		lcd_home();
     8c2:	b6 dc       	rcall	.-1684   	; 0x230 <_Z8lcd_homev>
		lcd_string("Lampenstaerke:");
     8c4:	80 ec       	ldi	r24, 0xC0	; 192
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	ce dc       	rcall	.-1636   	; 0x266 <_Z10lcd_stringPKc>
		aus(2,0);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	86 de       	rcall	.-756    	; 0x5dc <_Z3aushh>
		itoa(lampenstaerke,Buffer,10);
     8d0:	4a e0       	ldi	r20, 0x0A	; 10
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	6f e4       	ldi	r22, 0x4F	; 79
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	80 91 61 00 	lds	r24, 0x0061
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	52 d8       	rcall	.-3932   	; 0xfffff984 <__eeprom_end+0xff7ef984>
		lcd_string(Buffer);
     8e0:	8f e4       	ldi	r24, 0x4F	; 79
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	c0 dc       	rcall	.-1664   	; 0x266 <_Z10lcd_stringPKc>
		
		return 0;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	61 c1       	rjmp	.+706    	; 0xbac <_Z5einsth+0x40a>
		break;
	case 2:
		//Einstellen Sekundenoffset
		//default =0

		if(Sekunden!=sektemp){
     8ea:	90 91 79 01 	lds	r25, 0x0179
     8ee:	80 91 68 01 	lds	r24, 0x0168
     8f2:	98 13       	cpse	r25, r24
			zeit();
     8f4:	cb dd       	rcall	.-1130   	; 0x48c <_Z4zeitv>
		}
		sekoffset++;
     8f6:	80 91 63 01 	lds	r24, 0x0163
     8fa:	8f 5f       	subi	r24, 0xFF	; 255
		if (sekoffset>5)
     8fc:	86 30       	cpi	r24, 0x06	; 6
     8fe:	1c f4       	brge	.+6      	; 0x906 <_Z5einsth+0x164>
		//default =0

		if(Sekunden!=sektemp){
			zeit();
		}
		sekoffset++;
     900:	80 93 63 01 	sts	0x0163, r24
     904:	03 c0       	rjmp	.+6      	; 0x90c <_Z5einsth+0x16a>
		if (sekoffset>5)
		{
			sekoffset=-5;
     906:	8b ef       	ldi	r24, 0xFB	; 251
     908:	80 93 63 01 	sts	0x0163, r24
		}
		lcd_clear();
     90c:	5a dc       	rcall	.-1868   	; 0x1c2 <_Z9lcd_clearv>
		lcd_home();
     90e:	90 dc       	rcall	.-1760   	; 0x230 <_Z8lcd_homev>
		lcd_string("Sekundenoffset:");
     910:	8f ec       	ldi	r24, 0xCF	; 207
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a8 dc       	rcall	.-1712   	; 0x266 <_Z10lcd_stringPKc>
		aus(2,0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	60 de       	rcall	.-832    	; 0x5dc <_Z3aushh>
		itoa(sekoffset,Buffer,10);
     91c:	80 91 63 01 	lds	r24, 0x0163
     920:	4a e0       	ldi	r20, 0x0A	; 10
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	6f e4       	ldi	r22, 0x4F	; 79
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	99 27       	eor	r25, r25
     92a:	87 fd       	sbrc	r24, 7
     92c:	90 95       	com	r25
     92e:	2a d8       	rcall	.-4012   	; 0xfffff984 <__eeprom_end+0xff7ef984>
		lcd_string(Buffer);
     930:	8f e4       	ldi	r24, 0x4F	; 79
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	98 dc       	rcall	.-1744   	; 0x266 <_Z10lcd_stringPKc>
		
		return 0;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	39 c1       	rjmp	.+626    	; 0xbac <_Z5einsth+0x40a>
		break;
	case 3:
		//Einstellen Temperaturoffset
		//default = 0;
		
		if(Sekunden!=sektemp){
     93a:	90 91 79 01 	lds	r25, 0x0179
     93e:	80 91 68 01 	lds	r24, 0x0168
     942:	98 13       	cpse	r25, r24
			zeit();
     944:	a3 dd       	rcall	.-1210   	; 0x48c <_Z4zeitv>
		}
			tempoffset++;
     946:	80 91 62 00 	lds	r24, 0x0062
     94a:	8f 5f       	subi	r24, 0xFF	; 255
			if (tempoffset>10)
     94c:	8b 30       	cpi	r24, 0x0B	; 11
     94e:	1c f4       	brge	.+6      	; 0x956 <_Z5einsth+0x1b4>
		//default = 0;
		
		if(Sekunden!=sektemp){
			zeit();
		}
			tempoffset++;
     950:	80 93 62 00 	sts	0x0062, r24
     954:	03 c0       	rjmp	.+6      	; 0x95c <_Z5einsth+0x1ba>
			if (tempoffset>10)
			{
				tempoffset=-10;
     956:	86 ef       	ldi	r24, 0xF6	; 246
     958:	80 93 62 00 	sts	0x0062, r24
			}
			lcd_clear();
     95c:	32 dc       	rcall	.-1948   	; 0x1c2 <_Z9lcd_clearv>
			lcd_home();
     95e:	68 dc       	rcall	.-1840   	; 0x230 <_Z8lcd_homev>
			lcd_string("Temperaturoffset:");
     960:	8f ed       	ldi	r24, 0xDF	; 223
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	80 dc       	rcall	.-1792   	; 0x266 <_Z10lcd_stringPKc>
			aus(2,0);
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	38 de       	rcall	.-912    	; 0x5dc <_Z3aushh>
			itoa(tempoffset,Buffer,10);
     96c:	80 91 62 00 	lds	r24, 0x0062
     970:	4a e0       	ldi	r20, 0x0A	; 10
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	6f e4       	ldi	r22, 0x4F	; 79
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	99 27       	eor	r25, r25
     97a:	87 fd       	sbrc	r24, 7
     97c:	90 95       	com	r25
     97e:	02 d8       	rcall	.-4092   	; 0xfffff984 <__eeprom_end+0xff7ef984>
			lcd_string(Buffer);
     980:	8f e4       	ldi	r24, 0x4F	; 79
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	70 dc       	rcall	.-1824   	; 0x266 <_Z10lcd_stringPKc>
								
		return 0;
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	11 c1       	rjmp	.+546    	; 0xbac <_Z5einsth+0x40a>
		break;
	case 4: //Wecker einstellen
		temp = 0;
		aus(1,5);
     98a:	65 e0       	ldi	r22, 0x05	; 5
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	26 de       	rcall	.-948    	; 0x5dc <_Z3aushh>
		aus(2,0);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	23 de       	rcall	.-954    	; 0x5dc <_Z3aushh>
		lcd_string(NAME(WStunden[0]));
     996:	81 ef       	ldi	r24, 0xF1	; 241
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	65 dc       	rcall	.-1846   	; 0x266 <_Z10lcd_stringPKc>
			lcd_string(Buffer);
								
		return 0;
		break;
	case 4: //Wecker einstellen
		temp = 0;
     99c:	c0 e0       	ldi	r28, 0x00	; 0
				case 0:
					erhoehen(&WStunden[0],24,5,NAME(WStunden[0]));
					break;
				case 1:
					erhoehen(&WMinuten[0],60,5,NAME(WMinuten[0]));
					break;
     99e:	11 e0       	ldi	r17, 0x01	; 1
			}
			switch (temp)
			{
				case 0:
					erhoehen(&WStunden[0],24,5,NAME(WStunden[0]));
					break;
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
		aus(1,5);
		aus(2,0);
		lcd_string(NAME(WStunden[0]));
		while (temp<2)
		{
			if (Sekunden!=sektemp)
     9a2:	20 91 79 01 	lds	r18, 0x0179
     9a6:	90 91 68 01 	lds	r25, 0x0168
     9aa:	29 13       	cpse	r18, r25
			{
				zeit();
     9ac:	6f dd       	rcall	.-1314   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     9ae:	83 99       	sbic	0x10, 3	; 16
     9b0:	2e c0       	rjmp	.+92     	; 0xa0e <_Z5einsth+0x26c>
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	93 eb       	ldi	r25, 0xB3	; 179
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <_Z5einsth+0x214>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <_Z5einsth+0x21a>
     9bc:	00 00       	nop
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	93 e2       	ldi	r25, 0x23	; 35
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <_Z5einsth+0x220>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <_Z5einsth+0x226>
     9c8:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     9ca:	83 9b       	sbis	0x10, 3	; 16
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <_Z5einsth+0x26c>
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	93 eb       	ldi	r25, 0xB3	; 179
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <_Z5einsth+0x230>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <_Z5einsth+0x236>
     9d8:	00 00       	nop
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	93 e2       	ldi	r25, 0x23	; 35
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <_Z5einsth+0x23c>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <_Z5einsth+0x242>
     9e4:	00 00       	nop
			}
			if(debounce(&PIND,3))
			{
				temp++;
     9e6:	cf 5f       	subi	r28, 0xFF	; 255
				aus(1,5);
     9e8:	65 e0       	ldi	r22, 0x05	; 5
     9ea:	81 2f       	mov	r24, r17
     9ec:	f7 dd       	rcall	.-1042   	; 0x5dc <_Z3aushh>
				aus(2,0);
     9ee:	6d 2f       	mov	r22, r29
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	f4 dd       	rcall	.-1048   	; 0x5dc <_Z3aushh>
				switch (temp)
     9f4:	cc 23       	and	r28, r28
     9f6:	19 f0       	breq	.+6      	; 0x9fe <_Z5einsth+0x25c>
     9f8:	c1 30       	cpi	r28, 0x01	; 1
     9fa:	49 f4       	brne	.+18     	; 0xa0e <_Z5einsth+0x26c>
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <_Z5einsth+0x264>
				{
					case 0:
						lcd_string(NAME(WStunden[0]));
     9fe:	81 ef       	ldi	r24, 0xF1	; 241
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	31 dc       	rcall	.-1950   	; 0x266 <_Z10lcd_stringPKc>
     a04:	09 c0       	rjmp	.+18     	; 0xa18 <_Z5einsth+0x276>
						break;
					case 1:
						lcd_string(NAME(WMinuten[0]));
     a06:	8d ef       	ldi	r24, 0xFD	; 253
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	2d dc       	rcall	.-1958   	; 0x266 <_Z10lcd_stringPKc>
     a0c:	0e c0       	rjmp	.+28     	; 0xa2a <_Z5einsth+0x288>
						break;
					default:
						break;
				}
			}
			switch (temp)
     a0e:	cc 23       	and	r28, r28
     a10:	19 f0       	breq	.+6      	; 0xa18 <_Z5einsth+0x276>
     a12:	c1 30       	cpi	r28, 0x01	; 1
     a14:	99 f4       	brne	.+38     	; 0xa3c <_Z5einsth+0x29a>
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <_Z5einsth+0x288>
			{
				case 0:
					erhoehen(&WStunden[0],24,5,NAME(WStunden[0]));
     a18:	21 ef       	ldi	r18, 0xF1	; 241
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	45 e0       	ldi	r20, 0x05	; 5
     a1e:	68 e1       	ldi	r22, 0x18	; 24
     a20:	84 e7       	ldi	r24, 0x74	; 116
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	85 de       	rcall	.-758    	; 0x730 <_Z8erhoehenPhhhPKc>
					break;
     a26:	cd 2f       	mov	r28, r29
     a28:	bc cf       	rjmp	.-136    	; 0x9a2 <_Z5einsth+0x200>
				case 1:
					erhoehen(&WMinuten[0],60,5,NAME(WMinuten[0]));
     a2a:	2d ef       	ldi	r18, 0xFD	; 253
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	45 e0       	ldi	r20, 0x05	; 5
     a30:	6c e3       	ldi	r22, 0x3C	; 60
     a32:	82 e7       	ldi	r24, 0x72	; 114
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	7c de       	rcall	.-776    	; 0x730 <_Z8erhoehenPhhhPKc>
					break;
     a38:	c1 2f       	mov	r28, r17
     a3a:	b3 cf       	rjmp	.-154    	; 0x9a2 <_Z5einsth+0x200>
	case 4: //Wecker einstellen
		temp = 0;
		aus(1,5);
		aus(2,0);
		lcd_string(NAME(WStunden[0]));
		while (temp<2)
     a3c:	c2 30       	cpi	r28, 0x02	; 2
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <_Z5einsth+0x2a0>
     a40:	b0 cf       	rjmp	.-160    	; 0x9a2 <_Z5einsth+0x200>
					erhoehen(&WMinuten[0],60,5,NAME(WMinuten[0]));
					break;
			}
			
		}
		Licht1a[0]=WMinuten[0]-10;
     a42:	40 91 72 01 	lds	r20, 0x0172
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	ca 01       	movw	r24, r20
     a4a:	0a 97       	sbiw	r24, 0x0a	; 10
     a4c:	90 93 6f 01 	sts	0x016F, r25
     a50:	80 93 6e 01 	sts	0x016E, r24
		Licht1a[1]=WStunden[0];
     a54:	20 91 74 01 	lds	r18, 0x0174
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	30 93 71 01 	sts	0x0171, r19
     a5e:	20 93 70 01 	sts	0x0170, r18
		if (Licht1a[0]>59)
     a62:	cc 97       	sbiw	r24, 0x3c	; 60
     a64:	b4 f0       	brlt	.+44     	; 0xa92 <_Z5einsth+0x2f0>
		{
			Licht1a[0]+=60;
     a66:	4e 5c       	subi	r20, 0xCE	; 206
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	50 93 6f 01 	sts	0x016F, r21
     a6e:	40 93 6e 01 	sts	0x016E, r20
			Licht1a[1]-=1;
     a72:	c9 01       	movw	r24, r18
     a74:	01 97       	sbiw	r24, 0x01	; 1
			if (Licht1a[1]>23)
     a76:	88 31       	cpi	r24, 0x18	; 24
     a78:	91 05       	cpc	r25, r1
     a7a:	2c f4       	brge	.+10     	; 0xa86 <_Z5einsth+0x2e4>
		Licht1a[0]=WMinuten[0]-10;
		Licht1a[1]=WStunden[0];
		if (Licht1a[0]>59)
		{
			Licht1a[0]+=60;
			Licht1a[1]-=1;
     a7c:	90 93 71 01 	sts	0x0171, r25
     a80:	80 93 70 01 	sts	0x0170, r24
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <_Z5einsth+0x2f0>
			if (Licht1a[1]>23)
			{
				Licht1a[1]+=24;
     a86:	29 5e       	subi	r18, 0xE9	; 233
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	30 93 71 01 	sts	0x0171, r19
     a8e:	20 93 70 01 	sts	0x0170, r18
			}
		}
		Wan=0;
     a92:	10 92 69 01 	sts	0x0169, r1
		return 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	89 c0       	rjmp	.+274    	; 0xbac <_Z5einsth+0x40a>
		break;

	case 5:
		temp = 0;
		aus(1,7);
     a9a:	67 e0       	ldi	r22, 0x07	; 7
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	9e dd       	rcall	.-1220   	; 0x5dc <_Z3aushh>
		aus(2,0);
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	9b dd       	rcall	.-1226   	; 0x5dc <_Z3aushh>
		lcd_string(NAME(WStunden[1]));
     aa6:	89 e0       	ldi	r24, 0x09	; 9
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	dd db       	rcall	.-2118   	; 0x266 <_Z10lcd_stringPKc>
		Wan=0;
		return 0;
		break;

	case 5:
		temp = 0;
     aac:	c0 e0       	ldi	r28, 0x00	; 0
				case 0:
				erhoehen(&WStunden[1],24,7,NAME(WStunden[1]));
				break;
				case 1:
				erhoehen(&WMinuten[1],60,7,NAME(WMinuten[1]));
				break;
     aae:	11 e0       	ldi	r17, 0x01	; 1
			}
			switch (temp)
			{
				case 0:
				erhoehen(&WStunden[1],24,7,NAME(WStunden[1]));
				break;
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
		aus(1,7);
		aus(2,0);
		lcd_string(NAME(WStunden[1]));
		while (temp<2)
		{
			if (Sekunden!=sektemp)
     ab2:	20 91 79 01 	lds	r18, 0x0179
     ab6:	90 91 68 01 	lds	r25, 0x0168
     aba:	29 13       	cpse	r18, r25
			{
				zeit();
     abc:	e7 dc       	rcall	.-1586   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     abe:	83 99       	sbic	0x10, 3	; 16
     ac0:	2e c0       	rjmp	.+92     	; 0xb1e <_Z5einsth+0x37c>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	93 eb       	ldi	r25, 0xB3	; 179
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <_Z5einsth+0x324>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <_Z5einsth+0x32a>
     acc:	00 00       	nop
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	93 e2       	ldi	r25, 0x23	; 35
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <_Z5einsth+0x330>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <_Z5einsth+0x336>
     ad8:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     ada:	83 9b       	sbis	0x10, 3	; 16
     adc:	20 c0       	rjmp	.+64     	; 0xb1e <_Z5einsth+0x37c>
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	93 eb       	ldi	r25, 0xB3	; 179
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <_Z5einsth+0x340>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <_Z5einsth+0x346>
     ae8:	00 00       	nop
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	93 e2       	ldi	r25, 0x23	; 35
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <_Z5einsth+0x34c>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <_Z5einsth+0x352>
     af4:	00 00       	nop
			}
			if(debounce(&PIND,3))
			{
				temp++;
     af6:	cf 5f       	subi	r28, 0xFF	; 255
				aus(1,7);
     af8:	67 e0       	ldi	r22, 0x07	; 7
     afa:	81 2f       	mov	r24, r17
     afc:	6f dd       	rcall	.-1314   	; 0x5dc <_Z3aushh>
				aus(2,0);
     afe:	6d 2f       	mov	r22, r29
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	6c dd       	rcall	.-1320   	; 0x5dc <_Z3aushh>
				switch (temp)
     b04:	cc 23       	and	r28, r28
     b06:	19 f0       	breq	.+6      	; 0xb0e <_Z5einsth+0x36c>
     b08:	c1 30       	cpi	r28, 0x01	; 1
     b0a:	49 f4       	brne	.+18     	; 0xb1e <_Z5einsth+0x37c>
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <_Z5einsth+0x374>
				{
					case 0:
					lcd_string(NAME(WStunden[1]));
     b0e:	89 e0       	ldi	r24, 0x09	; 9
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	a9 db       	rcall	.-2222   	; 0x266 <_Z10lcd_stringPKc>
     b14:	09 c0       	rjmp	.+18     	; 0xb28 <_Z5einsth+0x386>
					break;
					case 1:
					lcd_string(NAME(WMinuten[1]));
     b16:	85 e1       	ldi	r24, 0x15	; 21
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	a5 db       	rcall	.-2230   	; 0x266 <_Z10lcd_stringPKc>
     b1c:	0e c0       	rjmp	.+28     	; 0xb3a <_Z5einsth+0x398>
					break;
					default:
					break;
				}
			}
			switch (temp)
     b1e:	cc 23       	and	r28, r28
     b20:	19 f0       	breq	.+6      	; 0xb28 <_Z5einsth+0x386>
     b22:	c1 30       	cpi	r28, 0x01	; 1
     b24:	99 f4       	brne	.+38     	; 0xb4c <_Z5einsth+0x3aa>
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <_Z5einsth+0x398>
			{
				case 0:
				erhoehen(&WStunden[1],24,7,NAME(WStunden[1]));
     b28:	29 e0       	ldi	r18, 0x09	; 9
     b2a:	31 e0       	ldi	r19, 0x01	; 1
     b2c:	47 e0       	ldi	r20, 0x07	; 7
     b2e:	68 e1       	ldi	r22, 0x18	; 24
     b30:	85 e7       	ldi	r24, 0x75	; 117
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	fd dd       	rcall	.-1030   	; 0x730 <_Z8erhoehenPhhhPKc>
				break;
     b36:	cd 2f       	mov	r28, r29
     b38:	bc cf       	rjmp	.-136    	; 0xab2 <_Z5einsth+0x310>
				case 1:
				erhoehen(&WMinuten[1],60,7,NAME(WMinuten[1]));
     b3a:	25 e1       	ldi	r18, 0x15	; 21
     b3c:	31 e0       	ldi	r19, 0x01	; 1
     b3e:	47 e0       	ldi	r20, 0x07	; 7
     b40:	6c e3       	ldi	r22, 0x3C	; 60
     b42:	83 e7       	ldi	r24, 0x73	; 115
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	f4 dd       	rcall	.-1048   	; 0x730 <_Z8erhoehenPhhhPKc>
				break;
     b48:	c1 2f       	mov	r28, r17
     b4a:	b3 cf       	rjmp	.-154    	; 0xab2 <_Z5einsth+0x310>
	case 5:
		temp = 0;
		aus(1,7);
		aus(2,0);
		lcd_string(NAME(WStunden[1]));
		while (temp<2)
     b4c:	c2 30       	cpi	r28, 0x02	; 2
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <_Z5einsth+0x3b0>
     b50:	b0 cf       	rjmp	.-160    	; 0xab2 <_Z5einsth+0x310>
				erhoehen(&WMinuten[1],60,7,NAME(WMinuten[1]));
				break;
			}
			
		}
		Licht1b[0]=WMinuten[1]-10;
     b52:	40 91 73 01 	lds	r20, 0x0173
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	ca 01       	movw	r24, r20
     b5a:	0a 97       	sbiw	r24, 0x0a	; 10
     b5c:	90 93 6b 01 	sts	0x016B, r25
     b60:	80 93 6a 01 	sts	0x016A, r24
		Licht1b[1]=WStunden[1];
     b64:	20 91 75 01 	lds	r18, 0x0175
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	30 93 6d 01 	sts	0x016D, r19
     b6e:	20 93 6c 01 	sts	0x016C, r18
		if (Licht1b[0]>59)
     b72:	cc 97       	sbiw	r24, 0x3c	; 60
     b74:	b4 f0       	brlt	.+44     	; 0xba2 <_Z5einsth+0x400>
		{
			Licht1b[0]+=60;
     b76:	4e 5c       	subi	r20, 0xCE	; 206
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	50 93 6b 01 	sts	0x016B, r21
     b7e:	40 93 6a 01 	sts	0x016A, r20
			Licht1b[1]-=1;
     b82:	c9 01       	movw	r24, r18
     b84:	01 97       	sbiw	r24, 0x01	; 1
			if (Licht1b[1]>23)
     b86:	88 31       	cpi	r24, 0x18	; 24
     b88:	91 05       	cpc	r25, r1
     b8a:	2c f4       	brge	.+10     	; 0xb96 <_Z5einsth+0x3f4>
		Licht1b[0]=WMinuten[1]-10;
		Licht1b[1]=WStunden[1];
		if (Licht1b[0]>59)
		{
			Licht1b[0]+=60;
			Licht1b[1]-=1;
     b8c:	90 93 6d 01 	sts	0x016D, r25
     b90:	80 93 6c 01 	sts	0x016C, r24
     b94:	06 c0       	rjmp	.+12     	; 0xba2 <_Z5einsth+0x400>
			if (Licht1b[1]>23)
			{
				Licht1b[1]+=24;
     b96:	29 5e       	subi	r18, 0xE9	; 233
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	30 93 6d 01 	sts	0x016D, r19
     b9e:	20 93 6c 01 	sts	0x016C, r18
			}
		}
		Wan=0;
     ba2:	10 92 69 01 	sts	0x0169, r1
		return 0;
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <_Z5einsth+0x40a>
		break;

	default:
		return 1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	08 95       	ret

00000bb4 <_Z10zeitsetzenv>:

#ifndef EINSTELLUNGEN_H_
#define EINSTELLUNGEN_H_

void zeitsetzen(){
	Minuten = 34;
     bb4:	82 e2       	ldi	r24, 0x22	; 34
     bb6:	80 93 78 01 	sts	0x0178, r24
	Stunden	= 5;
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	80 93 77 01 	sts	0x0177, r24
	Sekunden = 0;
     bc0:	10 92 79 01 	sts	0x0179, r1
	WochenTag=6;
     bc4:	96 e0       	ldi	r25, 0x06	; 6
     bc6:	90 93 76 01 	sts	0x0176, r25
	WStunden[0]=5;
     bca:	80 93 74 01 	sts	0x0174, r24
	WMinuten[0]=45;
     bce:	8d e2       	ldi	r24, 0x2D	; 45
     bd0:	80 93 72 01 	sts	0x0172, r24
	WStunden[1]=7;
     bd4:	97 e0       	ldi	r25, 0x07	; 7
     bd6:	90 93 75 01 	sts	0x0175, r25
	WMinuten[1]=45;
     bda:	80 93 73 01 	sts	0x0173, r24
	einst(4);
     bde:	84 e0       	ldi	r24, 0x04	; 4
     be0:	e0 dd       	rcall	.-1088   	; 0x7a2 <_Z5einsth>
	einst(0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	de dd       	rcall	.-1092   	; 0x7a2 <_Z5einsth>
	sekoffset=1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 63 01 	sts	0x0163, r24
     bec:	08 95       	ret

00000bee <_Z4menuv>:


#ifndef MENUE_H_
#define MENUE_H_

uint8_t menu(){
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
	uint8_t posit = 0;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
						temperatur();
						return 1;
					}
				}
				temperatur();
				posit++;
     bf4:	d6 e0       	ldi	r29, 0x06	; 6
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     bf6:	c7 e0       	ldi	r28, 0x07	; 7

uint8_t menu(){
	uint8_t posit = 0;
	while (true)
	{
		switch (posit)
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	09 f4       	brne	.+2      	; 0xbfe <_Z4menuv+0x10>
     bfc:	4c c1       	rjmp	.+664    	; 0xe96 <_Z4menuv+0x2a8>
     bfe:	30 f4       	brcc	.+12     	; 0xc0c <_Z4menuv+0x1e>
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	09 f4       	brne	.+2      	; 0xc06 <_Z4menuv+0x18>
     c04:	73 c0       	rjmp	.+230    	; 0xcec <_Z4menuv+0xfe>
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	49 f4       	brne	.+18     	; 0xc1c <_Z4menuv+0x2e>
     c0a:	d8 c0       	rjmp	.+432    	; 0xdbc <_Z4menuv+0x1ce>
     c0c:	85 30       	cpi	r24, 0x05	; 5
     c0e:	09 f4       	brne	.+2      	; 0xc12 <_Z4menuv+0x24>
     c10:	1a c2       	rjmp	.+1076   	; 0x1046 <_Z4menuv+0x458>
     c12:	08 f4       	brcc	.+2      	; 0xc16 <_Z4menuv+0x28>
     c14:	a8 c1       	rjmp	.+848    	; 0xf66 <_Z4menuv+0x378>
     c16:	86 30       	cpi	r24, 0x06	; 6
     c18:	09 f4       	brne	.+2      	; 0xc1c <_Z4menuv+0x2e>
     c1a:	87 c2       	rjmp	.+1294   	; 0x112a <_Z4menuv+0x53c>
		{
			case 0:
				//Weckzeit anzeigen und einstellen mit PD2
				lcd_clear();
     c1c:	d2 da       	rcall	.-2652   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,5);
     c1e:	65 e0       	ldi	r22, 0x05	; 5
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	dc dc       	rcall	.-1608   	; 0x5dc <_Z3aushh>
				aus(2,0);
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	d9 dc       	rcall	.-1614   	; 0x5dc <_Z3aushh>
				lcd_string("Werktags");
     c2a:	81 e2       	ldi	r24, 0x21	; 33
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	1b db       	rcall	.-2506   	; 0x266 <_Z10lcd_stringPKc>
				posit = posit + 1;
				while(!debounce(&PIND,PD3))
     c30:	3f c0       	rjmp	.+126    	; 0xcb0 <_Z4menuv+0xc2>
				{
					//Zeitabfrage mit einbauen
					if(Sekunden!=sektemp){
						zeit();
     c32:	2c dc       	rcall	.-1960   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     c34:	82 99       	sbic	0x10, 2	; 16
     c36:	1f c0       	rjmp	.+62     	; 0xc76 <_Z4menuv+0x88>
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	93 eb       	ldi	r25, 0xB3	; 179
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <_Z4menuv+0x4e>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <_Z4menuv+0x54>
     c42:	00 00       	nop
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	93 e2       	ldi	r25, 0x23	; 35
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <_Z4menuv+0x5a>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <_Z4menuv+0x60>
     c4e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     c50:	82 9b       	sbis	0x10, 2	; 16
     c52:	11 c0       	rjmp	.+34     	; 0xc76 <_Z4menuv+0x88>
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	93 eb       	ldi	r25, 0xB3	; 179
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <_Z4menuv+0x6a>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <_Z4menuv+0x70>
     c5e:	00 00       	nop
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	93 e2       	ldi	r25, 0x23	; 35
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <_Z4menuv+0x76>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <_Z4menuv+0x7c>
     c6a:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(4);
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	99 dd       	rcall	.-1230   	; 0x7a2 <_Z5einsth>
						lcd_string("Werktags");
     c70:	81 e2       	ldi	r24, 0x21	; 33
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	f8 da       	rcall	.-2576   	; 0x266 <_Z10lcd_stringPKc>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     c76:	84 99       	sbic	0x10, 4	; 16
     c78:	1b c0       	rjmp	.+54     	; 0xcb0 <_Z4menuv+0xc2>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	93 eb       	ldi	r25, 0xB3	; 179
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <_Z4menuv+0x90>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <_Z4menuv+0x96>
     c84:	00 00       	nop
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	93 e2       	ldi	r25, 0x23	; 35
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <_Z4menuv+0x9c>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <_Z4menuv+0xa2>
     c90:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     c92:	84 9b       	sbis	0x10, 4	; 16
     c94:	0d c0       	rjmp	.+26     	; 0xcb0 <_Z4menuv+0xc2>
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	93 eb       	ldi	r25, 0xB3	; 179
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <_Z4menuv+0xac>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <_Z4menuv+0xb2>
     ca0:	00 00       	nop
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	93 e2       	ldi	r25, 0x23	; 35
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <_Z4menuv+0xb8>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <_Z4menuv+0xbe>
     cac:	00 00       	nop
     cae:	da c2       	rjmp	.+1460   	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     cb0:	83 99       	sbic	0x10, 3	; 16
     cb2:	a4 c2       	rjmp	.+1352   	; 0x11fc <_Z4menuv+0x60e>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	93 eb       	ldi	r25, 0xB3	; 179
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <_Z4menuv+0xca>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <_Z4menuv+0xd0>
     cbe:	00 00       	nop
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	93 e2       	ldi	r25, 0x23	; 35
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <_Z4menuv+0xd6>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <_Z4menuv+0xdc>
     cca:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     ccc:	83 9b       	sbis	0x10, 3	; 16
     cce:	96 c2       	rjmp	.+1324   	; 0x11fc <_Z4menuv+0x60e>
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	93 eb       	ldi	r25, 0xB3	; 179
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <_Z4menuv+0xe6>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <_Z4menuv+0xec>
     cda:	00 00       	nop
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	93 e2       	ldi	r25, 0x23	; 35
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <_Z4menuv+0xf2>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <_Z4menuv+0xf8>
     ce6:	00 00       	nop
				//Weckzeit anzeigen und einstellen mit PD2
				lcd_clear();
				aus(1,5);
				aus(2,0);
				lcd_string("Werktags");
				posit = posit + 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	86 cf       	rjmp	.-244    	; 0xbf8 <_Z4menuv+0xa>
				}
				break;
			
			case 1:
			//Weckzeit anzeige und einstellungen am Wochenende
				lcd_clear();
     cec:	6a da       	rcall	.-2860   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,7);
     cee:	6c 2f       	mov	r22, r28
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	74 dc       	rcall	.-1816   	; 0x5dc <_Z3aushh>
				aus(2,0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	71 dc       	rcall	.-1822   	; 0x5dc <_Z3aushh>
				lcd_string("Wohenende");
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	b3 da       	rcall	.-2714   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <_Z4menuv+0x192>
				{
					if(Sekunden!=sektemp){
						zeit();
     d02:	c4 db       	rcall	.-2168   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     d04:	82 99       	sbic	0x10, 2	; 16
     d06:	1f c0       	rjmp	.+62     	; 0xd46 <_Z4menuv+0x158>
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	93 eb       	ldi	r25, 0xB3	; 179
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <_Z4menuv+0x11e>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <_Z4menuv+0x124>
     d12:	00 00       	nop
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	93 e2       	ldi	r25, 0x23	; 35
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <_Z4menuv+0x12a>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <_Z4menuv+0x130>
     d1e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     d20:	82 9b       	sbis	0x10, 2	; 16
     d22:	11 c0       	rjmp	.+34     	; 0xd46 <_Z4menuv+0x158>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	93 eb       	ldi	r25, 0xB3	; 179
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <_Z4menuv+0x13a>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <_Z4menuv+0x140>
     d2e:	00 00       	nop
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	93 e2       	ldi	r25, 0x23	; 35
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <_Z4menuv+0x146>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <_Z4menuv+0x14c>
     d3a:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(5);
     d3c:	85 e0       	ldi	r24, 0x05	; 5
     d3e:	31 dd       	rcall	.-1438   	; 0x7a2 <_Z5einsth>
						lcd_string("Wohenende");
     d40:	8a e2       	ldi	r24, 0x2A	; 42
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	90 da       	rcall	.-2784   	; 0x266 <_Z10lcd_stringPKc>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     d46:	84 99       	sbic	0x10, 4	; 16
     d48:	1b c0       	rjmp	.+54     	; 0xd80 <_Z4menuv+0x192>
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	93 eb       	ldi	r25, 0xB3	; 179
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <_Z4menuv+0x160>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <_Z4menuv+0x166>
     d54:	00 00       	nop
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	93 e2       	ldi	r25, 0x23	; 35
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <_Z4menuv+0x16c>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <_Z4menuv+0x172>
     d60:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     d62:	84 9b       	sbis	0x10, 4	; 16
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <_Z4menuv+0x192>
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	93 eb       	ldi	r25, 0xB3	; 179
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <_Z4menuv+0x17c>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <_Z4menuv+0x182>
     d70:	00 00       	nop
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	93 e2       	ldi	r25, 0x23	; 35
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <_Z4menuv+0x188>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <_Z4menuv+0x18e>
     d7c:	00 00       	nop
     d7e:	72 c2       	rjmp	.+1252   	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     d80:	83 99       	sbic	0x10, 3	; 16
     d82:	43 c2       	rjmp	.+1158   	; 0x120a <_Z4menuv+0x61c>
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	93 eb       	ldi	r25, 0xB3	; 179
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <_Z4menuv+0x19a>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <_Z4menuv+0x1a0>
     d8e:	00 00       	nop
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	93 e2       	ldi	r25, 0x23	; 35
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <_Z4menuv+0x1a6>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <_Z4menuv+0x1ac>
     d9a:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     d9c:	83 9b       	sbis	0x10, 3	; 16
     d9e:	35 c2       	rjmp	.+1130   	; 0x120a <_Z4menuv+0x61c>
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	93 eb       	ldi	r25, 0xB3	; 179
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <_Z4menuv+0x1b6>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <_Z4menuv+0x1bc>
     daa:	00 00       	nop
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	93 e2       	ldi	r25, 0x23	; 35
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <_Z4menuv+0x1c2>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <_Z4menuv+0x1c8>
     db6:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     db8:	82 e0       	ldi	r24, 0x02	; 2
				break;
     dba:	1e cf       	rjmp	.-452    	; 0xbf8 <_Z4menuv+0xa>
			
			case 2:
				//Lampe einstellen
				lcd_clear();
     dbc:	02 da       	rcall	.-3068   	; 0x1c2 <_Z9lcd_clearv>
				lcd_string("Lampenstaerke:");
     dbe:	80 ec       	ldi	r24, 0xC0	; 192
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	51 da       	rcall	.-2910   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	09 dc       	rcall	.-2030   	; 0x5dc <_Z3aushh>
				itoa(lampenstaerke,Buffer,10);
     dca:	4a e0       	ldi	r20, 0x0A	; 10
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	6f e4       	ldi	r22, 0x4F	; 79
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	80 91 61 00 	lds	r24, 0x0061
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	d5 d5       	rcall	.+2986   	; 0x1984 <itoa>
				lcd_string(Buffer);
     dda:	8f e4       	ldi	r24, 0x4F	; 79
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	43 da       	rcall	.-2938   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     de0:	3c c0       	rjmp	.+120    	; 0xe5a <_Z4menuv+0x26c>
				{
					if(Sekunden!=sektemp){
						zeit();
     de2:	54 db       	rcall	.-2392   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     de4:	82 99       	sbic	0x10, 2	; 16
     de6:	1c c0       	rjmp	.+56     	; 0xe20 <_Z4menuv+0x232>
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	93 eb       	ldi	r25, 0xB3	; 179
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <_Z4menuv+0x1fe>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <_Z4menuv+0x204>
     df2:	00 00       	nop
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	93 e2       	ldi	r25, 0x23	; 35
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <_Z4menuv+0x20a>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <_Z4menuv+0x210>
     dfe:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     e00:	82 9b       	sbis	0x10, 2	; 16
     e02:	0e c0       	rjmp	.+28     	; 0xe20 <_Z4menuv+0x232>
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	93 eb       	ldi	r25, 0xB3	; 179
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <_Z4menuv+0x21a>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <_Z4menuv+0x220>
     e0e:	00 00       	nop
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	93 e2       	ldi	r25, 0x23	; 35
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <_Z4menuv+0x226>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <_Z4menuv+0x22c>
     e1a:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(1);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	c1 dc       	rcall	.-1662   	; 0x7a2 <_Z5einsth>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     e20:	84 99       	sbic	0x10, 4	; 16
     e22:	1b c0       	rjmp	.+54     	; 0xe5a <_Z4menuv+0x26c>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	93 eb       	ldi	r25, 0xB3	; 179
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <_Z4menuv+0x23a>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <_Z4menuv+0x240>
     e2e:	00 00       	nop
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	93 e2       	ldi	r25, 0x23	; 35
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <_Z4menuv+0x246>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <_Z4menuv+0x24c>
     e3a:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     e3c:	84 9b       	sbis	0x10, 4	; 16
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <_Z4menuv+0x26c>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	93 eb       	ldi	r25, 0xB3	; 179
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <_Z4menuv+0x256>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <_Z4menuv+0x25c>
     e4a:	00 00       	nop
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	93 e2       	ldi	r25, 0x23	; 35
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <_Z4menuv+0x262>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <_Z4menuv+0x268>
     e56:	00 00       	nop
     e58:	05 c2       	rjmp	.+1034   	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     e5a:	83 99       	sbic	0x10, 3	; 16
     e5c:	dd c1       	rjmp	.+954    	; 0x1218 <_Z4menuv+0x62a>
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	93 eb       	ldi	r25, 0xB3	; 179
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <_Z4menuv+0x274>
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <_Z4menuv+0x27a>
     e68:	00 00       	nop
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	93 e2       	ldi	r25, 0x23	; 35
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <_Z4menuv+0x280>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <_Z4menuv+0x286>
     e74:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     e76:	83 9b       	sbis	0x10, 3	; 16
     e78:	cf c1       	rjmp	.+926    	; 0x1218 <_Z4menuv+0x62a>
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	93 eb       	ldi	r25, 0xB3	; 179
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <_Z4menuv+0x290>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <_Z4menuv+0x296>
     e84:	00 00       	nop
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	93 e2       	ldi	r25, 0x23	; 35
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <_Z4menuv+0x29c>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <_Z4menuv+0x2a2>
     e90:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     e92:	83 e0       	ldi	r24, 0x03	; 3
				break;
     e94:	b1 ce       	rjmp	.-670    	; 0xbf8 <_Z4menuv+0xa>
			
			case 3:
				//Zeit einstellen ohnen Sekunden
				lcd_clear();
     e96:	95 d9       	rcall	.-3286   	; 0x1c2 <_Z9lcd_clearv>
				aus(1,3);
     e98:	63 e0       	ldi	r22, 0x03	; 3
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	9f db       	rcall	.-2242   	; 0x5dc <_Z3aushh>
				aus(2,0);
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	9c db       	rcall	.-2248   	; 0x5dc <_Z3aushh>
				lcd_string("Zeit");
     ea4:	84 e3       	ldi	r24, 0x34	; 52
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	de d9       	rcall	.-3140   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <_Z4menuv+0x33c>
				{
					if(Sekunden!=sektemp){
						zeit();
     eac:	ef da       	rcall	.-2594   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     eae:	82 99       	sbic	0x10, 2	; 16
     eb0:	1f c0       	rjmp	.+62     	; 0xef0 <_Z4menuv+0x302>
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	93 eb       	ldi	r25, 0xB3	; 179
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <_Z4menuv+0x2c8>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <_Z4menuv+0x2ce>
     ebc:	00 00       	nop
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	93 e2       	ldi	r25, 0x23	; 35
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <_Z4menuv+0x2d4>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <_Z4menuv+0x2da>
     ec8:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     eca:	82 9b       	sbis	0x10, 2	; 16
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <_Z4menuv+0x302>
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	93 eb       	ldi	r25, 0xB3	; 179
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <_Z4menuv+0x2e4>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <_Z4menuv+0x2ea>
     ed8:	00 00       	nop
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	93 e2       	ldi	r25, 0x23	; 35
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <_Z4menuv+0x2f0>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <_Z4menuv+0x2f6>
     ee4:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(0);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	5c dc       	rcall	.-1864   	; 0x7a2 <_Z5einsth>
						lcd_string("Zeit");
     eea:	84 e3       	ldi	r24, 0x34	; 52
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	bb d9       	rcall	.-3210   	; 0x266 <_Z10lcd_stringPKc>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     ef0:	84 99       	sbic	0x10, 4	; 16
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <_Z4menuv+0x33c>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	93 eb       	ldi	r25, 0xB3	; 179
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <_Z4menuv+0x30a>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <_Z4menuv+0x310>
     efe:	00 00       	nop
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	93 e2       	ldi	r25, 0x23	; 35
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <_Z4menuv+0x316>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <_Z4menuv+0x31c>
     f0a:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     f0c:	84 9b       	sbis	0x10, 4	; 16
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <_Z4menuv+0x33c>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	93 eb       	ldi	r25, 0xB3	; 179
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <_Z4menuv+0x326>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <_Z4menuv+0x32c>
     f1a:	00 00       	nop
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	93 e2       	ldi	r25, 0x23	; 35
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <_Z4menuv+0x332>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <_Z4menuv+0x338>
     f26:	00 00       	nop
     f28:	9d c1       	rjmp	.+826    	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     f2a:	83 99       	sbic	0x10, 3	; 16
     f2c:	7c c1       	rjmp	.+760    	; 0x1226 <_Z4menuv+0x638>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	93 eb       	ldi	r25, 0xB3	; 179
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <_Z4menuv+0x344>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <_Z4menuv+0x34a>
     f38:	00 00       	nop
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	93 e2       	ldi	r25, 0x23	; 35
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <_Z4menuv+0x350>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <_Z4menuv+0x356>
     f44:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     f46:	83 9b       	sbis	0x10, 3	; 16
     f48:	6e c1       	rjmp	.+732    	; 0x1226 <_Z4menuv+0x638>
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	93 eb       	ldi	r25, 0xB3	; 179
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <_Z4menuv+0x360>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <_Z4menuv+0x366>
     f54:	00 00       	nop
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	93 e2       	ldi	r25, 0x23	; 35
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <_Z4menuv+0x36c>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <_Z4menuv+0x372>
     f60:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
     f62:	84 e0       	ldi	r24, 0x04	; 4
				break;
     f64:	49 ce       	rjmp	.-878    	; 0xbf8 <_Z4menuv+0xa>
				
			case 4:
				//Sekundenoffset einstellen
				lcd_clear();
     f66:	2d d9       	rcall	.-3494   	; 0x1c2 <_Z9lcd_clearv>
				lcd_home();
     f68:	63 d9       	rcall	.-3386   	; 0x230 <_Z8lcd_homev>
				lcd_string("Sekundenoffset:");
     f6a:	8f ec       	ldi	r24, 0xCF	; 207
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	7b d9       	rcall	.-3338   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	33 db       	rcall	.-2458   	; 0x5dc <_Z3aushh>
				itoa(sekoffset,Buffer,10);
     f76:	80 91 63 01 	lds	r24, 0x0163
     f7a:	4a e0       	ldi	r20, 0x0A	; 10
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	6f e4       	ldi	r22, 0x4F	; 79
     f80:	71 e0       	ldi	r23, 0x01	; 1
     f82:	99 27       	eor	r25, r25
     f84:	87 fd       	sbrc	r24, 7
     f86:	90 95       	com	r25
     f88:	fd d4       	rcall	.+2554   	; 0x1984 <itoa>
				lcd_string(Buffer);
     f8a:	8f e4       	ldi	r24, 0x4F	; 79
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	6b d9       	rcall	.-3370   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
     f90:	3c c0       	rjmp	.+120    	; 0x100a <_Z4menuv+0x41c>
				{
					if(Sekunden!=sektemp){
						zeit();
     f92:	7c da       	rcall	.-2824   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     f94:	82 99       	sbic	0x10, 2	; 16
     f96:	1c c0       	rjmp	.+56     	; 0xfd0 <_Z4menuv+0x3e2>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	93 eb       	ldi	r25, 0xB3	; 179
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <_Z4menuv+0x3ae>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <_Z4menuv+0x3b4>
     fa2:	00 00       	nop
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	93 e2       	ldi	r25, 0x23	; 35
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <_Z4menuv+0x3ba>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <_Z4menuv+0x3c0>
     fae:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     fb0:	82 9b       	sbis	0x10, 2	; 16
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <_Z4menuv+0x3e2>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	93 eb       	ldi	r25, 0xB3	; 179
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <_Z4menuv+0x3ca>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <_Z4menuv+0x3d0>
     fbe:	00 00       	nop
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	93 e2       	ldi	r25, 0x23	; 35
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <_Z4menuv+0x3d6>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_Z4menuv+0x3dc>
     fca:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(2);
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	e9 db       	rcall	.-2094   	; 0x7a2 <_Z5einsth>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
     fd0:	84 99       	sbic	0x10, 4	; 16
     fd2:	1b c0       	rjmp	.+54     	; 0x100a <_Z4menuv+0x41c>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	93 eb       	ldi	r25, 0xB3	; 179
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <_Z4menuv+0x3ea>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <_Z4menuv+0x3f0>
     fde:	00 00       	nop
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	93 e2       	ldi	r25, 0x23	; 35
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <_Z4menuv+0x3f6>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <_Z4menuv+0x3fc>
     fea:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
     fec:	84 9b       	sbis	0x10, 4	; 16
     fee:	0d c0       	rjmp	.+26     	; 0x100a <_Z4menuv+0x41c>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	93 eb       	ldi	r25, 0xB3	; 179
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <_Z4menuv+0x406>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <_Z4menuv+0x40c>
     ffa:	00 00       	nop
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	93 e2       	ldi	r25, 0x23	; 35
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <_Z4menuv+0x412>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <_Z4menuv+0x418>
    1006:	00 00       	nop
    1008:	2d c1       	rjmp	.+602    	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    100a:	83 99       	sbic	0x10, 3	; 16
    100c:	13 c1       	rjmp	.+550    	; 0x1234 <_Z4menuv+0x646>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	93 eb       	ldi	r25, 0xB3	; 179
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <_Z4menuv+0x424>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <_Z4menuv+0x42a>
    1018:	00 00       	nop
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	93 e2       	ldi	r25, 0x23	; 35
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <_Z4menuv+0x430>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <_Z4menuv+0x436>
    1024:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    1026:	83 9b       	sbis	0x10, 3	; 16
    1028:	05 c1       	rjmp	.+522    	; 0x1234 <_Z4menuv+0x646>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	93 eb       	ldi	r25, 0xB3	; 179
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <_Z4menuv+0x440>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <_Z4menuv+0x446>
    1034:	00 00       	nop
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	93 e2       	ldi	r25, 0x23	; 35
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <_Z4menuv+0x44c>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <_Z4menuv+0x452>
    1040:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
    1042:	85 e0       	ldi	r24, 0x05	; 5
				break;
    1044:	d9 cd       	rjmp	.-1102   	; 0xbf8 <_Z4menuv+0xa>
				
			case 5:
				//Temperaturoffset einstellen
				lcd_clear();
    1046:	bd d8       	rcall	.-3718   	; 0x1c2 <_Z9lcd_clearv>
				lcd_home();
    1048:	f3 d8       	rcall	.-3610   	; 0x230 <_Z8lcd_homev>
				lcd_string("Temperaturoffset:");
    104a:	8f ed       	ldi	r24, 0xDF	; 223
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0b d9       	rcall	.-3562   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	c3 da       	rcall	.-2682   	; 0x5dc <_Z3aushh>
				itoa(tempoffset,Buffer,10);
    1056:	80 91 62 00 	lds	r24, 0x0062
    105a:	4a e0       	ldi	r20, 0x0A	; 10
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	6f e4       	ldi	r22, 0x4F	; 79
    1060:	71 e0       	ldi	r23, 0x01	; 1
    1062:	99 27       	eor	r25, r25
    1064:	87 fd       	sbrc	r24, 7
    1066:	90 95       	com	r25
    1068:	8d d4       	rcall	.+2330   	; 0x1984 <itoa>
				lcd_string(Buffer);
    106a:	8f e4       	ldi	r24, 0x4F	; 79
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	fb d8       	rcall	.-3594   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
    1070:	3d c0       	rjmp	.+122    	; 0x10ec <_Z4menuv+0x4fe>
				{
					if(Sekunden!=sektemp){
						zeit();
    1072:	0c da       	rcall	.-3048   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    1074:	82 99       	sbic	0x10, 2	; 16
    1076:	1c c0       	rjmp	.+56     	; 0x10b0 <_Z4menuv+0x4c2>
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	93 eb       	ldi	r25, 0xB3	; 179
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <_Z4menuv+0x48e>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <_Z4menuv+0x494>
    1082:	00 00       	nop
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	93 e2       	ldi	r25, 0x23	; 35
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <_Z4menuv+0x49a>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <_Z4menuv+0x4a0>
    108e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    1090:	82 9b       	sbis	0x10, 2	; 16
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <_Z4menuv+0x4c2>
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	93 eb       	ldi	r25, 0xB3	; 179
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <_Z4menuv+0x4aa>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <_Z4menuv+0x4b0>
    109e:	00 00       	nop
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	93 e2       	ldi	r25, 0x23	; 35
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <_Z4menuv+0x4b6>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <_Z4menuv+0x4bc>
    10aa:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						einst(3);
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	79 db       	rcall	.-2318   	; 0x7a2 <_Z5einsth>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    10b0:	84 99       	sbic	0x10, 4	; 16
    10b2:	1c c0       	rjmp	.+56     	; 0x10ec <_Z4menuv+0x4fe>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	93 eb       	ldi	r25, 0xB3	; 179
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <_Z4menuv+0x4ca>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <_Z4menuv+0x4d0>
    10be:	00 00       	nop
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	93 e2       	ldi	r25, 0x23	; 35
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <_Z4menuv+0x4d6>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <_Z4menuv+0x4dc>
    10ca:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    10cc:	84 9b       	sbis	0x10, 4	; 16
    10ce:	0e c0       	rjmp	.+28     	; 0x10ec <_Z4menuv+0x4fe>
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	93 eb       	ldi	r25, 0xB3	; 179
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <_Z4menuv+0x4e6>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <_Z4menuv+0x4ec>
    10da:	00 00       	nop
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	93 e2       	ldi	r25, 0x23	; 35
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <_Z4menuv+0x4f2>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <_Z4menuv+0x4f8>
    10e6:	00 00       	nop
					}
					if (debounce(&PIND,PD4))
					{
						temperatur();
    10e8:	62 d9       	rcall	.-3388   	; 0x3ae <_Z10temperaturv>
						return 1;
    10ea:	bc c0       	rjmp	.+376    	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    10ec:	83 99       	sbic	0x10, 3	; 16
    10ee:	a9 c0       	rjmp	.+338    	; 0x1242 <_Z4menuv+0x654>
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	93 eb       	ldi	r25, 0xB3	; 179
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <_Z4menuv+0x506>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <_Z4menuv+0x50c>
    10fa:	00 00       	nop
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	93 e2       	ldi	r25, 0x23	; 35
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <_Z4menuv+0x512>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <_Z4menuv+0x518>
    1106:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    1108:	83 9b       	sbis	0x10, 3	; 16
    110a:	9b c0       	rjmp	.+310    	; 0x1242 <_Z4menuv+0x654>
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	93 eb       	ldi	r25, 0xB3	; 179
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <_Z4menuv+0x522>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <_Z4menuv+0x528>
    1116:	00 00       	nop
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	93 e2       	ldi	r25, 0x23	; 35
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <_Z4menuv+0x52e>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <_Z4menuv+0x534>
    1122:	00 00       	nop
					}
				}
				temperatur();
    1124:	44 d9       	rcall	.-3448   	; 0x3ae <_Z10temperaturv>
				posit++;
    1126:	8d 2f       	mov	r24, r29
				break;
    1128:	67 cd       	rjmp	.-1330   	; 0xbf8 <_Z4menuv+0xa>
				
			case 6:
				//Display ausschalten
				lcd_clear();
    112a:	4b d8       	rcall	.-3946   	; 0x1c2 <_Z9lcd_clearv>
				lcd_home();
    112c:	81 d8       	rcall	.-3838   	; 0x230 <_Z8lcd_homev>
				lcd_string("Display");
    112e:	89 e3       	ldi	r24, 0x39	; 57
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	99 d8       	rcall	.-3790   	; 0x266 <_Z10lcd_stringPKc>
				aus(2,0);
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	51 da       	rcall	.-2910   	; 0x5dc <_Z3aushh>
				lcd_string("ausschalten?");
    113a:	81 e4       	ldi	r24, 0x41	; 65
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	93 d8       	rcall	.-3802   	; 0x266 <_Z10lcd_stringPKc>
				while (!debounce(&PIND,PD3))
    1140:	3f c0       	rjmp	.+126    	; 0x11c0 <_Z4menuv+0x5d2>
				{
					if(Sekunden!=sektemp){
						zeit();
    1142:	a4 d9       	rcall	.-3256   	; 0x48c <_Z4zeitv>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    1144:	82 99       	sbic	0x10, 2	; 16
    1146:	84 c0       	rjmp	.+264    	; 0x1250 <_Z4menuv+0x662>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	93 eb       	ldi	r25, 0xB3	; 179
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <_Z4menuv+0x55e>
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <_Z4menuv+0x564>
    1152:	00 00       	nop
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	93 e2       	ldi	r25, 0x23	; 35
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <_Z4menuv+0x56a>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <_Z4menuv+0x570>
    115e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    1160:	82 9b       	sbis	0x10, 2	; 16
    1162:	76 c0       	rjmp	.+236    	; 0x1250 <_Z4menuv+0x662>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	93 eb       	ldi	r25, 0xB3	; 179
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <_Z4menuv+0x57a>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <_Z4menuv+0x580>
    116e:	00 00       	nop
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	93 e2       	ldi	r25, 0x23	; 35
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <_Z4menuv+0x586>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <_Z4menuv+0x58c>
    117a:	00 00       	nop
					}
					if (debounce(&PIND,PD2))
					{
						displaystat=false;
    117c:	10 92 60 00 	sts	0x0060, r1
						displayoff=0;
    1180:	10 92 4e 01 	sts	0x014E, r1
						lcd_clear();
    1184:	1e d8       	rcall	.-4036   	; 0x1c2 <_Z9lcd_clearv>
						PORTC &= ~(1<<PC2); //Display ausschalten
    1186:	aa 98       	cbi	0x15, 2	; 21
						displaystat=false;
						displayoff=0;
						lcd_clear();
						PORTC &= ~(1<<PC2); //Display ausschalten
						*/
						return 1;
    1188:	6d c0       	rjmp	.+218    	; 0x1264 <_Z4menuv+0x676>
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	93 eb       	ldi	r25, 0xB3	; 179
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <_Z4menuv+0x5a0>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <_Z4menuv+0x5a6>
    1194:	00 00       	nop
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	93 e2       	ldi	r25, 0x23	; 35
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <_Z4menuv+0x5ac>
    119e:	00 c0       	rjmp	.+0      	; 0x11a0 <_Z4menuv+0x5b2>
    11a0:	00 00       	nop
    11a2:	84 9b       	sbis	0x10, 4	; 16
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <_Z4menuv+0x5d2>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	93 eb       	ldi	r25, 0xB3	; 179
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <_Z4menuv+0x5bc>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <_Z4menuv+0x5c2>
    11b0:	00 00       	nop
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	93 e2       	ldi	r25, 0x23	; 35
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <_Z4menuv+0x5c8>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <_Z4menuv+0x5ce>
    11bc:	00 00       	nop
    11be:	52 c0       	rjmp	.+164    	; 0x1264 <_Z4menuv+0x676>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    11c0:	83 99       	sbic	0x10, 3	; 16
    11c2:	49 c0       	rjmp	.+146    	; 0x1256 <_Z4menuv+0x668>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	93 eb       	ldi	r25, 0xB3	; 179
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <_Z4menuv+0x5da>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <_Z4menuv+0x5e0>
    11ce:	00 00       	nop
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	93 e2       	ldi	r25, 0x23	; 35
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <_Z4menuv+0x5e6>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <_Z4menuv+0x5ec>
    11da:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    11dc:	83 9b       	sbis	0x10, 3	; 16
    11de:	3b c0       	rjmp	.+118    	; 0x1256 <_Z4menuv+0x668>
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	93 eb       	ldi	r25, 0xB3	; 179
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <_Z4menuv+0x5f6>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <_Z4menuv+0x5fc>
    11ea:	00 00       	nop
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	93 e2       	ldi	r25, 0x23	; 35
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <_Z4menuv+0x602>
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <_Z4menuv+0x608>
    11f6:	00 00       	nop
					if (debounce(&PIND,PD4))
					{
						return 1;
					}
				}
				posit++;
    11f8:	8c 2f       	mov	r24, r28
				break;
    11fa:	fe cc       	rjmp	.-1540   	; 0xbf8 <_Z4menuv+0xa>
				lcd_string("Werktags");
				posit = posit + 1;
				while(!debounce(&PIND,PD3))
				{
					//Zeitabfrage mit einbauen
					if(Sekunden!=sektemp){
    11fc:	90 91 79 01 	lds	r25, 0x0179
    1200:	80 91 68 01 	lds	r24, 0x0168
    1204:	98 13       	cpse	r25, r24
    1206:	15 cd       	rjmp	.-1494   	; 0xc32 <_Z4menuv+0x44>
    1208:	15 cd       	rjmp	.-1494   	; 0xc34 <_Z4menuv+0x46>
				aus(1,7);
				aus(2,0);
				lcd_string("Wohenende");
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    120a:	90 91 79 01 	lds	r25, 0x0179
    120e:	80 91 68 01 	lds	r24, 0x0168
    1212:	98 13       	cpse	r25, r24
    1214:	76 cd       	rjmp	.-1300   	; 0xd02 <_Z4menuv+0x114>
    1216:	76 cd       	rjmp	.-1300   	; 0xd04 <_Z4menuv+0x116>
				aus(2,0);
				itoa(lampenstaerke,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1218:	90 91 79 01 	lds	r25, 0x0179
    121c:	80 91 68 01 	lds	r24, 0x0168
    1220:	98 13       	cpse	r25, r24
    1222:	df cd       	rjmp	.-1090   	; 0xde2 <_Z4menuv+0x1f4>
    1224:	df cd       	rjmp	.-1090   	; 0xde4 <_Z4menuv+0x1f6>
				aus(1,3);
				aus(2,0);
				lcd_string("Zeit");
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1226:	90 91 79 01 	lds	r25, 0x0179
    122a:	80 91 68 01 	lds	r24, 0x0168
    122e:	98 13       	cpse	r25, r24
    1230:	3d ce       	rjmp	.-902    	; 0xeac <_Z4menuv+0x2be>
    1232:	3d ce       	rjmp	.-902    	; 0xeae <_Z4menuv+0x2c0>
				aus(2,0);
				itoa(sekoffset,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1234:	90 91 79 01 	lds	r25, 0x0179
    1238:	80 91 68 01 	lds	r24, 0x0168
    123c:	98 13       	cpse	r25, r24
    123e:	a9 ce       	rjmp	.-686    	; 0xf92 <_Z4menuv+0x3a4>
    1240:	a9 ce       	rjmp	.-686    	; 0xf94 <_Z4menuv+0x3a6>
				aus(2,0);
				itoa(tempoffset,Buffer,10);
				lcd_string(Buffer);
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1242:	90 91 79 01 	lds	r25, 0x0179
    1246:	80 91 68 01 	lds	r24, 0x0168
    124a:	98 13       	cpse	r25, r24
    124c:	12 cf       	rjmp	.-476    	; 0x1072 <_Z4menuv+0x484>
    124e:	12 cf       	rjmp	.-476    	; 0x1074 <_Z4menuv+0x486>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    1250:	84 99       	sbic	0x10, 4	; 16
    1252:	b6 cf       	rjmp	.-148    	; 0x11c0 <_Z4menuv+0x5d2>
    1254:	9a cf       	rjmp	.-204    	; 0x118a <_Z4menuv+0x59c>
				lcd_string("Display");
				aus(2,0);
				lcd_string("ausschalten?");
				while (!debounce(&PIND,PD3))
				{
					if(Sekunden!=sektemp){
    1256:	90 91 79 01 	lds	r25, 0x0179
    125a:	80 91 68 01 	lds	r24, 0x0168
    125e:	98 13       	cpse	r25, r24
    1260:	70 cf       	rjmp	.-288    	; 0x1142 <_Z4menuv+0x554>
    1262:	70 cf       	rjmp	.-288    	; 0x1144 <_Z4menuv+0x556>
				posit=0;
				break;
		}
	}
return 0;
}
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <_Z4initv>:
}

void init(){
	//ADC
	ADMUX = (1<<REFS0);
    126c:	80 e4       	ldi	r24, 0x40	; 64
    126e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);
    1274:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);
    1276:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC) ) {
    1278:	36 99       	sbic	0x06, 6	; 6
    127a:	fe cf       	rjmp	.-4      	; 0x1278 <_Z4initv+0xc>
	}
	(void) ADCW;
    127c:	84 b1       	in	r24, 0x04	; 4
    127e:	95 b1       	in	r25, 0x05	; 5
	
	//Eingänge
	PORTD |= (1<<PD2) | (1<<PD3) | (1<<PD4);
    1280:	82 b3       	in	r24, 0x12	; 18
    1282:	8c 61       	ori	r24, 0x1C	; 28
    1284:	82 bb       	out	0x12, r24	; 18
	
	//Ausgänge
	DDRC = (1<<PC5) | (1<<PC4) | (1<<PC3) | (1<<PC2) | (1<<PC1);
    1286:	8e e3       	ldi	r24, 0x3E	; 62
    1288:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC5) | (1<<PC4) | (1<<PC3) | (1<<PC2)  | (1<<PC1);
    128a:	85 b3       	in	r24, 0x15	; 21
    128c:	8e 63       	ori	r24, 0x3E	; 62
    128e:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~((1<<PC5) | (1<<PC4) | (1<<PC3) | (1<<PC2)  | (1<<PC1));
    1290:	85 b3       	in	r24, 0x15	; 21
    1292:	81 7c       	andi	r24, 0xC1	; 193
    1294:	85 bb       	out	0x15, r24	; 21
	
	//LCD einstellen und erste Ausgabe
	PORTC |= (1<PC2);
    1296:	a8 9a       	sbi	0x15, 0	; 21
    1298:	89 e9       	ldi	r24, 0x99	; 153
    129a:	93 e0       	ldi	r25, 0x03	; 3
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <_Z4initv+0x30>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <_Z4initv+0x36>
	_delay_ms(1);
	lcd_init();
    12a2:	96 d7       	rcall	.+3884   	; 0x21d0 <__data_load_end+0x22c>
	aus(1,4);
    12a4:	64 e0       	ldi	r22, 0x04	; 4
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	99 d9       	rcall	.-3278   	; 0x5dc <_Z3aushh>
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	2f ed       	ldi	r18, 0xDF	; 223
    12ae:	80 e1       	ldi	r24, 0x10	; 16
    12b0:	91 50       	subi	r25, 0x01	; 1
    12b2:	20 40       	sbci	r18, 0x00	; 0
    12b4:	80 40       	sbci	r24, 0x00	; 0
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <_Z4initv+0x44>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <_Z4initv+0x4e>
    12ba:	00 00       	nop
	_delay_ms(1500);
	lcd_clear();
    12bc:	82 d7       	rcall	.+3844   	; 0x21c2 <__data_load_end+0x21e>
	
	//erste zeiteinstellung
	zeitsetzen();
    12be:	7a dc       	rcall	.-1804   	; 0xbb4 <_Z10zeitsetzenv>
	
	//Timer 1 Einstelungen
	TCNT1H = 0b11110001;
    12c0:	81 ef       	ldi	r24, 0xF1	; 241
    12c2:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
    12c4:	80 ef       	ldi	r24, 0xF0	; 240
    12c6:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1<<TOIE1);
    12c8:	89 b7       	in	r24, 0x39	; 57
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	89 bf       	out	0x39, r24	; 57
	TCCR1B = (1<<CS10) | (1<<CS12);
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	8e bd       	out	0x2e, r24	; 46
	
	//Interupts aktivieren
	sei();
    12d2:	78 94       	sei
	
	//Timer 0 fuer die Ton ausgabe Programmieren

	//Wecker einschalten
	Wan=0;
    12d4:	10 92 69 01 	sts	0x0169, r1
    12d8:	08 95       	ret

000012da <__vector_9>:
#include "einstellungen.h"
#include "zeit.h"
#include "menue.h"
#include "ausgabe.h"

ISR(TIMER0_OVF_vect){
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
	TCNT0 = 255-35;
    12fc:	8c ed       	ldi	r24, 0xDC	; 220
    12fe:	82 bf       	out	0x32, r24	; 50
	if (!(PORTC & (1<<PC1)))
    1300:	a9 99       	sbic	0x15, 1	; 21
    1302:	04 c0       	rjmp	.+8      	; 0x130c <__vector_9+0x32>
	{
		lichteinaus(3);
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	ca d7       	rcall	.+3988   	; 0x229c <__data_load_end+0x2f8>
		PORTC |= (1<<PC1);
    1308:	a9 9a       	sbi	0x15, 1	; 21
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <__vector_9+0x38>
	}
	else
	{
		lichteinaus(0);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	c6 d7       	rcall	.+3980   	; 0x229c <__data_load_end+0x2f8>
		PORTC &= ~(1<<PC1);
    1310:	a9 98       	cbi	0x15, 1	; 21
	}
}
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	0f 90       	pop	r0
    1330:	1f 90       	pop	r1
    1332:	18 95       	reti

00001334 <__vector_8>:

ISR(TIMER1_OVF_vect){
    1334:	1f 92       	push	r1
    1336:	0f 92       	push	r0
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	0f 92       	push	r0
    133c:	11 24       	eor	r1, r1
    133e:	8f 93       	push	r24
	TCNT1H = 0b11110001;
    1340:	81 ef       	ldi	r24, 0xF1	; 241
    1342:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0b11110000;
    1344:	80 ef       	ldi	r24, 0xF0	; 240
    1346:	8c bd       	out	0x2c, r24	; 44
	Sekunden++;
    1348:	80 91 79 01 	lds	r24, 0x0179
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	80 93 79 01 	sts	0x0179, r24
}
    1352:	8f 91       	pop	r24
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <main>:

int main(void)
{
	init();
    135e:	86 df       	rcall	.-244    	; 0x126c <_Z4initv>
					}
				}
			}
			else
			{
				if(Stunden==WStunden[1]){
    1360:	c5 e7       	ldi	r28, 0x75	; 117
    1362:	d1 e0       	ldi	r29, 0x01	; 1
					if(Minuten==WMinuten[1]+1){
    1364:	0f 2e       	mov	r0, r31
    1366:	f3 e7       	ldi	r31, 0x73	; 115
    1368:	ef 2e       	mov	r14, r31
    136a:	f1 e0       	ldi	r31, 0x01	; 1
    136c:	ff 2e       	mov	r15, r31
    136e:	f0 2d       	mov	r31, r0
		}
		else if (Wan==2)	//Abfrage, damit der Wecker nachdem man ihn in der ersten minute ausgeschaltet hat nicht wieder an geht
		{
			if (WochenTag!=0 && WochenTag!=6)
			{
				if(Stunden==WStunden[0]){
    1370:	04 e7       	ldi	r16, 0x74	; 116
    1372:	11 e0       	ldi	r17, 0x01	; 1
					if(Minuten==WMinuten[0]+1){
    1374:	0f 2e       	mov	r0, r31
    1376:	f2 e7       	ldi	r31, 0x72	; 114
    1378:	cf 2e       	mov	r12, r31
    137a:	f1 e0       	ldi	r31, 0x01	; 1
    137c:	df 2e       	mov	r13, r31
    137e:	f0 2d       	mov	r31, r0
{
	init();
	
	while(1)
	{
		if (Sekunden!=sektemp)
    1380:	90 91 79 01 	lds	r25, 0x0179
    1384:	80 91 68 01 	lds	r24, 0x0168
    1388:	98 17       	cp	r25, r24
    138a:	41 f1       	breq	.+80     	; 0x13dc <main+0x7e>
		{
			zeit();
    138c:	7f d8       	rcall	.-3842   	; 0x48c <_Z4zeitv>
			if (displaystat)
    138e:	80 91 60 00 	lds	r24, 0x0060
    1392:	88 23       	and	r24, r24
    1394:	c9 f0       	breq	.+50     	; 0x13c8 <main+0x6a>
			{
				aus(1,3);	//obere Zeile
    1396:	63 e0       	ldi	r22, 0x03	; 3
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	20 d9       	rcall	.-3520   	; 0x5dc <_Z3aushh>
				aus(2,1);	//untere zeile
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	1d d9       	rcall	.-3526   	; 0x5dc <_Z3aushh>
				if (Wan!=1)
    13a2:	80 91 69 01 	lds	r24, 0x0169
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	79 f4       	brne	.+30     	; 0x13c8 <main+0x6a>
				{
					//Aussetzen, des Ausschalten, da keine moeglichkeit das Display wirklich auszuschalten
					//displayoff++;
				}
				else if (!displaystat && Wan ==1)
    13aa:	80 91 60 00 	lds	r24, 0x0060
    13ae:	81 11       	cpse	r24, r1
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <main+0x6a>
				{
					//Display wieder anschalten, falls noch nicht angeschaltet
					PORTC |= (1<<PC2); //display einsschalten und neue anzeige starten
    13b2:	aa 9a       	sbi	0x15, 2	; 21
					lcd_init();
    13b4:	0d d7       	rcall	.+3610   	; 0x21d0 <__data_load_end+0x22c>
					aus(1,3);
    13b6:	63 e0       	ldi	r22, 0x03	; 3
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	10 d9       	rcall	.-3552   	; 0x5dc <_Z3aushh>
					aus(2,1);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	0d d9       	rcall	.-3558   	; 0x5dc <_Z3aushh>
					displaystat=true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 93 60 00 	sts	0x0060, r24
				}
			}
			if (displayoff>=120)
    13c8:	80 91 4e 01 	lds	r24, 0x014E
    13cc:	88 37       	cpi	r24, 0x78	; 120
    13ce:	30 f0       	brcs	.+12     	; 0x13dc <main+0x7e>
			{
				displaystat=false;
    13d0:	10 92 60 00 	sts	0x0060, r1
				displayoff=0;
    13d4:	10 92 4e 01 	sts	0x014E, r1
				lcd_clear();
    13d8:	f4 d6       	rcall	.+3560   	; 0x21c2 <__data_load_end+0x21e>
				PORTC &= ~(1<<PC2); //Display ausschalten
    13da:	aa 98       	cbi	0x15, 2	; 21
			}
			
		}
		if (Wan==1)
    13dc:	80 91 69 01 	lds	r24, 0x0169
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	31 f5       	brne	.+76     	; 0x1430 <main+0xd2>
    13e4:	82 99       	sbic	0x10, 2	; 16
    13e6:	50 c0       	rjmp	.+160    	; 0x1488 <main+0x12a>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	93 eb       	ldi	r25, 0xB3	; 179
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <main+0x8e>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <main+0x94>
    13f2:	00 00       	nop
    13f4:	ef ef       	ldi	r30, 0xFF	; 255
    13f6:	f3 e2       	ldi	r31, 0x23	; 35
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <main+0x9a>
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <main+0xa0>
    13fe:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    1400:	82 9b       	sbis	0x10, 2	; 16
    1402:	42 c0       	rjmp	.+132    	; 0x1488 <main+0x12a>
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	93 eb       	ldi	r25, 0xB3	; 179
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <main+0xaa>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <main+0xb0>
    140e:	00 00       	nop
    1410:	ef ef       	ldi	r30, 0xFF	; 255
    1412:	f3 e2       	ldi	r31, 0x23	; 35
    1414:	31 97       	sbiw	r30, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <main+0xb6>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <main+0xbc>
    141a:	00 00       	nop
		{
			if(debounce(&PIND,2))
			{
				displayoff=0;
    141c:	10 92 4e 01 	sts	0x014E, r1
				Wan=2;
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	80 93 69 01 	sts	0x0169, r24
				lichteinaus(0);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	39 d7       	rcall	.+3698   	; 0x229c <__data_load_end+0x2f8>
				TCCR0 = (0<<CS01) | (0<<CS00);	//Timer aus
    142a:	13 be       	out	0x33, r1	; 51
				PORTC &= ~(1<<PC1);				//Port fuer den Lautsprecher aus
    142c:	a9 98       	cbi	0x15, 1	; 21
    142e:	2c c0       	rjmp	.+88     	; 0x1488 <main+0x12a>
			}
		}
		else if (Wan==2)	//Abfrage, damit der Wecker nachdem man ihn in der ersten minute ausgeschaltet hat nicht wieder an geht
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	51 f5       	brne	.+84     	; 0x1488 <main+0x12a>
		{
			if (WochenTag!=0 && WochenTag!=6)
    1434:	80 91 76 01 	lds	r24, 0x0176
    1438:	88 23       	and	r24, r24
    143a:	a9 f0       	breq	.+42     	; 0x1466 <main+0x108>
    143c:	86 30       	cpi	r24, 0x06	; 6
    143e:	99 f0       	breq	.+38     	; 0x1466 <main+0x108>
			{
				if(Stunden==WStunden[0]){
    1440:	f8 01       	movw	r30, r16
    1442:	90 81       	ld	r25, Z
    1444:	80 91 77 01 	lds	r24, 0x0177
    1448:	98 13       	cpse	r25, r24
    144a:	1e c0       	rjmp	.+60     	; 0x1488 <main+0x12a>
					if(Minuten==WMinuten[0]+1){
    144c:	20 91 78 01 	lds	r18, 0x0178
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	f6 01       	movw	r30, r12
    1454:	80 81       	ld	r24, Z
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	a1 f4       	brne	.+40     	; 0x1488 <main+0x12a>
						Wan = 0;
    1460:	10 92 69 01 	sts	0x0169, r1
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <main+0x12a>
					}
				}
			}
			else
			{
				if(Stunden==WStunden[1]){
    1466:	98 81       	ld	r25, Y
    1468:	80 91 77 01 	lds	r24, 0x0177
    146c:	98 13       	cpse	r25, r24
    146e:	0c c0       	rjmp	.+24     	; 0x1488 <main+0x12a>
					if(Minuten==WMinuten[1]+1){
    1470:	20 91 78 01 	lds	r18, 0x0178
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	f7 01       	movw	r30, r14
    1478:	80 81       	ld	r24, Z
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	11 f4       	brne	.+4      	; 0x1488 <main+0x12a>
						Wan = 0;
    1484:	10 92 69 01 	sts	0x0169, r1

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    1488:	84 99       	sbic	0x10, 4	; 16
    148a:	33 c0       	rjmp	.+102    	; 0x14f2 <main+0x194>
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	93 eb       	ldi	r25, 0xB3	; 179
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <main+0x132>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <main+0x138>
    1496:	00 00       	nop
    1498:	ef ef       	ldi	r30, 0xFF	; 255
    149a:	f3 e2       	ldi	r31, 0x23	; 35
    149c:	31 97       	sbiw	r30, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <main+0x13e>
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <main+0x144>
    14a2:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    14a4:	84 9b       	sbis	0x10, 4	; 16
    14a6:	25 c0       	rjmp	.+74     	; 0x14f2 <main+0x194>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	93 eb       	ldi	r25, 0xB3	; 179
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <main+0x14e>
    14b0:	00 c0       	rjmp	.+0      	; 0x14b2 <main+0x154>
    14b2:	00 00       	nop
    14b4:	ef ef       	ldi	r30, 0xFF	; 255
    14b6:	f3 e2       	ldi	r31, 0x23	; 35
    14b8:	31 97       	sbiw	r30, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <main+0x15a>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <main+0x160>
    14be:	00 00       	nop
			}
		}
		//Display einschalten bzw. das menue oeffnen
		if (debounce(&PIND,PD4))
		{
			displayoff=0;
    14c0:	10 92 4e 01 	sts	0x014E, r1
			if (!displaystat)
    14c4:	80 91 60 00 	lds	r24, 0x0060
    14c8:	81 11       	cpse	r24, r1
    14ca:	0c c0       	rjmp	.+24     	; 0x14e4 <main+0x186>
			{
				PORTC |= (1<<PC2); //display einsschalten und neue anzeige starten
    14cc:	aa 9a       	sbi	0x15, 2	; 21
				lcd_init();
    14ce:	80 d6       	rcall	.+3328   	; 0x21d0 <__data_load_end+0x22c>
				aus(1,3);
    14d0:	63 e0       	ldi	r22, 0x03	; 3
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	83 d8       	rcall	.-3834   	; 0x5dc <_Z3aushh>
				aus(2,1);
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	80 d8       	rcall	.-3840   	; 0x5dc <_Z3aushh>
				displaystat=true;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	80 93 60 00 	sts	0x0060, r24
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <main+0x194>
			}
			else
			{
				menu();
    14e4:	84 db       	rcall	.-2296   	; 0xbee <_Z4menuv>
				aus(1,3);	//Ausgabe des Display starten
    14e6:	63 e0       	ldi	r22, 0x03	; 3
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	78 d8       	rcall	.-3856   	; 0x5dc <_Z3aushh>
				aus(2,1);
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	75 d8       	rcall	.-3862   	; 0x5dc <_Z3aushh>

#endif /* DEFINITIONEN_H_ */

inline uint8_t debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    14f2:	83 99       	sbic	0x10, 3	; 16
    14f4:	45 cf       	rjmp	.-374    	; 0x1380 <main+0x22>
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	93 eb       	ldi	r25, 0xB3	; 179
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <main+0x19c>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <main+0x1a2>
    1500:	00 00       	nop
    1502:	ef ef       	ldi	r30, 0xFF	; 255
    1504:	f3 e2       	ldi	r31, 0x23	; 35
    1506:	31 97       	sbiw	r30, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <main+0x1a8>
    150a:	00 c0       	rjmp	.+0      	; 0x150c <main+0x1ae>
    150c:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(50);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if ( (*port & (1 << pin)) )
    150e:	83 9b       	sbis	0x10, 3	; 16
    1510:	37 cf       	rjmp	.-402    	; 0x1380 <main+0x22>
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	93 eb       	ldi	r25, 0xB3	; 179
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <main+0x1b8>
    151a:	00 c0       	rjmp	.+0      	; 0x151c <main+0x1be>
    151c:	00 00       	nop
    151e:	ef ef       	ldi	r30, 0xFF	; 255
    1520:	f3 e2       	ldi	r31, 0x23	; 35
    1522:	31 97       	sbiw	r30, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <main+0x1c4>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <main+0x1ca>
    1528:	00 00       	nop
			
		}
		//Taster fuer die Pos pruefen, um die Lampen einzuschalten
		if (debounce(&PIND,PD3))
		{
			displayoff=0;
    152a:	10 92 4e 01 	sts	0x014E, r1
			switch (lampenstaerke)
    152e:	80 91 61 00 	lds	r24, 0x0061
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	69 f0       	breq	.+26     	; 0x1550 <main+0x1f2>
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	99 f0       	breq	.+38     	; 0x1560 <main+0x202>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	09 f0       	breq	.+2      	; 0x1540 <main+0x1e2>
    153e:	20 cf       	rjmp	.-448    	; 0x1380 <main+0x22>
			{
				case 1:
				if ( PORTC & (1<<PC5) )
    1540:	ad 9b       	sbis	0x15, 5	; 21
    1542:	03 c0       	rjmp	.+6      	; 0x154a <main+0x1ec>
				{
					lichteinaus(0);	//Licht aus, wenn Licht an
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	aa d6       	rcall	.+3412   	; 0x229c <__data_load_end+0x2f8>
    1548:	1b cf       	rjmp	.-458    	; 0x1380 <main+0x22>
				}
				else
				{
					lichteinaus(1); //nur erste Lampe
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	a7 d6       	rcall	.+3406   	; 0x229c <__data_load_end+0x2f8>
    154e:	18 cf       	rjmp	.-464    	; 0x1380 <main+0x22>
				}
					break;
					
				case 2:
				if ( PORTC & (1<<PC5) )
    1550:	ad 9b       	sbis	0x15, 5	; 21
    1552:	03 c0       	rjmp	.+6      	; 0x155a <main+0x1fc>
				{
					lichteinaus(0);	//Licht aus, wenn Licht an
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	a2 d6       	rcall	.+3396   	; 0x229c <__data_load_end+0x2f8>
    1558:	13 cf       	rjmp	.-474    	; 0x1380 <main+0x22>
				}
				else
				{
					lichteinaus(5); //nur erste Lampe
    155a:	85 e0       	ldi	r24, 0x05	; 5
    155c:	9f d6       	rcall	.+3390   	; 0x229c <__data_load_end+0x2f8>
    155e:	10 cf       	rjmp	.-480    	; 0x1380 <main+0x22>
				}
					break;
					
				case 3:
				if ( PORTC & (1<<PC5) )
    1560:	ad 9b       	sbis	0x15, 5	; 21
    1562:	03 c0       	rjmp	.+6      	; 0x156a <main+0x20c>
				{
					lichteinaus(0);	//Licht aus, wenn Licht an
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	9a d6       	rcall	.+3380   	; 0x229c <__data_load_end+0x2f8>
    1568:	0b cf       	rjmp	.-490    	; 0x1380 <main+0x22>
				}
				else
				{
					lichteinaus(4); //nur erste Lampe
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	97 d6       	rcall	.+3374   	; 0x229c <__data_load_end+0x2f8>
    156e:	08 cf       	rjmp	.-496    	; 0x1380 <main+0x22>

00001570 <__subsf3>:
    1570:	50 58       	subi	r21, 0x80	; 128

00001572 <__addsf3>:
    1572:	bb 27       	eor	r27, r27
    1574:	aa 27       	eor	r26, r26
    1576:	0e d0       	rcall	.+28     	; 0x1594 <__addsf3x>
    1578:	48 c1       	rjmp	.+656    	; 0x180a <__fp_round>
    157a:	39 d1       	rcall	.+626    	; 0x17ee <__fp_pscA>
    157c:	30 f0       	brcs	.+12     	; 0x158a <__addsf3+0x18>
    157e:	3e d1       	rcall	.+636    	; 0x17fc <__fp_pscB>
    1580:	20 f0       	brcs	.+8      	; 0x158a <__addsf3+0x18>
    1582:	31 f4       	brne	.+12     	; 0x1590 <__addsf3+0x1e>
    1584:	9f 3f       	cpi	r25, 0xFF	; 255
    1586:	11 f4       	brne	.+4      	; 0x158c <__addsf3+0x1a>
    1588:	1e f4       	brtc	.+6      	; 0x1590 <__addsf3+0x1e>
    158a:	2e c1       	rjmp	.+604    	; 0x17e8 <__fp_nan>
    158c:	0e f4       	brtc	.+2      	; 0x1590 <__addsf3+0x1e>
    158e:	e0 95       	com	r30
    1590:	e7 fb       	bst	r30, 7
    1592:	24 c1       	rjmp	.+584    	; 0x17dc <__fp_inf>

00001594 <__addsf3x>:
    1594:	e9 2f       	mov	r30, r25
    1596:	4a d1       	rcall	.+660    	; 0x182c <__fp_split3>
    1598:	80 f3       	brcs	.-32     	; 0x157a <__addsf3+0x8>
    159a:	ba 17       	cp	r27, r26
    159c:	62 07       	cpc	r22, r18
    159e:	73 07       	cpc	r23, r19
    15a0:	84 07       	cpc	r24, r20
    15a2:	95 07       	cpc	r25, r21
    15a4:	18 f0       	brcs	.+6      	; 0x15ac <__addsf3x+0x18>
    15a6:	71 f4       	brne	.+28     	; 0x15c4 <__addsf3x+0x30>
    15a8:	9e f5       	brtc	.+102    	; 0x1610 <__addsf3x+0x7c>
    15aa:	62 c1       	rjmp	.+708    	; 0x1870 <__fp_zero>
    15ac:	0e f4       	brtc	.+2      	; 0x15b0 <__addsf3x+0x1c>
    15ae:	e0 95       	com	r30
    15b0:	0b 2e       	mov	r0, r27
    15b2:	ba 2f       	mov	r27, r26
    15b4:	a0 2d       	mov	r26, r0
    15b6:	0b 01       	movw	r0, r22
    15b8:	b9 01       	movw	r22, r18
    15ba:	90 01       	movw	r18, r0
    15bc:	0c 01       	movw	r0, r24
    15be:	ca 01       	movw	r24, r20
    15c0:	a0 01       	movw	r20, r0
    15c2:	11 24       	eor	r1, r1
    15c4:	ff 27       	eor	r31, r31
    15c6:	59 1b       	sub	r21, r25
    15c8:	99 f0       	breq	.+38     	; 0x15f0 <__addsf3x+0x5c>
    15ca:	59 3f       	cpi	r21, 0xF9	; 249
    15cc:	50 f4       	brcc	.+20     	; 0x15e2 <__addsf3x+0x4e>
    15ce:	50 3e       	cpi	r21, 0xE0	; 224
    15d0:	68 f1       	brcs	.+90     	; 0x162c <__addsf3x+0x98>
    15d2:	1a 16       	cp	r1, r26
    15d4:	f0 40       	sbci	r31, 0x00	; 0
    15d6:	a2 2f       	mov	r26, r18
    15d8:	23 2f       	mov	r18, r19
    15da:	34 2f       	mov	r19, r20
    15dc:	44 27       	eor	r20, r20
    15de:	58 5f       	subi	r21, 0xF8	; 248
    15e0:	f3 cf       	rjmp	.-26     	; 0x15c8 <__addsf3x+0x34>
    15e2:	46 95       	lsr	r20
    15e4:	37 95       	ror	r19
    15e6:	27 95       	ror	r18
    15e8:	a7 95       	ror	r26
    15ea:	f0 40       	sbci	r31, 0x00	; 0
    15ec:	53 95       	inc	r21
    15ee:	c9 f7       	brne	.-14     	; 0x15e2 <__addsf3x+0x4e>
    15f0:	7e f4       	brtc	.+30     	; 0x1610 <__addsf3x+0x7c>
    15f2:	1f 16       	cp	r1, r31
    15f4:	ba 0b       	sbc	r27, r26
    15f6:	62 0b       	sbc	r22, r18
    15f8:	73 0b       	sbc	r23, r19
    15fa:	84 0b       	sbc	r24, r20
    15fc:	ba f0       	brmi	.+46     	; 0x162c <__addsf3x+0x98>
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	a1 f0       	breq	.+40     	; 0x162a <__addsf3x+0x96>
    1602:	ff 0f       	add	r31, r31
    1604:	bb 1f       	adc	r27, r27
    1606:	66 1f       	adc	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	88 1f       	adc	r24, r24
    160c:	c2 f7       	brpl	.-16     	; 0x15fe <__addsf3x+0x6a>
    160e:	0e c0       	rjmp	.+28     	; 0x162c <__addsf3x+0x98>
    1610:	ba 0f       	add	r27, r26
    1612:	62 1f       	adc	r22, r18
    1614:	73 1f       	adc	r23, r19
    1616:	84 1f       	adc	r24, r20
    1618:	48 f4       	brcc	.+18     	; 0x162c <__addsf3x+0x98>
    161a:	87 95       	ror	r24
    161c:	77 95       	ror	r23
    161e:	67 95       	ror	r22
    1620:	b7 95       	ror	r27
    1622:	f7 95       	ror	r31
    1624:	9e 3f       	cpi	r25, 0xFE	; 254
    1626:	08 f0       	brcs	.+2      	; 0x162a <__addsf3x+0x96>
    1628:	b3 cf       	rjmp	.-154    	; 0x1590 <__addsf3+0x1e>
    162a:	93 95       	inc	r25
    162c:	88 0f       	add	r24, r24
    162e:	08 f0       	brcs	.+2      	; 0x1632 <__addsf3x+0x9e>
    1630:	99 27       	eor	r25, r25
    1632:	ee 0f       	add	r30, r30
    1634:	97 95       	ror	r25
    1636:	87 95       	ror	r24
    1638:	08 95       	ret

0000163a <__divsf3>:
    163a:	0c d0       	rcall	.+24     	; 0x1654 <__divsf3x>
    163c:	e6 c0       	rjmp	.+460    	; 0x180a <__fp_round>
    163e:	de d0       	rcall	.+444    	; 0x17fc <__fp_pscB>
    1640:	40 f0       	brcs	.+16     	; 0x1652 <__divsf3+0x18>
    1642:	d5 d0       	rcall	.+426    	; 0x17ee <__fp_pscA>
    1644:	30 f0       	brcs	.+12     	; 0x1652 <__divsf3+0x18>
    1646:	21 f4       	brne	.+8      	; 0x1650 <__divsf3+0x16>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	19 f0       	breq	.+6      	; 0x1652 <__divsf3+0x18>
    164c:	c7 c0       	rjmp	.+398    	; 0x17dc <__fp_inf>
    164e:	51 11       	cpse	r21, r1
    1650:	10 c1       	rjmp	.+544    	; 0x1872 <__fp_szero>
    1652:	ca c0       	rjmp	.+404    	; 0x17e8 <__fp_nan>

00001654 <__divsf3x>:
    1654:	eb d0       	rcall	.+470    	; 0x182c <__fp_split3>
    1656:	98 f3       	brcs	.-26     	; 0x163e <__divsf3+0x4>

00001658 <__divsf3_pse>:
    1658:	99 23       	and	r25, r25
    165a:	c9 f3       	breq	.-14     	; 0x164e <__divsf3+0x14>
    165c:	55 23       	and	r21, r21
    165e:	b1 f3       	breq	.-20     	; 0x164c <__divsf3+0x12>
    1660:	95 1b       	sub	r25, r21
    1662:	55 0b       	sbc	r21, r21
    1664:	bb 27       	eor	r27, r27
    1666:	aa 27       	eor	r26, r26
    1668:	62 17       	cp	r22, r18
    166a:	73 07       	cpc	r23, r19
    166c:	84 07       	cpc	r24, r20
    166e:	38 f0       	brcs	.+14     	; 0x167e <__divsf3_pse+0x26>
    1670:	9f 5f       	subi	r25, 0xFF	; 255
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	44 1f       	adc	r20, r20
    167a:	aa 1f       	adc	r26, r26
    167c:	a9 f3       	breq	.-22     	; 0x1668 <__divsf3_pse+0x10>
    167e:	33 d0       	rcall	.+102    	; 0x16e6 <__divsf3_pse+0x8e>
    1680:	0e 2e       	mov	r0, r30
    1682:	3a f0       	brmi	.+14     	; 0x1692 <__divsf3_pse+0x3a>
    1684:	e0 e8       	ldi	r30, 0x80	; 128
    1686:	30 d0       	rcall	.+96     	; 0x16e8 <__divsf3_pse+0x90>
    1688:	91 50       	subi	r25, 0x01	; 1
    168a:	50 40       	sbci	r21, 0x00	; 0
    168c:	e6 95       	lsr	r30
    168e:	00 1c       	adc	r0, r0
    1690:	ca f7       	brpl	.-14     	; 0x1684 <__divsf3_pse+0x2c>
    1692:	29 d0       	rcall	.+82     	; 0x16e6 <__divsf3_pse+0x8e>
    1694:	fe 2f       	mov	r31, r30
    1696:	27 d0       	rcall	.+78     	; 0x16e6 <__divsf3_pse+0x8e>
    1698:	66 0f       	add	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	bb 1f       	adc	r27, r27
    16a0:	26 17       	cp	r18, r22
    16a2:	37 07       	cpc	r19, r23
    16a4:	48 07       	cpc	r20, r24
    16a6:	ab 07       	cpc	r26, r27
    16a8:	b0 e8       	ldi	r27, 0x80	; 128
    16aa:	09 f0       	breq	.+2      	; 0x16ae <__divsf3_pse+0x56>
    16ac:	bb 0b       	sbc	r27, r27
    16ae:	80 2d       	mov	r24, r0
    16b0:	bf 01       	movw	r22, r30
    16b2:	ff 27       	eor	r31, r31
    16b4:	93 58       	subi	r25, 0x83	; 131
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	2a f0       	brmi	.+10     	; 0x16c4 <__divsf3_pse+0x6c>
    16ba:	9e 3f       	cpi	r25, 0xFE	; 254
    16bc:	51 05       	cpc	r21, r1
    16be:	68 f0       	brcs	.+26     	; 0x16da <__divsf3_pse+0x82>
    16c0:	8d c0       	rjmp	.+282    	; 0x17dc <__fp_inf>
    16c2:	d7 c0       	rjmp	.+430    	; 0x1872 <__fp_szero>
    16c4:	5f 3f       	cpi	r21, 0xFF	; 255
    16c6:	ec f3       	brlt	.-6      	; 0x16c2 <__divsf3_pse+0x6a>
    16c8:	98 3e       	cpi	r25, 0xE8	; 232
    16ca:	dc f3       	brlt	.-10     	; 0x16c2 <__divsf3_pse+0x6a>
    16cc:	86 95       	lsr	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	b7 95       	ror	r27
    16d4:	f7 95       	ror	r31
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__divsf3_pse+0x74>
    16da:	88 0f       	add	r24, r24
    16dc:	91 1d       	adc	r25, r1
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	97 f9       	bld	r25, 7
    16e4:	08 95       	ret
    16e6:	e1 e0       	ldi	r30, 0x01	; 1
    16e8:	66 0f       	add	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	bb 1f       	adc	r27, r27
    16f0:	62 17       	cp	r22, r18
    16f2:	73 07       	cpc	r23, r19
    16f4:	84 07       	cpc	r24, r20
    16f6:	ba 07       	cpc	r27, r26
    16f8:	20 f0       	brcs	.+8      	; 0x1702 <__divsf3_pse+0xaa>
    16fa:	62 1b       	sub	r22, r18
    16fc:	73 0b       	sbc	r23, r19
    16fe:	84 0b       	sbc	r24, r20
    1700:	ba 0b       	sbc	r27, r26
    1702:	ee 1f       	adc	r30, r30
    1704:	88 f7       	brcc	.-30     	; 0x16e8 <__divsf3_pse+0x90>
    1706:	e0 95       	com	r30
    1708:	08 95       	ret

0000170a <__fixunssfsi>:
    170a:	98 d0       	rcall	.+304    	; 0x183c <__fp_splitA>
    170c:	88 f0       	brcs	.+34     	; 0x1730 <__fixunssfsi+0x26>
    170e:	9f 57       	subi	r25, 0x7F	; 127
    1710:	90 f0       	brcs	.+36     	; 0x1736 <__fixunssfsi+0x2c>
    1712:	b9 2f       	mov	r27, r25
    1714:	99 27       	eor	r25, r25
    1716:	b7 51       	subi	r27, 0x17	; 23
    1718:	a0 f0       	brcs	.+40     	; 0x1742 <__fixunssfsi+0x38>
    171a:	d1 f0       	breq	.+52     	; 0x1750 <__fixunssfsi+0x46>
    171c:	66 0f       	add	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	1a f0       	brmi	.+6      	; 0x172c <__fixunssfsi+0x22>
    1726:	ba 95       	dec	r27
    1728:	c9 f7       	brne	.-14     	; 0x171c <__fixunssfsi+0x12>
    172a:	12 c0       	rjmp	.+36     	; 0x1750 <__fixunssfsi+0x46>
    172c:	b1 30       	cpi	r27, 0x01	; 1
    172e:	81 f0       	breq	.+32     	; 0x1750 <__fixunssfsi+0x46>
    1730:	9f d0       	rcall	.+318    	; 0x1870 <__fp_zero>
    1732:	b1 e0       	ldi	r27, 0x01	; 1
    1734:	08 95       	ret
    1736:	9c c0       	rjmp	.+312    	; 0x1870 <__fp_zero>
    1738:	67 2f       	mov	r22, r23
    173a:	78 2f       	mov	r23, r24
    173c:	88 27       	eor	r24, r24
    173e:	b8 5f       	subi	r27, 0xF8	; 248
    1740:	39 f0       	breq	.+14     	; 0x1750 <__fixunssfsi+0x46>
    1742:	b9 3f       	cpi	r27, 0xF9	; 249
    1744:	cc f3       	brlt	.-14     	; 0x1738 <__fixunssfsi+0x2e>
    1746:	86 95       	lsr	r24
    1748:	77 95       	ror	r23
    174a:	67 95       	ror	r22
    174c:	b3 95       	inc	r27
    174e:	d9 f7       	brne	.-10     	; 0x1746 <__fixunssfsi+0x3c>
    1750:	3e f4       	brtc	.+14     	; 0x1760 <__fixunssfsi+0x56>
    1752:	90 95       	com	r25
    1754:	80 95       	com	r24
    1756:	70 95       	com	r23
    1758:	61 95       	neg	r22
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	08 95       	ret

00001762 <__floatunsisf>:
    1762:	e8 94       	clt
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <__floatsisf+0x12>

00001766 <__floatsisf>:
    1766:	97 fb       	bst	r25, 7
    1768:	3e f4       	brtc	.+14     	; 0x1778 <__floatsisf+0x12>
    176a:	90 95       	com	r25
    176c:	80 95       	com	r24
    176e:	70 95       	com	r23
    1770:	61 95       	neg	r22
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	99 23       	and	r25, r25
    177a:	a9 f0       	breq	.+42     	; 0x17a6 <__floatsisf+0x40>
    177c:	f9 2f       	mov	r31, r25
    177e:	96 e9       	ldi	r25, 0x96	; 150
    1780:	bb 27       	eor	r27, r27
    1782:	93 95       	inc	r25
    1784:	f6 95       	lsr	r31
    1786:	87 95       	ror	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	b7 95       	ror	r27
    178e:	f1 11       	cpse	r31, r1
    1790:	f8 cf       	rjmp	.-16     	; 0x1782 <__floatsisf+0x1c>
    1792:	fa f4       	brpl	.+62     	; 0x17d2 <__floatsisf+0x6c>
    1794:	bb 0f       	add	r27, r27
    1796:	11 f4       	brne	.+4      	; 0x179c <__floatsisf+0x36>
    1798:	60 ff       	sbrs	r22, 0
    179a:	1b c0       	rjmp	.+54     	; 0x17d2 <__floatsisf+0x6c>
    179c:	6f 5f       	subi	r22, 0xFF	; 255
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	8f 4f       	sbci	r24, 0xFF	; 255
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	16 c0       	rjmp	.+44     	; 0x17d2 <__floatsisf+0x6c>
    17a6:	88 23       	and	r24, r24
    17a8:	11 f0       	breq	.+4      	; 0x17ae <__floatsisf+0x48>
    17aa:	96 e9       	ldi	r25, 0x96	; 150
    17ac:	11 c0       	rjmp	.+34     	; 0x17d0 <__floatsisf+0x6a>
    17ae:	77 23       	and	r23, r23
    17b0:	21 f0       	breq	.+8      	; 0x17ba <__floatsisf+0x54>
    17b2:	9e e8       	ldi	r25, 0x8E	; 142
    17b4:	87 2f       	mov	r24, r23
    17b6:	76 2f       	mov	r23, r22
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <__floatsisf+0x5e>
    17ba:	66 23       	and	r22, r22
    17bc:	71 f0       	breq	.+28     	; 0x17da <__floatsisf+0x74>
    17be:	96 e8       	ldi	r25, 0x86	; 134
    17c0:	86 2f       	mov	r24, r22
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	2a f0       	brmi	.+10     	; 0x17d2 <__floatsisf+0x6c>
    17c8:	9a 95       	dec	r25
    17ca:	66 0f       	add	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	da f7       	brpl	.-10     	; 0x17c8 <__floatsisf+0x62>
    17d2:	88 0f       	add	r24, r24
    17d4:	96 95       	lsr	r25
    17d6:	87 95       	ror	r24
    17d8:	97 f9       	bld	r25, 7
    17da:	08 95       	ret

000017dc <__fp_inf>:
    17dc:	97 f9       	bld	r25, 7
    17de:	9f 67       	ori	r25, 0x7F	; 127
    17e0:	80 e8       	ldi	r24, 0x80	; 128
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	08 95       	ret

000017e8 <__fp_nan>:
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
    17ea:	80 ec       	ldi	r24, 0xC0	; 192
    17ec:	08 95       	ret

000017ee <__fp_pscA>:
    17ee:	00 24       	eor	r0, r0
    17f0:	0a 94       	dec	r0
    17f2:	16 16       	cp	r1, r22
    17f4:	17 06       	cpc	r1, r23
    17f6:	18 06       	cpc	r1, r24
    17f8:	09 06       	cpc	r0, r25
    17fa:	08 95       	ret

000017fc <__fp_pscB>:
    17fc:	00 24       	eor	r0, r0
    17fe:	0a 94       	dec	r0
    1800:	12 16       	cp	r1, r18
    1802:	13 06       	cpc	r1, r19
    1804:	14 06       	cpc	r1, r20
    1806:	05 06       	cpc	r0, r21
    1808:	08 95       	ret

0000180a <__fp_round>:
    180a:	09 2e       	mov	r0, r25
    180c:	03 94       	inc	r0
    180e:	00 0c       	add	r0, r0
    1810:	11 f4       	brne	.+4      	; 0x1816 <__fp_round+0xc>
    1812:	88 23       	and	r24, r24
    1814:	52 f0       	brmi	.+20     	; 0x182a <__fp_round+0x20>
    1816:	bb 0f       	add	r27, r27
    1818:	40 f4       	brcc	.+16     	; 0x182a <__fp_round+0x20>
    181a:	bf 2b       	or	r27, r31
    181c:	11 f4       	brne	.+4      	; 0x1822 <__fp_round+0x18>
    181e:	60 ff       	sbrs	r22, 0
    1820:	04 c0       	rjmp	.+8      	; 0x182a <__fp_round+0x20>
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	08 95       	ret

0000182c <__fp_split3>:
    182c:	57 fd       	sbrc	r21, 7
    182e:	90 58       	subi	r25, 0x80	; 128
    1830:	44 0f       	add	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	59 f0       	breq	.+22     	; 0x184c <__fp_splitA+0x10>
    1836:	5f 3f       	cpi	r21, 0xFF	; 255
    1838:	71 f0       	breq	.+28     	; 0x1856 <__fp_splitA+0x1a>
    183a:	47 95       	ror	r20

0000183c <__fp_splitA>:
    183c:	88 0f       	add	r24, r24
    183e:	97 fb       	bst	r25, 7
    1840:	99 1f       	adc	r25, r25
    1842:	61 f0       	breq	.+24     	; 0x185c <__fp_splitA+0x20>
    1844:	9f 3f       	cpi	r25, 0xFF	; 255
    1846:	79 f0       	breq	.+30     	; 0x1866 <__fp_splitA+0x2a>
    1848:	87 95       	ror	r24
    184a:	08 95       	ret
    184c:	12 16       	cp	r1, r18
    184e:	13 06       	cpc	r1, r19
    1850:	14 06       	cpc	r1, r20
    1852:	55 1f       	adc	r21, r21
    1854:	f2 cf       	rjmp	.-28     	; 0x183a <__fp_split3+0xe>
    1856:	46 95       	lsr	r20
    1858:	f1 df       	rcall	.-30     	; 0x183c <__fp_splitA>
    185a:	08 c0       	rjmp	.+16     	; 0x186c <__fp_splitA+0x30>
    185c:	16 16       	cp	r1, r22
    185e:	17 06       	cpc	r1, r23
    1860:	18 06       	cpc	r1, r24
    1862:	99 1f       	adc	r25, r25
    1864:	f1 cf       	rjmp	.-30     	; 0x1848 <__fp_splitA+0xc>
    1866:	86 95       	lsr	r24
    1868:	71 05       	cpc	r23, r1
    186a:	61 05       	cpc	r22, r1
    186c:	08 94       	sec
    186e:	08 95       	ret

00001870 <__fp_zero>:
    1870:	e8 94       	clt

00001872 <__fp_szero>:
    1872:	bb 27       	eor	r27, r27
    1874:	66 27       	eor	r22, r22
    1876:	77 27       	eor	r23, r23
    1878:	cb 01       	movw	r24, r22
    187a:	97 f9       	bld	r25, 7
    187c:	08 95       	ret

0000187e <__mulsf3>:
    187e:	0b d0       	rcall	.+22     	; 0x1896 <__mulsf3x>
    1880:	c4 cf       	rjmp	.-120    	; 0x180a <__fp_round>
    1882:	b5 df       	rcall	.-150    	; 0x17ee <__fp_pscA>
    1884:	28 f0       	brcs	.+10     	; 0x1890 <__mulsf3+0x12>
    1886:	ba df       	rcall	.-140    	; 0x17fc <__fp_pscB>
    1888:	18 f0       	brcs	.+6      	; 0x1890 <__mulsf3+0x12>
    188a:	95 23       	and	r25, r21
    188c:	09 f0       	breq	.+2      	; 0x1890 <__mulsf3+0x12>
    188e:	a6 cf       	rjmp	.-180    	; 0x17dc <__fp_inf>
    1890:	ab cf       	rjmp	.-170    	; 0x17e8 <__fp_nan>
    1892:	11 24       	eor	r1, r1
    1894:	ee cf       	rjmp	.-36     	; 0x1872 <__fp_szero>

00001896 <__mulsf3x>:
    1896:	ca df       	rcall	.-108    	; 0x182c <__fp_split3>
    1898:	a0 f3       	brcs	.-24     	; 0x1882 <__mulsf3+0x4>

0000189a <__mulsf3_pse>:
    189a:	95 9f       	mul	r25, r21
    189c:	d1 f3       	breq	.-12     	; 0x1892 <__mulsf3+0x14>
    189e:	95 0f       	add	r25, r21
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	55 1f       	adc	r21, r21
    18a4:	62 9f       	mul	r22, r18
    18a6:	f0 01       	movw	r30, r0
    18a8:	72 9f       	mul	r23, r18
    18aa:	bb 27       	eor	r27, r27
    18ac:	f0 0d       	add	r31, r0
    18ae:	b1 1d       	adc	r27, r1
    18b0:	63 9f       	mul	r22, r19
    18b2:	aa 27       	eor	r26, r26
    18b4:	f0 0d       	add	r31, r0
    18b6:	b1 1d       	adc	r27, r1
    18b8:	aa 1f       	adc	r26, r26
    18ba:	64 9f       	mul	r22, r20
    18bc:	66 27       	eor	r22, r22
    18be:	b0 0d       	add	r27, r0
    18c0:	a1 1d       	adc	r26, r1
    18c2:	66 1f       	adc	r22, r22
    18c4:	82 9f       	mul	r24, r18
    18c6:	22 27       	eor	r18, r18
    18c8:	b0 0d       	add	r27, r0
    18ca:	a1 1d       	adc	r26, r1
    18cc:	62 1f       	adc	r22, r18
    18ce:	73 9f       	mul	r23, r19
    18d0:	b0 0d       	add	r27, r0
    18d2:	a1 1d       	adc	r26, r1
    18d4:	62 1f       	adc	r22, r18
    18d6:	83 9f       	mul	r24, r19
    18d8:	a0 0d       	add	r26, r0
    18da:	61 1d       	adc	r22, r1
    18dc:	22 1f       	adc	r18, r18
    18de:	74 9f       	mul	r23, r20
    18e0:	33 27       	eor	r19, r19
    18e2:	a0 0d       	add	r26, r0
    18e4:	61 1d       	adc	r22, r1
    18e6:	23 1f       	adc	r18, r19
    18e8:	84 9f       	mul	r24, r20
    18ea:	60 0d       	add	r22, r0
    18ec:	21 1d       	adc	r18, r1
    18ee:	82 2f       	mov	r24, r18
    18f0:	76 2f       	mov	r23, r22
    18f2:	6a 2f       	mov	r22, r26
    18f4:	11 24       	eor	r1, r1
    18f6:	9f 57       	subi	r25, 0x7F	; 127
    18f8:	50 40       	sbci	r21, 0x00	; 0
    18fa:	8a f0       	brmi	.+34     	; 0x191e <__mulsf3_pse+0x84>
    18fc:	e1 f0       	breq	.+56     	; 0x1936 <__mulsf3_pse+0x9c>
    18fe:	88 23       	and	r24, r24
    1900:	4a f0       	brmi	.+18     	; 0x1914 <__mulsf3_pse+0x7a>
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	bb 1f       	adc	r27, r27
    1908:	66 1f       	adc	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	91 50       	subi	r25, 0x01	; 1
    1910:	50 40       	sbci	r21, 0x00	; 0
    1912:	a9 f7       	brne	.-22     	; 0x18fe <__mulsf3_pse+0x64>
    1914:	9e 3f       	cpi	r25, 0xFE	; 254
    1916:	51 05       	cpc	r21, r1
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__mulsf3_pse+0x9c>
    191a:	60 cf       	rjmp	.-320    	; 0x17dc <__fp_inf>
    191c:	aa cf       	rjmp	.-172    	; 0x1872 <__fp_szero>
    191e:	5f 3f       	cpi	r21, 0xFF	; 255
    1920:	ec f3       	brlt	.-6      	; 0x191c <__mulsf3_pse+0x82>
    1922:	98 3e       	cpi	r25, 0xE8	; 232
    1924:	dc f3       	brlt	.-10     	; 0x191c <__mulsf3_pse+0x82>
    1926:	86 95       	lsr	r24
    1928:	77 95       	ror	r23
    192a:	67 95       	ror	r22
    192c:	b7 95       	ror	r27
    192e:	f7 95       	ror	r31
    1930:	e7 95       	ror	r30
    1932:	9f 5f       	subi	r25, 0xFF	; 255
    1934:	c1 f7       	brne	.-16     	; 0x1926 <__mulsf3_pse+0x8c>
    1936:	fe 2b       	or	r31, r30
    1938:	88 0f       	add	r24, r24
    193a:	91 1d       	adc	r25, r1
    193c:	96 95       	lsr	r25
    193e:	87 95       	ror	r24
    1940:	97 f9       	bld	r25, 7
    1942:	08 95       	ret

00001944 <dtostrf>:
    1944:	ef 92       	push	r14
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	c0 2f       	mov	r28, r16
    194e:	47 ff       	sbrs	r20, 7
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <dtostrf+0x12>
    1952:	34 e1       	ldi	r19, 0x14	; 20
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <dtostrf+0x14>
    1956:	34 e0       	ldi	r19, 0x04	; 4
    1958:	e4 2f       	mov	r30, r20
    195a:	ff 27       	eor	r31, r31
    195c:	e7 fd       	sbrc	r30, 7
    195e:	f0 95       	com	r31
    1960:	f7 ff       	sbrs	r31, 7
    1962:	03 c0       	rjmp	.+6      	; 0x196a <dtostrf+0x26>
    1964:	f1 95       	neg	r31
    1966:	e1 95       	neg	r30
    1968:	f1 09       	sbc	r31, r1
    196a:	e3 2e       	mov	r14, r19
    196c:	02 2f       	mov	r16, r18
    196e:	2e 2f       	mov	r18, r30
    1970:	4c 2f       	mov	r20, r28
    1972:	51 2f       	mov	r21, r17
    1974:	26 d0       	rcall	.+76     	; 0x19c2 <dtoa_prf>
    1976:	8c 2f       	mov	r24, r28
    1978:	91 2f       	mov	r25, r17
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ef 90       	pop	r14
    1982:	08 95       	ret

00001984 <itoa>:
    1984:	fb 01       	movw	r30, r22
    1986:	9f 01       	movw	r18, r30
    1988:	e8 94       	clt
    198a:	42 30       	cpi	r20, 0x02	; 2
    198c:	bc f0       	brlt	.+46     	; 0x19bc <itoa+0x38>
    198e:	45 32       	cpi	r20, 0x25	; 37
    1990:	ac f4       	brge	.+42     	; 0x19bc <itoa+0x38>
    1992:	4a 30       	cpi	r20, 0x0A	; 10
    1994:	29 f4       	brne	.+10     	; 0x19a0 <itoa+0x1c>
    1996:	97 fb       	bst	r25, 7
    1998:	1e f4       	brtc	.+6      	; 0x19a0 <itoa+0x1c>
    199a:	90 95       	com	r25
    199c:	81 95       	neg	r24
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	64 2f       	mov	r22, r20
    19a2:	77 27       	eor	r23, r23
    19a4:	72 d2       	rcall	.+1252   	; 0x1e8a <__udivmodhi4>
    19a6:	80 5d       	subi	r24, 0xD0	; 208
    19a8:	8a 33       	cpi	r24, 0x3A	; 58
    19aa:	0c f0       	brlt	.+2      	; 0x19ae <itoa+0x2a>
    19ac:	89 5d       	subi	r24, 0xD9	; 217
    19ae:	81 93       	st	Z+, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	a9 f7       	brne	.-22     	; 0x19a0 <itoa+0x1c>
    19b6:	16 f4       	brtc	.+4      	; 0x19bc <itoa+0x38>
    19b8:	5d e2       	ldi	r21, 0x2D	; 45
    19ba:	51 93       	st	Z+, r21
    19bc:	10 82       	st	Z, r1
    19be:	c9 01       	movw	r24, r18
    19c0:	54 c2       	rjmp	.+1192   	; 0x1e6a <strrev>

000019c2 <dtoa_prf>:
    19c2:	6f 92       	push	r6
    19c4:	7f 92       	push	r7
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	29 97       	sbiw	r28, 0x09	; 9
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	6a 01       	movw	r12, r20
    19ee:	b2 2e       	mov	r11, r18
    19f0:	10 2f       	mov	r17, r16
    19f2:	0c 33       	cpi	r16, 0x3C	; 60
    19f4:	18 f4       	brcc	.+6      	; 0x19fc <dtoa_prf+0x3a>
    19f6:	f0 2e       	mov	r15, r16
    19f8:	f3 94       	inc	r15
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <dtoa_prf+0x3e>
    19fc:	5c e3       	ldi	r21, 0x3C	; 60
    19fe:	f5 2e       	mov	r15, r21
    1a00:	0f 2d       	mov	r16, r15
    1a02:	27 e0       	ldi	r18, 0x07	; 7
    1a04:	ae 01       	movw	r20, r28
    1a06:	4f 5f       	subi	r20, 0xFF	; 255
    1a08:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0a:	57 d1       	rcall	.+686    	; 0x1cba <__ftoa_engine>
    1a0c:	79 81       	ldd	r23, Y+1	; 0x01
    1a0e:	27 2f       	mov	r18, r23
    1a10:	29 70       	andi	r18, 0x09	; 9
    1a12:	21 30       	cpi	r18, 0x01	; 1
    1a14:	31 f0       	breq	.+12     	; 0x1a22 <dtoa_prf+0x60>
    1a16:	e1 fc       	sbrc	r14, 1
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <dtoa_prf+0x64>
    1a1a:	e0 fe       	sbrs	r14, 0
    1a1c:	06 c0       	rjmp	.+12     	; 0x1a2a <dtoa_prf+0x68>
    1a1e:	60 e2       	ldi	r22, 0x20	; 32
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <dtoa_prf+0x6a>
    1a22:	6d e2       	ldi	r22, 0x2D	; 45
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <dtoa_prf+0x6a>
    1a26:	6b e2       	ldi	r22, 0x2B	; 43
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <dtoa_prf+0x6a>
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	73 ff       	sbrs	r23, 3
    1a2e:	3d c0       	rjmp	.+122    	; 0x1aaa <dtoa_prf+0xe8>
    1a30:	66 23       	and	r22, r22
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <dtoa_prf+0x76>
    1a34:	84 e0       	ldi	r24, 0x04	; 4
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <dtoa_prf+0x78>
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	8b 15       	cp	r24, r11
    1a3c:	10 f4       	brcc	.+4      	; 0x1a42 <dtoa_prf+0x80>
    1a3e:	b8 1a       	sub	r11, r24
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <dtoa_prf+0x82>
    1a42:	b1 2c       	mov	r11, r1
    1a44:	e4 fc       	sbrc	r14, 4
    1a46:	0b c0       	rjmp	.+22     	; 0x1a5e <dtoa_prf+0x9c>
    1a48:	8b 2d       	mov	r24, r11
    1a4a:	f6 01       	movw	r30, r12
    1a4c:	90 e2       	ldi	r25, 0x20	; 32
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <dtoa_prf+0x92>
    1a50:	91 93       	st	Z+, r25
    1a52:	81 50       	subi	r24, 0x01	; 1
    1a54:	81 11       	cpse	r24, r1
    1a56:	fc cf       	rjmp	.-8      	; 0x1a50 <dtoa_prf+0x8e>
    1a58:	cb 0c       	add	r12, r11
    1a5a:	d1 1c       	adc	r13, r1
    1a5c:	b1 2c       	mov	r11, r1
    1a5e:	66 23       	and	r22, r22
    1a60:	19 f0       	breq	.+6      	; 0x1a68 <dtoa_prf+0xa6>
    1a62:	d6 01       	movw	r26, r12
    1a64:	6d 93       	st	X+, r22
    1a66:	6d 01       	movw	r12, r26
    1a68:	e2 fe       	sbrs	r14, 2
    1a6a:	0a c0       	rjmp	.+20     	; 0x1a80 <dtoa_prf+0xbe>
    1a6c:	8e e4       	ldi	r24, 0x4E	; 78
    1a6e:	f6 01       	movw	r30, r12
    1a70:	80 83       	st	Z, r24
    1a72:	91 e4       	ldi	r25, 0x41	; 65
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	82 83       	std	Z+2, r24	; 0x02
    1a78:	f3 e0       	ldi	r31, 0x03	; 3
    1a7a:	cf 0e       	add	r12, r31
    1a7c:	d1 1c       	adc	r13, r1
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <dtoa_prf+0xd6>
    1a80:	8e e6       	ldi	r24, 0x6E	; 110
    1a82:	d6 01       	movw	r26, r12
    1a84:	8c 93       	st	X, r24
    1a86:	91 e6       	ldi	r25, 0x61	; 97
    1a88:	11 96       	adiw	r26, 0x01	; 1
    1a8a:	9c 93       	st	X, r25
    1a8c:	11 97       	sbiw	r26, 0x01	; 1
    1a8e:	12 96       	adiw	r26, 0x02	; 2
    1a90:	8c 93       	st	X, r24
    1a92:	b3 e0       	ldi	r27, 0x03	; 3
    1a94:	cb 0e       	add	r12, r27
    1a96:	d1 1c       	adc	r13, r1
    1a98:	8b 2d       	mov	r24, r11
    1a9a:	f6 01       	movw	r30, r12
    1a9c:	90 e2       	ldi	r25, 0x20	; 32
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <dtoa_prf+0xe2>
    1aa0:	91 93       	st	Z+, r25
    1aa2:	81 50       	subi	r24, 0x01	; 1
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	fc cf       	rjmp	.-8      	; 0x1aa0 <dtoa_prf+0xde>
    1aa8:	40 c0       	rjmp	.+128    	; 0x1b2a <dtoa_prf+0x168>
    1aaa:	72 ff       	sbrs	r23, 2
    1aac:	45 c0       	rjmp	.+138    	; 0x1b38 <dtoa_prf+0x176>
    1aae:	66 23       	and	r22, r22
    1ab0:	11 f0       	breq	.+4      	; 0x1ab6 <dtoa_prf+0xf4>
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <dtoa_prf+0xf6>
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	8b 15       	cp	r24, r11
    1aba:	10 f4       	brcc	.+4      	; 0x1ac0 <dtoa_prf+0xfe>
    1abc:	b8 1a       	sub	r11, r24
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <dtoa_prf+0x100>
    1ac0:	b1 2c       	mov	r11, r1
    1ac2:	e4 fc       	sbrc	r14, 4
    1ac4:	0b c0       	rjmp	.+22     	; 0x1adc <dtoa_prf+0x11a>
    1ac6:	8b 2d       	mov	r24, r11
    1ac8:	f6 01       	movw	r30, r12
    1aca:	90 e2       	ldi	r25, 0x20	; 32
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <dtoa_prf+0x110>
    1ace:	91 93       	st	Z+, r25
    1ad0:	81 50       	subi	r24, 0x01	; 1
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	fc cf       	rjmp	.-8      	; 0x1ace <dtoa_prf+0x10c>
    1ad6:	cb 0c       	add	r12, r11
    1ad8:	d1 1c       	adc	r13, r1
    1ada:	b1 2c       	mov	r11, r1
    1adc:	66 23       	and	r22, r22
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <dtoa_prf+0x124>
    1ae0:	f6 01       	movw	r30, r12
    1ae2:	61 93       	st	Z+, r22
    1ae4:	6f 01       	movw	r12, r30
    1ae6:	e2 fe       	sbrs	r14, 2
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <dtoa_prf+0x144>
    1aea:	89 e4       	ldi	r24, 0x49	; 73
    1aec:	d6 01       	movw	r26, r12
    1aee:	8c 93       	st	X, r24
    1af0:	8e e4       	ldi	r24, 0x4E	; 78
    1af2:	11 96       	adiw	r26, 0x01	; 1
    1af4:	8c 93       	st	X, r24
    1af6:	11 97       	sbiw	r26, 0x01	; 1
    1af8:	86 e4       	ldi	r24, 0x46	; 70
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	8c 93       	st	X, r24
    1afe:	b3 e0       	ldi	r27, 0x03	; 3
    1b00:	cb 0e       	add	r12, r27
    1b02:	d1 1c       	adc	r13, r1
    1b04:	0a c0       	rjmp	.+20     	; 0x1b1a <dtoa_prf+0x158>
    1b06:	89 e6       	ldi	r24, 0x69	; 105
    1b08:	f6 01       	movw	r30, r12
    1b0a:	80 83       	st	Z, r24
    1b0c:	8e e6       	ldi	r24, 0x6E	; 110
    1b0e:	81 83       	std	Z+1, r24	; 0x01
    1b10:	86 e6       	ldi	r24, 0x66	; 102
    1b12:	82 83       	std	Z+2, r24	; 0x02
    1b14:	f3 e0       	ldi	r31, 0x03	; 3
    1b16:	cf 0e       	add	r12, r31
    1b18:	d1 1c       	adc	r13, r1
    1b1a:	8b 2d       	mov	r24, r11
    1b1c:	f6 01       	movw	r30, r12
    1b1e:	90 e2       	ldi	r25, 0x20	; 32
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <dtoa_prf+0x164>
    1b22:	91 93       	st	Z+, r25
    1b24:	81 50       	subi	r24, 0x01	; 1
    1b26:	81 11       	cpse	r24, r1
    1b28:	fc cf       	rjmp	.-8      	; 0x1b22 <dtoa_prf+0x160>
    1b2a:	f6 01       	movw	r30, r12
    1b2c:	eb 0d       	add	r30, r11
    1b2e:	f1 1d       	adc	r31, r1
    1b30:	10 82       	st	Z, r1
    1b32:	2e ef       	ldi	r18, 0xFE	; 254
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	ac c0       	rjmp	.+344    	; 0x1c90 <dtoa_prf+0x2ce>
    1b38:	a1 e0       	ldi	r26, 0x01	; 1
    1b3a:	61 11       	cpse	r22, r1
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <dtoa_prf+0x17e>
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	4a 2f       	mov	r20, r26
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	18 16       	cp	r1, r24
    1b46:	19 06       	cpc	r1, r25
    1b48:	24 f4       	brge	.+8      	; 0x1b52 <dtoa_prf+0x190>
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	2f 5f       	subi	r18, 0xFF	; 255
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <dtoa_prf+0x194>
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	24 0f       	add	r18, r20
    1b58:	35 1f       	adc	r19, r21
    1b5a:	11 23       	and	r17, r17
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <dtoa_prf+0x1a6>
    1b5e:	41 2f       	mov	r20, r17
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	4f 5f       	subi	r20, 0xFF	; 255
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <dtoa_prf+0x1aa>
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	42 0f       	add	r20, r18
    1b6e:	53 1f       	adc	r21, r19
    1b70:	2b 2d       	mov	r18, r11
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	42 17       	cp	r20, r18
    1b76:	53 07       	cpc	r21, r19
    1b78:	14 f4       	brge	.+4      	; 0x1b7e <dtoa_prf+0x1bc>
    1b7a:	b4 1a       	sub	r11, r20
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <dtoa_prf+0x1be>
    1b7e:	b1 2c       	mov	r11, r1
    1b80:	3e 2d       	mov	r19, r14
    1b82:	30 71       	andi	r19, 0x10	; 16
    1b84:	e4 fc       	sbrc	r14, 4
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <dtoa_prf+0x1e0>
    1b88:	e3 fc       	sbrc	r14, 3
    1b8a:	0b c0       	rjmp	.+22     	; 0x1ba2 <dtoa_prf+0x1e0>
    1b8c:	2b 2d       	mov	r18, r11
    1b8e:	f6 01       	movw	r30, r12
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <dtoa_prf+0x1d6>
    1b94:	41 93       	st	Z+, r20
    1b96:	21 50       	subi	r18, 0x01	; 1
    1b98:	21 11       	cpse	r18, r1
    1b9a:	fc cf       	rjmp	.-8      	; 0x1b94 <dtoa_prf+0x1d2>
    1b9c:	cb 0c       	add	r12, r11
    1b9e:	d1 1c       	adc	r13, r1
    1ba0:	b1 2c       	mov	r11, r1
    1ba2:	aa 23       	and	r26, r26
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <dtoa_prf+0x1ea>
    1ba6:	d6 01       	movw	r26, r12
    1ba8:	6d 93       	st	X+, r22
    1baa:	6d 01       	movw	r12, r26
    1bac:	31 11       	cpse	r19, r1
    1bae:	0b c0       	rjmp	.+22     	; 0x1bc6 <dtoa_prf+0x204>
    1bb0:	2b 2d       	mov	r18, r11
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	30 e3       	ldi	r19, 0x30	; 48
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <dtoa_prf+0x1fa>
    1bb8:	31 93       	st	Z+, r19
    1bba:	21 50       	subi	r18, 0x01	; 1
    1bbc:	21 11       	cpse	r18, r1
    1bbe:	fc cf       	rjmp	.-8      	; 0x1bb8 <dtoa_prf+0x1f6>
    1bc0:	cb 0c       	add	r12, r11
    1bc2:	d1 1c       	adc	r13, r1
    1bc4:	b1 2c       	mov	r11, r1
    1bc6:	f8 0e       	add	r15, r24
    1bc8:	0a 81       	ldd	r16, Y+2	; 0x02
    1bca:	40 e1       	ldi	r20, 0x10	; 16
    1bcc:	a4 2e       	mov	r10, r20
    1bce:	a7 22       	and	r10, r23
    1bd0:	74 ff       	sbrs	r23, 4
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <dtoa_prf+0x218>
    1bd4:	01 33       	cpi	r16, 0x31	; 49
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <dtoa_prf+0x218>
    1bd8:	fa 94       	dec	r15
    1bda:	1f 14       	cp	r1, r15
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <dtoa_prf+0x226>
    1bde:	2f 2d       	mov	r18, r15
    1be0:	29 30       	cpi	r18, 0x09	; 9
    1be2:	18 f0       	brcs	.+6      	; 0x1bea <dtoa_prf+0x228>
    1be4:	28 e0       	ldi	r18, 0x08	; 8
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <dtoa_prf+0x228>
    1be8:	21 e0       	ldi	r18, 0x01	; 1
    1bea:	ac 01       	movw	r20, r24
    1bec:	97 ff       	sbrs	r25, 7
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <dtoa_prf+0x232>
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	3e e2       	ldi	r19, 0x2E	; 46
    1bfa:	93 2e       	mov	r9, r19
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e2 1b       	sub	r30, r18
    1c00:	f1 09       	sbc	r31, r1
    1c02:	9f 01       	movw	r18, r30
    1c04:	dc 01       	movw	r26, r24
    1c06:	a4 1b       	sub	r26, r20
    1c08:	b5 0b       	sbc	r27, r21
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	31 96       	adiw	r30, 0x01	; 1
    1c0e:	ea 0f       	add	r30, r26
    1c10:	fb 1f       	adc	r31, r27
    1c12:	a1 2f       	mov	r26, r17
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	66 24       	eor	r6, r6
    1c18:	77 24       	eor	r7, r7
    1c1a:	6a 1a       	sub	r6, r26
    1c1c:	7b 0a       	sbc	r7, r27
    1c1e:	4f 3f       	cpi	r20, 0xFF	; 255
    1c20:	1f ef       	ldi	r17, 0xFF	; 255
    1c22:	51 07       	cpc	r21, r17
    1c24:	19 f4       	brne	.+6      	; 0x1c2c <dtoa_prf+0x26a>
    1c26:	d6 01       	movw	r26, r12
    1c28:	9d 92       	st	X+, r9
    1c2a:	6d 01       	movw	r12, r26
    1c2c:	84 17       	cp	r24, r20
    1c2e:	95 07       	cpc	r25, r21
    1c30:	54 f0       	brlt	.+20     	; 0x1c46 <dtoa_prf+0x284>
    1c32:	24 17       	cp	r18, r20
    1c34:	35 07       	cpc	r19, r21
    1c36:	3c f4       	brge	.+14     	; 0x1c46 <dtoa_prf+0x284>
    1c38:	7f 01       	movw	r14, r30
    1c3a:	e6 0e       	add	r14, r22
    1c3c:	f7 1e       	adc	r15, r23
    1c3e:	d7 01       	movw	r26, r14
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	1c 91       	ld	r17, X
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <dtoa_prf+0x286>
    1c46:	10 e3       	ldi	r17, 0x30	; 48
    1c48:	41 50       	subi	r20, 0x01	; 1
    1c4a:	51 09       	sbc	r21, r1
    1c4c:	6f 5f       	subi	r22, 0xFF	; 255
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c50:	46 15       	cp	r20, r6
    1c52:	57 05       	cpc	r21, r7
    1c54:	24 f0       	brlt	.+8      	; 0x1c5e <dtoa_prf+0x29c>
    1c56:	d6 01       	movw	r26, r12
    1c58:	1d 93       	st	X+, r17
    1c5a:	6d 01       	movw	r12, r26
    1c5c:	e0 cf       	rjmp	.-64     	; 0x1c1e <dtoa_prf+0x25c>
    1c5e:	48 17       	cp	r20, r24
    1c60:	59 07       	cpc	r21, r25
    1c62:	39 f4       	brne	.+14     	; 0x1c72 <dtoa_prf+0x2b0>
    1c64:	06 33       	cpi	r16, 0x36	; 54
    1c66:	20 f4       	brcc	.+8      	; 0x1c70 <dtoa_prf+0x2ae>
    1c68:	05 33       	cpi	r16, 0x35	; 53
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <dtoa_prf+0x2b0>
    1c6c:	a1 10       	cpse	r10, r1
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <dtoa_prf+0x2b0>
    1c70:	11 e3       	ldi	r17, 0x31	; 49
    1c72:	f6 01       	movw	r30, r12
    1c74:	11 93       	st	Z+, r17
    1c76:	8b 2d       	mov	r24, r11
    1c78:	df 01       	movw	r26, r30
    1c7a:	90 e2       	ldi	r25, 0x20	; 32
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <dtoa_prf+0x2c0>
    1c7e:	9d 93       	st	X+, r25
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	81 11       	cpse	r24, r1
    1c84:	fc cf       	rjmp	.-8      	; 0x1c7e <dtoa_prf+0x2bc>
    1c86:	eb 0d       	add	r30, r11
    1c88:	f1 1d       	adc	r31, r1
    1c8a:	10 82       	st	Z, r1
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	c9 01       	movw	r24, r18
    1c92:	29 96       	adiw	r28, 0x09	; 9
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	7f 90       	pop	r7
    1cb6:	6f 90       	pop	r6
    1cb8:	08 95       	ret

00001cba <__ftoa_engine>:
    1cba:	28 30       	cpi	r18, 0x08	; 8
    1cbc:	08 f0       	brcs	.+2      	; 0x1cc0 <__ftoa_engine+0x6>
    1cbe:	27 e0       	ldi	r18, 0x07	; 7
    1cc0:	33 27       	eor	r19, r19
    1cc2:	da 01       	movw	r26, r20
    1cc4:	99 0f       	add	r25, r25
    1cc6:	31 1d       	adc	r19, r1
    1cc8:	87 fd       	sbrc	r24, 7
    1cca:	91 60       	ori	r25, 0x01	; 1
    1ccc:	00 96       	adiw	r24, 0x00	; 0
    1cce:	61 05       	cpc	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	39 f4       	brne	.+14     	; 0x1ce2 <__ftoa_engine+0x28>
    1cd4:	32 60       	ori	r19, 0x02	; 2
    1cd6:	2e 5f       	subi	r18, 0xFE	; 254
    1cd8:	3d 93       	st	X+, r19
    1cda:	30 e3       	ldi	r19, 0x30	; 48
    1cdc:	2a 95       	dec	r18
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <__ftoa_engine+0x1e>
    1ce0:	08 95       	ret
    1ce2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce4:	30 f0       	brcs	.+12     	; 0x1cf2 <__ftoa_engine+0x38>
    1ce6:	80 38       	cpi	r24, 0x80	; 128
    1ce8:	71 05       	cpc	r23, r1
    1cea:	61 05       	cpc	r22, r1
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__ftoa_engine+0x36>
    1cee:	3c 5f       	subi	r19, 0xFC	; 252
    1cf0:	3c 5f       	subi	r19, 0xFC	; 252
    1cf2:	3d 93       	st	X+, r19
    1cf4:	91 30       	cpi	r25, 0x01	; 1
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <__ftoa_engine+0x40>
    1cf8:	80 68       	ori	r24, 0x80	; 128
    1cfa:	91 1d       	adc	r25, r1
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	1f 93       	push	r17
    1d02:	0f 93       	push	r16
    1d04:	ff 92       	push	r15
    1d06:	ef 92       	push	r14
    1d08:	19 2f       	mov	r17, r25
    1d0a:	98 7f       	andi	r25, 0xF8	; 248
    1d0c:	96 95       	lsr	r25
    1d0e:	e9 2f       	mov	r30, r25
    1d10:	96 95       	lsr	r25
    1d12:	96 95       	lsr	r25
    1d14:	e9 0f       	add	r30, r25
    1d16:	ff 27       	eor	r31, r31
    1d18:	e0 57       	subi	r30, 0x70	; 112
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	99 27       	eor	r25, r25
    1d1e:	33 27       	eor	r19, r19
    1d20:	ee 24       	eor	r14, r14
    1d22:	ff 24       	eor	r15, r15
    1d24:	a7 01       	movw	r20, r14
    1d26:	e7 01       	movw	r28, r14
    1d28:	05 90       	lpm	r0, Z+
    1d2a:	08 94       	sec
    1d2c:	07 94       	ror	r0
    1d2e:	28 f4       	brcc	.+10     	; 0x1d3a <__ftoa_engine+0x80>
    1d30:	36 0f       	add	r19, r22
    1d32:	e7 1e       	adc	r14, r23
    1d34:	f8 1e       	adc	r15, r24
    1d36:	49 1f       	adc	r20, r25
    1d38:	51 1d       	adc	r21, r1
    1d3a:	66 0f       	add	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	06 94       	lsr	r0
    1d44:	a1 f7       	brne	.-24     	; 0x1d2e <__ftoa_engine+0x74>
    1d46:	05 90       	lpm	r0, Z+
    1d48:	07 94       	ror	r0
    1d4a:	28 f4       	brcc	.+10     	; 0x1d56 <__ftoa_engine+0x9c>
    1d4c:	e7 0e       	add	r14, r23
    1d4e:	f8 1e       	adc	r15, r24
    1d50:	49 1f       	adc	r20, r25
    1d52:	56 1f       	adc	r21, r22
    1d54:	c1 1d       	adc	r28, r1
    1d56:	77 0f       	add	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	66 1f       	adc	r22, r22
    1d5e:	06 94       	lsr	r0
    1d60:	a1 f7       	brne	.-24     	; 0x1d4a <__ftoa_engine+0x90>
    1d62:	05 90       	lpm	r0, Z+
    1d64:	07 94       	ror	r0
    1d66:	28 f4       	brcc	.+10     	; 0x1d72 <__ftoa_engine+0xb8>
    1d68:	f8 0e       	add	r15, r24
    1d6a:	49 1f       	adc	r20, r25
    1d6c:	56 1f       	adc	r21, r22
    1d6e:	c7 1f       	adc	r28, r23
    1d70:	d1 1d       	adc	r29, r1
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	66 1f       	adc	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	06 94       	lsr	r0
    1d7c:	a1 f7       	brne	.-24     	; 0x1d66 <__ftoa_engine+0xac>
    1d7e:	05 90       	lpm	r0, Z+
    1d80:	07 94       	ror	r0
    1d82:	20 f4       	brcc	.+8      	; 0x1d8c <__ftoa_engine+0xd2>
    1d84:	49 0f       	add	r20, r25
    1d86:	56 1f       	adc	r21, r22
    1d88:	c7 1f       	adc	r28, r23
    1d8a:	d8 1f       	adc	r29, r24
    1d8c:	99 0f       	add	r25, r25
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	06 94       	lsr	r0
    1d96:	a9 f7       	brne	.-22     	; 0x1d82 <__ftoa_engine+0xc8>
    1d98:	84 91       	lpm	r24, Z
    1d9a:	10 95       	com	r17
    1d9c:	17 70       	andi	r17, 0x07	; 7
    1d9e:	41 f0       	breq	.+16     	; 0x1db0 <__ftoa_engine+0xf6>
    1da0:	d6 95       	lsr	r29
    1da2:	c7 95       	ror	r28
    1da4:	57 95       	ror	r21
    1da6:	47 95       	ror	r20
    1da8:	f7 94       	ror	r15
    1daa:	e7 94       	ror	r14
    1dac:	1a 95       	dec	r17
    1dae:	c1 f7       	brne	.-16     	; 0x1da0 <__ftoa_engine+0xe6>
    1db0:	e6 e3       	ldi	r30, 0x36	; 54
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	68 94       	set
    1db6:	15 90       	lpm	r1, Z+
    1db8:	15 91       	lpm	r17, Z+
    1dba:	35 91       	lpm	r19, Z+
    1dbc:	65 91       	lpm	r22, Z+
    1dbe:	95 91       	lpm	r25, Z+
    1dc0:	05 90       	lpm	r0, Z+
    1dc2:	7f e2       	ldi	r23, 0x2F	; 47
    1dc4:	73 95       	inc	r23
    1dc6:	e1 18       	sub	r14, r1
    1dc8:	f1 0a       	sbc	r15, r17
    1dca:	43 0b       	sbc	r20, r19
    1dcc:	56 0b       	sbc	r21, r22
    1dce:	c9 0b       	sbc	r28, r25
    1dd0:	d0 09       	sbc	r29, r0
    1dd2:	c0 f7       	brcc	.-16     	; 0x1dc4 <__ftoa_engine+0x10a>
    1dd4:	e1 0c       	add	r14, r1
    1dd6:	f1 1e       	adc	r15, r17
    1dd8:	43 1f       	adc	r20, r19
    1dda:	56 1f       	adc	r21, r22
    1ddc:	c9 1f       	adc	r28, r25
    1dde:	d0 1d       	adc	r29, r0
    1de0:	7e f4       	brtc	.+30     	; 0x1e00 <__ftoa_engine+0x146>
    1de2:	70 33       	cpi	r23, 0x30	; 48
    1de4:	11 f4       	brne	.+4      	; 0x1dea <__ftoa_engine+0x130>
    1de6:	8a 95       	dec	r24
    1de8:	e6 cf       	rjmp	.-52     	; 0x1db6 <__ftoa_engine+0xfc>
    1dea:	e8 94       	clt
    1dec:	01 50       	subi	r16, 0x01	; 1
    1dee:	30 f0       	brcs	.+12     	; 0x1dfc <__ftoa_engine+0x142>
    1df0:	08 0f       	add	r16, r24
    1df2:	0a f4       	brpl	.+2      	; 0x1df6 <__ftoa_engine+0x13c>
    1df4:	00 27       	eor	r16, r16
    1df6:	02 17       	cp	r16, r18
    1df8:	08 f4       	brcc	.+2      	; 0x1dfc <__ftoa_engine+0x142>
    1dfa:	20 2f       	mov	r18, r16
    1dfc:	23 95       	inc	r18
    1dfe:	02 2f       	mov	r16, r18
    1e00:	7a 33       	cpi	r23, 0x3A	; 58
    1e02:	28 f0       	brcs	.+10     	; 0x1e0e <__ftoa_engine+0x154>
    1e04:	79 e3       	ldi	r23, 0x39	; 57
    1e06:	7d 93       	st	X+, r23
    1e08:	2a 95       	dec	r18
    1e0a:	e9 f7       	brne	.-6      	; 0x1e06 <__ftoa_engine+0x14c>
    1e0c:	10 c0       	rjmp	.+32     	; 0x1e2e <__ftoa_engine+0x174>
    1e0e:	7d 93       	st	X+, r23
    1e10:	2a 95       	dec	r18
    1e12:	89 f6       	brne	.-94     	; 0x1db6 <__ftoa_engine+0xfc>
    1e14:	06 94       	lsr	r0
    1e16:	97 95       	ror	r25
    1e18:	67 95       	ror	r22
    1e1a:	37 95       	ror	r19
    1e1c:	17 95       	ror	r17
    1e1e:	17 94       	ror	r1
    1e20:	e1 18       	sub	r14, r1
    1e22:	f1 0a       	sbc	r15, r17
    1e24:	43 0b       	sbc	r20, r19
    1e26:	56 0b       	sbc	r21, r22
    1e28:	c9 0b       	sbc	r28, r25
    1e2a:	d0 09       	sbc	r29, r0
    1e2c:	98 f0       	brcs	.+38     	; 0x1e54 <__ftoa_engine+0x19a>
    1e2e:	23 95       	inc	r18
    1e30:	7e 91       	ld	r23, -X
    1e32:	73 95       	inc	r23
    1e34:	7a 33       	cpi	r23, 0x3A	; 58
    1e36:	08 f0       	brcs	.+2      	; 0x1e3a <__ftoa_engine+0x180>
    1e38:	70 e3       	ldi	r23, 0x30	; 48
    1e3a:	7c 93       	st	X, r23
    1e3c:	20 13       	cpse	r18, r16
    1e3e:	b8 f7       	brcc	.-18     	; 0x1e2e <__ftoa_engine+0x174>
    1e40:	7e 91       	ld	r23, -X
    1e42:	70 61       	ori	r23, 0x10	; 16
    1e44:	7d 93       	st	X+, r23
    1e46:	30 f0       	brcs	.+12     	; 0x1e54 <__ftoa_engine+0x19a>
    1e48:	83 95       	inc	r24
    1e4a:	71 e3       	ldi	r23, 0x31	; 49
    1e4c:	7d 93       	st	X+, r23
    1e4e:	70 e3       	ldi	r23, 0x30	; 48
    1e50:	2a 95       	dec	r18
    1e52:	e1 f7       	brne	.-8      	; 0x1e4c <__ftoa_engine+0x192>
    1e54:	11 24       	eor	r1, r1
    1e56:	ef 90       	pop	r14
    1e58:	ff 90       	pop	r15
    1e5a:	0f 91       	pop	r16
    1e5c:	1f 91       	pop	r17
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	99 27       	eor	r25, r25
    1e64:	87 fd       	sbrc	r24, 7
    1e66:	90 95       	com	r25
    1e68:	08 95       	ret

00001e6a <strrev>:
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	67 2f       	mov	r22, r23
    1e70:	71 91       	ld	r23, Z+
    1e72:	77 23       	and	r23, r23
    1e74:	e1 f7       	brne	.-8      	; 0x1e6e <strrev+0x4>
    1e76:	32 97       	sbiw	r30, 0x02	; 2
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <strrev+0x18>
    1e7a:	7c 91       	ld	r23, X
    1e7c:	6d 93       	st	X+, r22
    1e7e:	70 83       	st	Z, r23
    1e80:	62 91       	ld	r22, -Z
    1e82:	ae 17       	cp	r26, r30
    1e84:	bf 07       	cpc	r27, r31
    1e86:	c8 f3       	brcs	.-14     	; 0x1e7a <strrev+0x10>
    1e88:	08 95       	ret

00001e8a <__udivmodhi4>:
    1e8a:	aa 1b       	sub	r26, r26
    1e8c:	bb 1b       	sub	r27, r27
    1e8e:	51 e1       	ldi	r21, 0x11	; 17
    1e90:	07 c0       	rjmp	.+14     	; 0x1ea0 <__udivmodhi4_ep>

00001e92 <__udivmodhi4_loop>:
    1e92:	aa 1f       	adc	r26, r26
    1e94:	bb 1f       	adc	r27, r27
    1e96:	a6 17       	cp	r26, r22
    1e98:	b7 07       	cpc	r27, r23
    1e9a:	10 f0       	brcs	.+4      	; 0x1ea0 <__udivmodhi4_ep>
    1e9c:	a6 1b       	sub	r26, r22
    1e9e:	b7 0b       	sbc	r27, r23

00001ea0 <__udivmodhi4_ep>:
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	5a 95       	dec	r21
    1ea6:	a9 f7       	brne	.-22     	; 0x1e92 <__udivmodhi4_loop>
    1ea8:	80 95       	com	r24
    1eaa:	90 95       	com	r25
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	08 95       	ret

00001eb2 <_exit>:
    1eb2:	f8 94       	cli

00001eb4 <__stop_program>:
    1eb4:	ff cf       	rjmp	.-2      	; 0x1eb4 <__stop_program>
